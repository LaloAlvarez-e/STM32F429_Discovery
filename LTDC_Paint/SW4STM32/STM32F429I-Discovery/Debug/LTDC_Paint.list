
LTDC_Paint.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c18  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000bd20  08008dc4  08008dc4  00018dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08014ae4  08014ae4  00024ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08014aec  08014aec  00024aec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08014af0  08014af0  00024af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000160  20000000  08014af4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00030160  2**0
                  CONTENTS
  8 .bss          00001250  20000160  20000160  00030160  2**2
                  ALLOC
  9 ._user_heap_stack 00008000  200013b0  200013b0  00030160  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 11 .debug_info   00030ef1  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006a38  00000000  00000000  00061081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loc    0001e0d1  00000000  00000000  00067ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001888  00000000  00000000  00085b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002520  00000000  00000000  00087418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a98  00000000  00000000  00089938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002cdda  00000000  00000000  000b33d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4e2a  00000000  00000000  000e01aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c4fd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c38  00000000  00000000  001c5024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000160 	.word	0x20000160
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008dac 	.word	0x08008dac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000164 	.word	0x20000164
 80001e8:	08008dac 	.word	0x08008dac

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 80004f0:	20f0      	movs	r0, #240	; 0xf0
 80004f2:	4770      	bx	lr

080004f4 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 80004f4:	f44f 70a0 	mov.w	r0, #320	; 0x140
 80004f8:	4770      	bx	lr

080004fa <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 80004fa:	2029      	movs	r0, #41	; 0x29
 80004fc:	f000 bd8e 	b.w	800101c <LCD_IO_WriteReg>

08000500 <ili9341_DisplayOff>:
 8000500:	2028      	movs	r0, #40	; 0x28
 8000502:	f000 bd8b 	b.w	800101c <LCD_IO_WriteReg>

08000506 <ili9341_Init>:
{
 8000506:	b508      	push	{r3, lr}
  LCD_IO_Init();
 8000508:	f000 fd0e 	bl	8000f28 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 800050c:	20ca      	movs	r0, #202	; 0xca
 800050e:	f000 fd85 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000512:	20c3      	movs	r0, #195	; 0xc3
 8000514:	f000 fd66 	bl	8000fe4 <LCD_IO_WriteData>
 8000518:	2008      	movs	r0, #8
 800051a:	f000 fd63 	bl	8000fe4 <LCD_IO_WriteData>
 800051e:	2050      	movs	r0, #80	; 0x50
 8000520:	f000 fd60 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000524:	20cf      	movs	r0, #207	; 0xcf
 8000526:	f000 fd79 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800052a:	2000      	movs	r0, #0
 800052c:	f000 fd5a 	bl	8000fe4 <LCD_IO_WriteData>
 8000530:	20c1      	movs	r0, #193	; 0xc1
 8000532:	f000 fd57 	bl	8000fe4 <LCD_IO_WriteData>
 8000536:	2030      	movs	r0, #48	; 0x30
 8000538:	f000 fd54 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800053c:	20ed      	movs	r0, #237	; 0xed
 800053e:	f000 fd6d 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000542:	2064      	movs	r0, #100	; 0x64
 8000544:	f000 fd4e 	bl	8000fe4 <LCD_IO_WriteData>
 8000548:	2003      	movs	r0, #3
 800054a:	f000 fd4b 	bl	8000fe4 <LCD_IO_WriteData>
 800054e:	2012      	movs	r0, #18
 8000550:	f000 fd48 	bl	8000fe4 <LCD_IO_WriteData>
 8000554:	2081      	movs	r0, #129	; 0x81
 8000556:	f000 fd45 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800055a:	20e8      	movs	r0, #232	; 0xe8
 800055c:	f000 fd5e 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000560:	2085      	movs	r0, #133	; 0x85
 8000562:	f000 fd3f 	bl	8000fe4 <LCD_IO_WriteData>
 8000566:	2000      	movs	r0, #0
 8000568:	f000 fd3c 	bl	8000fe4 <LCD_IO_WriteData>
 800056c:	2078      	movs	r0, #120	; 0x78
 800056e:	f000 fd39 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000572:	20cb      	movs	r0, #203	; 0xcb
 8000574:	f000 fd52 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000578:	2039      	movs	r0, #57	; 0x39
 800057a:	f000 fd33 	bl	8000fe4 <LCD_IO_WriteData>
 800057e:	202c      	movs	r0, #44	; 0x2c
 8000580:	f000 fd30 	bl	8000fe4 <LCD_IO_WriteData>
 8000584:	2000      	movs	r0, #0
 8000586:	f000 fd2d 	bl	8000fe4 <LCD_IO_WriteData>
 800058a:	2034      	movs	r0, #52	; 0x34
 800058c:	f000 fd2a 	bl	8000fe4 <LCD_IO_WriteData>
 8000590:	2002      	movs	r0, #2
 8000592:	f000 fd27 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000596:	20f7      	movs	r0, #247	; 0xf7
 8000598:	f000 fd40 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800059c:	2020      	movs	r0, #32
 800059e:	f000 fd21 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005a2:	20ea      	movs	r0, #234	; 0xea
 80005a4:	f000 fd3a 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fd1b 	bl	8000fe4 <LCD_IO_WriteData>
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 fd18 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005b4:	20b1      	movs	r0, #177	; 0xb1
 80005b6:	f000 fd31 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005ba:	2000      	movs	r0, #0
 80005bc:	f000 fd12 	bl	8000fe4 <LCD_IO_WriteData>
 80005c0:	201b      	movs	r0, #27
 80005c2:	f000 fd0f 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005c6:	20b6      	movs	r0, #182	; 0xb6
 80005c8:	f000 fd28 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005cc:	200a      	movs	r0, #10
 80005ce:	f000 fd09 	bl	8000fe4 <LCD_IO_WriteData>
 80005d2:	20a2      	movs	r0, #162	; 0xa2
 80005d4:	f000 fd06 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005d8:	20c0      	movs	r0, #192	; 0xc0
 80005da:	f000 fd1f 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005de:	2010      	movs	r0, #16
 80005e0:	f000 fd00 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005e4:	20c1      	movs	r0, #193	; 0xc1
 80005e6:	f000 fd19 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005ea:	2010      	movs	r0, #16
 80005ec:	f000 fcfa 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80005f0:	20c5      	movs	r0, #197	; 0xc5
 80005f2:	f000 fd13 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80005f6:	2045      	movs	r0, #69	; 0x45
 80005f8:	f000 fcf4 	bl	8000fe4 <LCD_IO_WriteData>
 80005fc:	2015      	movs	r0, #21
 80005fe:	f000 fcf1 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000602:	20c7      	movs	r0, #199	; 0xc7
 8000604:	f000 fd0a 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000608:	2090      	movs	r0, #144	; 0x90
 800060a:	f000 fceb 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800060e:	2036      	movs	r0, #54	; 0x36
 8000610:	f000 fd04 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000614:	20c8      	movs	r0, #200	; 0xc8
 8000616:	f000 fce5 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800061a:	20f2      	movs	r0, #242	; 0xf2
 800061c:	f000 fcfe 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000620:	2000      	movs	r0, #0
 8000622:	f000 fcdf 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000626:	20b0      	movs	r0, #176	; 0xb0
 8000628:	f000 fcf8 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800062c:	20c2      	movs	r0, #194	; 0xc2
 800062e:	f000 fcd9 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000632:	20b6      	movs	r0, #182	; 0xb6
 8000634:	f000 fcf2 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000638:	200a      	movs	r0, #10
 800063a:	f000 fcd3 	bl	8000fe4 <LCD_IO_WriteData>
 800063e:	20a7      	movs	r0, #167	; 0xa7
 8000640:	f000 fcd0 	bl	8000fe4 <LCD_IO_WriteData>
 8000644:	2027      	movs	r0, #39	; 0x27
 8000646:	f000 fccd 	bl	8000fe4 <LCD_IO_WriteData>
 800064a:	2004      	movs	r0, #4
 800064c:	f000 fcca 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8000650:	202a      	movs	r0, #42	; 0x2a
 8000652:	f000 fce3 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000656:	2000      	movs	r0, #0
 8000658:	f000 fcc4 	bl	8000fe4 <LCD_IO_WriteData>
 800065c:	2000      	movs	r0, #0
 800065e:	f000 fcc1 	bl	8000fe4 <LCD_IO_WriteData>
 8000662:	2000      	movs	r0, #0
 8000664:	f000 fcbe 	bl	8000fe4 <LCD_IO_WriteData>
 8000668:	20ef      	movs	r0, #239	; 0xef
 800066a:	f000 fcbb 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800066e:	202b      	movs	r0, #43	; 0x2b
 8000670:	f000 fcd4 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000674:	2000      	movs	r0, #0
 8000676:	f000 fcb5 	bl	8000fe4 <LCD_IO_WriteData>
 800067a:	2000      	movs	r0, #0
 800067c:	f000 fcb2 	bl	8000fe4 <LCD_IO_WriteData>
 8000680:	2001      	movs	r0, #1
 8000682:	f000 fcaf 	bl	8000fe4 <LCD_IO_WriteData>
 8000686:	203f      	movs	r0, #63	; 0x3f
 8000688:	f000 fcac 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800068c:	20f6      	movs	r0, #246	; 0xf6
 800068e:	f000 fcc5 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000692:	2001      	movs	r0, #1
 8000694:	f000 fca6 	bl	8000fe4 <LCD_IO_WriteData>
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fca3 	bl	8000fe4 <LCD_IO_WriteData>
 800069e:	2006      	movs	r0, #6
 80006a0:	f000 fca0 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006a4:	202c      	movs	r0, #44	; 0x2c
 80006a6:	f000 fcb9 	bl	800101c <LCD_IO_WriteReg>
  LCD_Delay(200);
 80006aa:	20c8      	movs	r0, #200	; 0xc8
 80006ac:	f000 fd08 	bl	80010c0 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80006b0:	2026      	movs	r0, #38	; 0x26
 80006b2:	f000 fcb3 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f000 fc94 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80006bc:	20e0      	movs	r0, #224	; 0xe0
 80006be:	f000 fcad 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80006c2:	200f      	movs	r0, #15
 80006c4:	f000 fc8e 	bl	8000fe4 <LCD_IO_WriteData>
 80006c8:	2029      	movs	r0, #41	; 0x29
 80006ca:	f000 fc8b 	bl	8000fe4 <LCD_IO_WriteData>
 80006ce:	2024      	movs	r0, #36	; 0x24
 80006d0:	f000 fc88 	bl	8000fe4 <LCD_IO_WriteData>
 80006d4:	200c      	movs	r0, #12
 80006d6:	f000 fc85 	bl	8000fe4 <LCD_IO_WriteData>
 80006da:	200e      	movs	r0, #14
 80006dc:	f000 fc82 	bl	8000fe4 <LCD_IO_WriteData>
 80006e0:	2009      	movs	r0, #9
 80006e2:	f000 fc7f 	bl	8000fe4 <LCD_IO_WriteData>
 80006e6:	204e      	movs	r0, #78	; 0x4e
 80006e8:	f000 fc7c 	bl	8000fe4 <LCD_IO_WriteData>
 80006ec:	2078      	movs	r0, #120	; 0x78
 80006ee:	f000 fc79 	bl	8000fe4 <LCD_IO_WriteData>
 80006f2:	203c      	movs	r0, #60	; 0x3c
 80006f4:	f000 fc76 	bl	8000fe4 <LCD_IO_WriteData>
 80006f8:	2009      	movs	r0, #9
 80006fa:	f000 fc73 	bl	8000fe4 <LCD_IO_WriteData>
 80006fe:	2013      	movs	r0, #19
 8000700:	f000 fc70 	bl	8000fe4 <LCD_IO_WriteData>
 8000704:	2005      	movs	r0, #5
 8000706:	f000 fc6d 	bl	8000fe4 <LCD_IO_WriteData>
 800070a:	2017      	movs	r0, #23
 800070c:	f000 fc6a 	bl	8000fe4 <LCD_IO_WriteData>
 8000710:	2011      	movs	r0, #17
 8000712:	f000 fc67 	bl	8000fe4 <LCD_IO_WriteData>
 8000716:	2000      	movs	r0, #0
 8000718:	f000 fc64 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800071c:	20e1      	movs	r0, #225	; 0xe1
 800071e:	f000 fc7d 	bl	800101c <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8000722:	2000      	movs	r0, #0
 8000724:	f000 fc5e 	bl	8000fe4 <LCD_IO_WriteData>
 8000728:	2016      	movs	r0, #22
 800072a:	f000 fc5b 	bl	8000fe4 <LCD_IO_WriteData>
 800072e:	201b      	movs	r0, #27
 8000730:	f000 fc58 	bl	8000fe4 <LCD_IO_WriteData>
 8000734:	2004      	movs	r0, #4
 8000736:	f000 fc55 	bl	8000fe4 <LCD_IO_WriteData>
 800073a:	2011      	movs	r0, #17
 800073c:	f000 fc52 	bl	8000fe4 <LCD_IO_WriteData>
 8000740:	2007      	movs	r0, #7
 8000742:	f000 fc4f 	bl	8000fe4 <LCD_IO_WriteData>
 8000746:	2031      	movs	r0, #49	; 0x31
 8000748:	f000 fc4c 	bl	8000fe4 <LCD_IO_WriteData>
 800074c:	2033      	movs	r0, #51	; 0x33
 800074e:	f000 fc49 	bl	8000fe4 <LCD_IO_WriteData>
 8000752:	2042      	movs	r0, #66	; 0x42
 8000754:	f000 fc46 	bl	8000fe4 <LCD_IO_WriteData>
 8000758:	2005      	movs	r0, #5
 800075a:	f000 fc43 	bl	8000fe4 <LCD_IO_WriteData>
 800075e:	200c      	movs	r0, #12
 8000760:	f000 fc40 	bl	8000fe4 <LCD_IO_WriteData>
 8000764:	200a      	movs	r0, #10
 8000766:	f000 fc3d 	bl	8000fe4 <LCD_IO_WriteData>
 800076a:	2028      	movs	r0, #40	; 0x28
 800076c:	f000 fc3a 	bl	8000fe4 <LCD_IO_WriteData>
 8000770:	202f      	movs	r0, #47	; 0x2f
 8000772:	f000 fc37 	bl	8000fe4 <LCD_IO_WriteData>
 8000776:	200f      	movs	r0, #15
 8000778:	f000 fc34 	bl	8000fe4 <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800077c:	2011      	movs	r0, #17
 800077e:	f000 fc4d 	bl	800101c <LCD_IO_WriteReg>
  LCD_Delay(200);
 8000782:	20c8      	movs	r0, #200	; 0xc8
 8000784:	f000 fc9c 	bl	80010c0 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 8000788:	2029      	movs	r0, #41	; 0x29
 800078a:	f000 fc47 	bl	800101c <LCD_IO_WriteReg>
}
 800078e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 8000792:	202c      	movs	r0, #44	; 0x2c
 8000794:	f000 bc42 	b.w	800101c <LCD_IO_WriteReg>

08000798 <ili9341_ReadID>:
{
 8000798:	b508      	push	{r3, lr}
  LCD_IO_Init();
 800079a:	f000 fbc5 	bl	8000f28 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 800079e:	2103      	movs	r1, #3
 80007a0:	20d3      	movs	r0, #211	; 0xd3
 80007a2:	f000 fc57 	bl	8001054 <LCD_IO_ReadData>
}
 80007a6:	b280      	uxth	r0, r0
 80007a8:	bd08      	pop	{r3, pc}

080007aa <stmpe811_IO_WritePin>:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7. 
  * @param PinState: The new IO pin state.
  * @retval None
  */
void stmpe811_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 80007aa:	4613      	mov	r3, r2
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
  {
    /* Set the register */
    IOE_Write(DeviceAddr, STMPE811_REG_IO_SET_PIN, (uint8_t)IO_Pin);
 80007ac:	b2c0      	uxtb	r0, r0
 80007ae:	b2ca      	uxtb	r2, r1
  if (PinState != 0)
 80007b0:	b113      	cbz	r3, 80007b8 <stmpe811_IO_WritePin+0xe>
    IOE_Write(DeviceAddr, STMPE811_REG_IO_SET_PIN, (uint8_t)IO_Pin);
 80007b2:	2110      	movs	r1, #16
  }
  else
  {
    /* Set the register */
    IOE_Write(DeviceAddr, STMPE811_REG_IO_CLR_PIN, (uint8_t)IO_Pin);
 80007b4:	f000 bcb2 	b.w	800111c <IOE_Write>
 80007b8:	2111      	movs	r1, #17
 80007ba:	e7fb      	b.n	80007b4 <stmpe811_IO_WritePin+0xa>

080007bc <stmpe811_Reset>:
{
 80007bc:	b510      	push	{r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80007be:	b2c4      	uxtb	r4, r0
 80007c0:	2202      	movs	r2, #2
 80007c2:	2103      	movs	r1, #3
 80007c4:	4620      	mov	r0, r4
 80007c6:	f000 fca9 	bl	800111c <IOE_Write>
  IOE_Delay(10); 
 80007ca:	200a      	movs	r0, #10
 80007cc:	f000 fcf6 	bl	80011bc <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80007d0:	4620      	mov	r0, r4
 80007d2:	2200      	movs	r2, #0
 80007d4:	2103      	movs	r1, #3
 80007d6:	f000 fca1 	bl	800111c <IOE_Write>
}
 80007da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 80007de:	2002      	movs	r0, #2
 80007e0:	f000 bcec 	b.w	80011bc <IOE_Delay>

080007e4 <stmpe811_ReadID>:
{
 80007e4:	b538      	push	{r3, r4, r5, lr}
 80007e6:	4604      	mov	r4, r0
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80007e8:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 80007ea:	f000 fc6b 	bl	80010c4 <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80007ee:	2100      	movs	r1, #0
 80007f0:	4620      	mov	r0, r4
 80007f2:	f000 fcad 	bl	8001150 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80007f6:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80007f8:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80007fa:	4620      	mov	r0, r4
 80007fc:	f000 fca8 	bl	8001150 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8000800:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 8000804:	b280      	uxth	r0, r0
 8000806:	bd38      	pop	{r3, r4, r5, pc}

08000808 <stmpe811_IO_ReadPin>:
  *        of the following values:
  *   @arg  STMPE811_PIN_x: where x can be from 0 to 7. 
  * @retval IO pin(s) state.
  */
uint32_t stmpe811_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000808:	b510      	push	{r4, lr}
  return((uint32_t)(IOE_Read(DeviceAddr, STMPE811_REG_IO_MP_STA) & (uint8_t)IO_Pin));
 800080a:	b2c0      	uxtb	r0, r0
{
 800080c:	460c      	mov	r4, r1
  return((uint32_t)(IOE_Read(DeviceAddr, STMPE811_REG_IO_MP_STA) & (uint8_t)IO_Pin));
 800080e:	2112      	movs	r1, #18
 8000810:	f000 fc9e 	bl	8001150 <IOE_Read>
 8000814:	4020      	ands	r0, r4
}
 8000816:	b2c0      	uxtb	r0, r0
 8000818:	bd10      	pop	{r4, pc}

0800081a <stmpe811_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  STMPE811_PIN_x Where x can be from 0 to 7.             
  * @retval Status of the checked IO pin(s).
  */
uint32_t stmpe811_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 800081a:	b510      	push	{r4, lr}
  /* Get the Interrupt status */
  return(IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_STA) & (uint8_t)IO_Pin); 
 800081c:	b2c0      	uxtb	r0, r0
{
 800081e:	460c      	mov	r4, r1
  return(IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_STA) & (uint8_t)IO_Pin); 
 8000820:	210d      	movs	r1, #13
 8000822:	f000 fc95 	bl	8001150 <IOE_Read>
 8000826:	4020      	ands	r0, r4
}
 8000828:	b2c0      	uxtb	r0, r0
 800082a:	bd10      	pop	{r4, pc}

0800082c <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800082c:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800082e:	b2c4      	uxtb	r4, r0
 8000830:	2140      	movs	r1, #64	; 0x40
 8000832:	4620      	mov	r0, r4
 8000834:	f000 fc8c 	bl	8001150 <IOE_Read>
  
  if(state > 0)
 8000838:	0603      	lsls	r3, r0, #24
 800083a:	d507      	bpl.n	800084c <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800083c:	214c      	movs	r1, #76	; 0x4c
 800083e:	4620      	mov	r0, r4
 8000840:	f000 fc86 	bl	8001150 <IOE_Read>
    {
      ret = 1;
 8000844:	3800      	subs	r0, #0
 8000846:	bf18      	it	ne
 8000848:	2001      	movne	r0, #1
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
  }
  
  return ret;
}
 800084a:	bd10      	pop	{r4, pc}
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800084c:	2201      	movs	r2, #1
 800084e:	214b      	movs	r1, #75	; 0x4b
 8000850:	4620      	mov	r0, r4
 8000852:	f000 fc63 	bl	800111c <IOE_Write>
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000856:	4620      	mov	r0, r4
 8000858:	2200      	movs	r2, #0
 800085a:	214b      	movs	r1, #75	; 0x4b
 800085c:	f000 fc5e 	bl	800111c <IOE_Write>
  uint8_t ret = 0;
 8000860:	2000      	movs	r0, #0
 8000862:	e7f2      	b.n	800084a <stmpe811_TS_DetectTouch+0x1e>

08000864 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000864:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8000866:	2304      	movs	r3, #4
 8000868:	b2c4      	uxtb	r4, r0
{
 800086a:	460e      	mov	r6, r1
 800086c:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800086e:	21d7      	movs	r1, #215	; 0xd7
 8000870:	eb0d 0203 	add.w	r2, sp, r3
 8000874:	4620      	mov	r0, r4
 8000876:	f000 fc89 	bl	800118c <IOE_ReadMultiple>
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
 800087a:	9b01      	ldr	r3, [sp, #4]
 800087c:	ba1b      	rev	r3, r3
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800087e:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8000880:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8000884:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000886:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8000888:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800088a:	2201      	movs	r2, #1
 800088c:	214b      	movs	r1, #75	; 0x4b
 800088e:	f000 fc45 	bl	800111c <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000892:	2200      	movs	r2, #0
 8000894:	214b      	movs	r1, #75	; 0x4b
 8000896:	4620      	mov	r0, r4
 8000898:	f000 fc40 	bl	800111c <IOE_Write>
}
 800089c:	b002      	add	sp, #8
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <stmpe811_Init>:
{
 80008a0:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 80008a2:	4b0a      	ldr	r3, [pc, #40]	; (80008cc <stmpe811_Init+0x2c>)
 80008a4:	781a      	ldrb	r2, [r3, #0]
 80008a6:	4290      	cmp	r0, r2
{
 80008a8:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 80008aa:	d00d      	beq.n	80008c8 <stmpe811_Init+0x28>
 80008ac:	7859      	ldrb	r1, [r3, #1]
 80008ae:	4288      	cmp	r0, r1
 80008b0:	d00a      	beq.n	80008c8 <stmpe811_Init+0x28>
 80008b2:	b10a      	cbz	r2, 80008b8 <stmpe811_Init+0x18>
 80008b4:	b941      	cbnz	r1, 80008c8 <stmpe811_Init+0x28>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 80008b6:	2201      	movs	r2, #1
      stmpe811[empty] = DeviceAddr;
 80008b8:	549c      	strb	r4, [r3, r2]
      IOE_Init(); 
 80008ba:	f000 fc03 	bl	80010c4 <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 80008be:	4620      	mov	r0, r4
}
 80008c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 80008c4:	f7ff bf7a 	b.w	80007bc <stmpe811_Reset>
}
 80008c8:	bd10      	pop	{r4, pc}
 80008ca:	bf00      	nop
 80008cc:	2000017c 	.word	0x2000017c

080008d0 <stmpe811_EnableGlobalIT>:
{
 80008d0:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80008d2:	b2c4      	uxtb	r4, r0
 80008d4:	2109      	movs	r1, #9
 80008d6:	4620      	mov	r0, r4
 80008d8:	f000 fc3a 	bl	8001150 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80008dc:	f040 0001 	orr.w	r0, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80008e0:	b2c2      	uxtb	r2, r0
 80008e2:	2109      	movs	r1, #9
 80008e4:	4620      	mov	r0, r4
}
 80008e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80008ea:	f000 bc17 	b.w	800111c <IOE_Write>

080008ee <stmpe811_DisableGlobalIT>:
{
 80008ee:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80008f0:	b2c4      	uxtb	r4, r0
 80008f2:	2109      	movs	r1, #9
 80008f4:	4620      	mov	r0, r4
 80008f6:	f000 fc2b 	bl	8001150 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80008fa:	2109      	movs	r1, #9
 80008fc:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 8000900:	4620      	mov	r0, r4
}
 8000902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 8000906:	f000 bc09 	b.w	800111c <IOE_Write>

0800090a <stmpe811_EnableITSource>:
{
 800090a:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800090c:	b2c4      	uxtb	r4, r0
{
 800090e:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000910:	4620      	mov	r0, r4
 8000912:	210a      	movs	r1, #10
 8000914:	f000 fc1c 	bl	8001150 <IOE_Read>
  tmp |= Source; 
 8000918:	4328      	orrs	r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800091a:	b2c2      	uxtb	r2, r0
 800091c:	210a      	movs	r1, #10
 800091e:	4620      	mov	r0, r4
}
 8000920:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000924:	f000 bbfa 	b.w	800111c <IOE_Write>

08000928 <stmpe811_IO_EnableIT>:
{ 
 8000928:	b507      	push	{r0, r1, r2, lr}
 800092a:	9001      	str	r0, [sp, #4]
  IOE_ITConfig();
 800092c:	f000 fbcc 	bl	80010c8 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_GIT_IO);
 8000930:	9801      	ldr	r0, [sp, #4]
 8000932:	2180      	movs	r1, #128	; 0x80
 8000934:	f7ff ffe9 	bl	800090a <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr); 
 8000938:	9801      	ldr	r0, [sp, #4]
}
 800093a:	b003      	add	sp, #12
 800093c:	f85d eb04 	ldr.w	lr, [sp], #4
  stmpe811_EnableGlobalIT(DeviceAddr); 
 8000940:	f7ff bfc6 	b.w	80008d0 <stmpe811_EnableGlobalIT>

08000944 <stmpe811_TS_EnableIT>:
{
 8000944:	b507      	push	{r0, r1, r2, lr}
 8000946:	9001      	str	r0, [sp, #4]
  IOE_ITConfig();
 8000948:	f000 fbbe 	bl	80010c8 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 800094c:	9801      	ldr	r0, [sp, #4]
 800094e:	211f      	movs	r1, #31
 8000950:	f7ff ffdb 	bl	800090a <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 8000954:	9801      	ldr	r0, [sp, #4]
}
 8000956:	b003      	add	sp, #12
 8000958:	f85d eb04 	ldr.w	lr, [sp], #4
  stmpe811_EnableGlobalIT(DeviceAddr);
 800095c:	f7ff bfb8 	b.w	80008d0 <stmpe811_EnableGlobalIT>

08000960 <stmpe811_DisableITSource>:
{
 8000960:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000962:	b2c4      	uxtb	r4, r0
{
 8000964:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 8000966:	4620      	mov	r0, r4
 8000968:	210a      	movs	r1, #10
 800096a:	f000 fbf1 	bl	8001150 <IOE_Read>
  tmp &= ~Source; 
 800096e:	ea20 0005 	bic.w	r0, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8000972:	b2c2      	uxtb	r2, r0
 8000974:	210a      	movs	r1, #10
 8000976:	4620      	mov	r0, r4
}
 8000978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800097c:	f000 bbce 	b.w	800111c <IOE_Write>

08000980 <stmpe811_IO_DisableIT>:
{
 8000980:	b510      	push	{r4, lr}
 8000982:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8000984:	f7ff ffb3 	bl	80008ee <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_GIT_IO);    
 8000988:	4620      	mov	r0, r4
 800098a:	2180      	movs	r1, #128	; 0x80
}
 800098c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_GIT_IO);    
 8000990:	f7ff bfe6 	b.w	8000960 <stmpe811_DisableITSource>

08000994 <stmpe811_TS_DisableIT>:
{
 8000994:	b510      	push	{r4, lr}
 8000996:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 8000998:	f7ff ffa9 	bl	80008ee <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 800099c:	4620      	mov	r0, r4
 800099e:	211f      	movs	r1, #31
}
 80009a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 80009a4:	f7ff bfdc 	b.w	8000960 <stmpe811_DisableITSource>

080009a8 <stmpe811_SetITPolarity>:
{
 80009a8:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80009aa:	b2c4      	uxtb	r4, r0
{
 80009ac:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80009ae:	4620      	mov	r0, r4
 80009b0:	2109      	movs	r1, #9
 80009b2:	f000 fbcd 	bl	8001150 <IOE_Read>
  tmp &= ~(uint8_t)0x04;
 80009b6:	f000 00fb 	and.w	r0, r0, #251	; 0xfb
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80009ba:	ea40 0205 	orr.w	r2, r0, r5
 80009be:	2109      	movs	r1, #9
 80009c0:	4620      	mov	r0, r4
}
 80009c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80009c6:	f000 bba9 	b.w	800111c <IOE_Write>

080009ca <stmpe811_SetITType>:
{
 80009ca:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80009cc:	b2c4      	uxtb	r4, r0
{
 80009ce:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80009d0:	4620      	mov	r0, r4
 80009d2:	2109      	movs	r1, #9
 80009d4:	f000 fbbc 	bl	8001150 <IOE_Read>
  tmp &= ~(uint8_t)0x02;
 80009d8:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80009dc:	ea40 0205 	orr.w	r2, r0, r5
 80009e0:	2109      	movs	r1, #9
 80009e2:	4620      	mov	r0, r4
}
 80009e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80009e8:	f000 bb98 	b.w	800111c <IOE_Write>

080009ec <stmpe811_ReadGITStatus>:
{
 80009ec:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80009ee:	b2c0      	uxtb	r0, r0
{
 80009f0:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 80009f2:	210b      	movs	r1, #11
 80009f4:	f000 fbac 	bl	8001150 <IOE_Read>
}
 80009f8:	4020      	ands	r0, r4
 80009fa:	bd10      	pop	{r4, pc}

080009fc <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 80009fc:	211f      	movs	r1, #31
 80009fe:	f7ff bff5 	b.w	80009ec <stmpe811_ReadGITStatus>

08000a02 <stmpe811_ClearGlobalIT>:
{
 8000a02:	460a      	mov	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8000a04:	b2c0      	uxtb	r0, r0
 8000a06:	210b      	movs	r1, #11
 8000a08:	f000 bb88 	b.w	800111c <IOE_Write>

08000a0c <stmpe811_IO_ClearIT>:
{
 8000a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a0e:	4604      	mov	r4, r0
 8000a10:	460d      	mov	r5, r1
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_GIT_IO);
 8000a12:	2180      	movs	r1, #128	; 0x80
 8000a14:	f7ff fff5 	bl	8000a02 <stmpe811_ClearGlobalIT>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_STA, (uint8_t)IO_Pin);  
 8000a18:	b2e0      	uxtb	r0, r4
 8000a1a:	b2ea      	uxtb	r2, r5
 8000a1c:	210d      	movs	r1, #13
 8000a1e:	9201      	str	r2, [sp, #4]
 8000a20:	9000      	str	r0, [sp, #0]
 8000a22:	f000 fb7b 	bl	800111c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_ED, (uint8_t)IO_Pin);
 8000a26:	9a01      	ldr	r2, [sp, #4]
 8000a28:	9800      	ldr	r0, [sp, #0]
 8000a2a:	2114      	movs	r1, #20
 8000a2c:	f000 fb76 	bl	800111c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, (uint8_t)IO_Pin);
 8000a30:	9a01      	ldr	r2, [sp, #4]
 8000a32:	9800      	ldr	r0, [sp, #0]
 8000a34:	2115      	movs	r1, #21
 8000a36:	f000 fb71 	bl	800111c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, (uint8_t)IO_Pin); 
 8000a3a:	9a01      	ldr	r2, [sp, #4]
 8000a3c:	9800      	ldr	r0, [sp, #0]
 8000a3e:	2116      	movs	r1, #22
}
 8000a40:	b003      	add	sp, #12
 8000a42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, (uint8_t)IO_Pin); 
 8000a46:	f000 bb69 	b.w	800111c <IOE_Write>

08000a4a <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 8000a4a:	211f      	movs	r1, #31
 8000a4c:	f7ff bfd9 	b.w	8000a02 <stmpe811_ClearGlobalIT>

08000a50 <stmpe811_IO_InitPin>:
{
 8000a50:	b570      	push	{r4, r5, r6, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_DIR);
 8000a52:	b2c4      	uxtb	r4, r0
{
 8000a54:	460d      	mov	r5, r1
 8000a56:	4616      	mov	r6, r2
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_DIR);
 8000a58:	2113      	movs	r1, #19
 8000a5a:	4620      	mov	r0, r4
 8000a5c:	f000 fb78 	bl	8001150 <IOE_Read>
  if (Direction != STMPE811_DIRECTION_IN)
 8000a60:	b146      	cbz	r6, 8000a74 <stmpe811_IO_InitPin+0x24>
    tmp |= (uint8_t)IO_Pin;
 8000a62:	ea40 0105 	orr.w	r1, r0, r5
 8000a66:	b2ca      	uxtb	r2, r1
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 8000a68:	4620      	mov	r0, r4
 8000a6a:	2113      	movs	r1, #19
}
 8000a6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_DIR, tmp);   
 8000a70:	f000 bb54 	b.w	800111c <IOE_Write>
    tmp &= ~(uint8_t)IO_Pin;
 8000a74:	ea20 0205 	bic.w	r2, r0, r5
 8000a78:	b2d2      	uxtb	r2, r2
 8000a7a:	e7f5      	b.n	8000a68 <stmpe811_IO_InitPin+0x18>

08000a7c <stmpe811_IO_DisableAF>:
{
 8000a7c:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000a7e:	b2c4      	uxtb	r4, r0
{
 8000a80:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000a82:	4620      	mov	r0, r4
 8000a84:	2117      	movs	r1, #23
 8000a86:	f000 fb63 	bl	8001150 <IOE_Read>
  tmp |= (uint8_t)IO_Pin;
 8000a8a:	4328      	orrs	r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp);
 8000a8c:	b2c2      	uxtb	r2, r0
 8000a8e:	2117      	movs	r1, #23
 8000a90:	4620      	mov	r0, r4
}
 8000a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp);
 8000a96:	f000 bb41 	b.w	800111c <IOE_Write>

08000a9a <stmpe811_IO_Start>:
{
 8000a9a:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000a9c:	b2c6      	uxtb	r6, r0
{
 8000a9e:	4604      	mov	r4, r0
 8000aa0:	460d      	mov	r5, r1
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000aa2:	4630      	mov	r0, r6
 8000aa4:	2104      	movs	r1, #4
 8000aa6:	f000 fb53 	bl	8001150 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000aaa:	2104      	movs	r1, #4
 8000aac:	f000 02fa 	and.w	r2, r0, #250	; 0xfa
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	f000 fb33 	bl	800111c <IOE_Write>
  stmpe811_IO_DisableAF(DeviceAddr, (uint8_t)IO_Pin);
 8000ab6:	b2e9      	uxtb	r1, r5
 8000ab8:	4620      	mov	r0, r4
}
 8000aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  stmpe811_IO_DisableAF(DeviceAddr, (uint8_t)IO_Pin);
 8000abe:	f7ff bfdd 	b.w	8000a7c <stmpe811_IO_DisableAF>

08000ac2 <stmpe811_IO_EnableAF>:
{
 8000ac2:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000ac4:	b2c4      	uxtb	r4, r0
{
 8000ac6:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8000ac8:	4620      	mov	r0, r4
 8000aca:	2117      	movs	r1, #23
 8000acc:	f000 fb40 	bl	8001150 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 8000ad0:	ea20 0005 	bic.w	r0, r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8000ad4:	b2c2      	uxtb	r2, r0
 8000ad6:	2117      	movs	r1, #23
 8000ad8:	4620      	mov	r0, r4
}
 8000ada:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8000ade:	f000 bb1d 	b.w	800111c <IOE_Write>

08000ae2 <stmpe811_TS_Start>:
{
 8000ae2:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000ae4:	b2c4      	uxtb	r4, r0
{
 8000ae6:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000ae8:	2104      	movs	r1, #4
 8000aea:	4620      	mov	r0, r4
 8000aec:	f000 fb30 	bl	8001150 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000af0:	2104      	movs	r1, #4
 8000af2:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 8000af6:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000af8:	4620      	mov	r0, r4
 8000afa:	f000 fb0f 	bl	800111c <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 8000afe:	4630      	mov	r0, r6
 8000b00:	21f0      	movs	r1, #240	; 0xf0
 8000b02:	f7ff ffde 	bl	8000ac2 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 8000b06:	f005 02f8 	and.w	r2, r5, #248	; 0xf8
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	f000 fb05 	bl	800111c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 8000b12:	2249      	movs	r2, #73	; 0x49
 8000b14:	2120      	movs	r1, #32
 8000b16:	4620      	mov	r0, r4
 8000b18:	f000 fb00 	bl	800111c <IOE_Write>
  IOE_Delay(2); 
 8000b1c:	2002      	movs	r0, #2
 8000b1e:	f000 fb4d 	bl	80011bc <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 8000b22:	4620      	mov	r0, r4
 8000b24:	2201      	movs	r2, #1
 8000b26:	2121      	movs	r1, #33	; 0x21
 8000b28:	f000 faf8 	bl	800111c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 8000b2c:	4620      	mov	r0, r4
 8000b2e:	229a      	movs	r2, #154	; 0x9a
 8000b30:	2141      	movs	r1, #65	; 0x41
 8000b32:	f000 faf3 	bl	800111c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 8000b36:	4620      	mov	r0, r4
 8000b38:	2201      	movs	r2, #1
 8000b3a:	214a      	movs	r1, #74	; 0x4a
 8000b3c:	f000 faee 	bl	800111c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8000b40:	4620      	mov	r0, r4
 8000b42:	2201      	movs	r2, #1
 8000b44:	214b      	movs	r1, #75	; 0x4b
 8000b46:	f000 fae9 	bl	800111c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	214b      	movs	r1, #75	; 0x4b
 8000b50:	f000 fae4 	bl	800111c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8000b54:	4620      	mov	r0, r4
 8000b56:	2201      	movs	r2, #1
 8000b58:	2156      	movs	r1, #86	; 0x56
 8000b5a:	f000 fadf 	bl	800111c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 8000b5e:	4620      	mov	r0, r4
 8000b60:	2201      	movs	r2, #1
 8000b62:	2158      	movs	r1, #88	; 0x58
 8000b64:	f000 fada 	bl	800111c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8000b68:	4620      	mov	r0, r4
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	2140      	movs	r1, #64	; 0x40
 8000b6e:	f000 fad5 	bl	800111c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8000b72:	4620      	mov	r0, r4
 8000b74:	22ff      	movs	r2, #255	; 0xff
 8000b76:	210b      	movs	r1, #11
 8000b78:	f000 fad0 	bl	800111c <IOE_Write>
}
 8000b7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 8000b80:	2002      	movs	r0, #2
 8000b82:	f000 bb1b 	b.w	80011bc <IOE_Delay>

08000b86 <stmpe811_IO_SetEdgeMode>:
{
 8000b86:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000b8a:	b2c7      	uxtb	r7, r0
{
 8000b8c:	4688      	mov	r8, r1
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000b8e:	4638      	mov	r0, r7
 8000b90:	2116      	movs	r1, #22
{
 8000b92:	4691      	mov	r9, r2
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000b94:	f000 fadc 	bl	8001150 <IOE_Read>
  tmp1 &= ~(uint8_t)IO_Pin;
 8000b98:	ea6f 0508 	mvn.w	r5, r8
  tmp1 = IOE_Read(DeviceAddr, STMPE811_REG_IO_FE);
 8000b9c:	4606      	mov	r6, r0
  tmp2 = IOE_Read(DeviceAddr, STMPE811_REG_IO_RE);
 8000b9e:	2115      	movs	r1, #21
 8000ba0:	4638      	mov	r0, r7
 8000ba2:	f000 fad5 	bl	8001150 <IOE_Read>
  tmp1 &= ~(uint8_t)IO_Pin;
 8000ba6:	b26b      	sxtb	r3, r5
 8000ba8:	401e      	ands	r6, r3
 8000baa:	b2f2      	uxtb	r2, r6
  if (Edge & STMPE811_EDGE_FALLING)
 8000bac:	f019 0f01 	tst.w	r9, #1
    tmp1 |= (uint8_t)IO_Pin;
 8000bb0:	bf18      	it	ne
 8000bb2:	ea42 0208 	orrne.w	r2, r2, r8
  tmp2 &= ~(uint8_t)IO_Pin;
 8000bb6:	ea00 0003 	and.w	r0, r0, r3
 8000bba:	b2c4      	uxtb	r4, r0
    tmp1 |= (uint8_t)IO_Pin;
 8000bbc:	bf18      	it	ne
 8000bbe:	b2d2      	uxtbne	r2, r2
  if (Edge & STMPE811_EDGE_RISING)
 8000bc0:	f019 0f02 	tst.w	r9, #2
    tmp2 |= (uint8_t)IO_Pin;
 8000bc4:	bf1c      	itt	ne
 8000bc6:	ea44 0408 	orrne.w	r4, r4, r8
 8000bca:	b2e4      	uxtbne	r4, r4
  IOE_Write(DeviceAddr, STMPE811_REG_IO_FE, tmp1);
 8000bcc:	4638      	mov	r0, r7
 8000bce:	2116      	movs	r1, #22
 8000bd0:	f000 faa4 	bl	800111c <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, tmp2);
 8000bd4:	4622      	mov	r2, r4
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	2115      	movs	r1, #21
}
 8000bda:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_RE, tmp2);
 8000bde:	f000 ba9d 	b.w	800111c <IOE_Write>

08000be2 <stmpe811_IO_EnablePinIT>:
{
 8000be2:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_EN);
 8000be4:	b2c4      	uxtb	r4, r0
{
 8000be6:	460d      	mov	r5, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_INT_EN);
 8000be8:	4620      	mov	r0, r4
 8000bea:	210c      	movs	r1, #12
 8000bec:	f000 fab0 	bl	8001150 <IOE_Read>
  tmp |= (uint8_t)IO_Pin;
 8000bf0:	4328      	orrs	r0, r5
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_EN, tmp);  
 8000bf2:	b2c2      	uxtb	r2, r0
 8000bf4:	210c      	movs	r1, #12
 8000bf6:	4620      	mov	r0, r4
}
 8000bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_INT_EN, tmp);  
 8000bfc:	f000 ba8e 	b.w	800111c <IOE_Write>

08000c00 <stmpe811_IO_Config>:
{
 8000c00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000c02:	460c      	mov	r4, r1
 8000c04:	4615      	mov	r5, r2
  switch(IO_Mode)
 8000c06:	2a05      	cmp	r2, #5
 8000c08:	d807      	bhi.n	8000c1a <stmpe811_IO_Config+0x1a>
 8000c0a:	e8df f002 	tbb	[pc, r2]
 8000c0e:	0903      	.short	0x0903
 8000c10:	4b36240e 	.word	0x4b36240e
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f7ff ff1b 	bl	8000a50 <stmpe811_IO_InitPin>
}
 8000c1a:	4628      	mov	r0, r5
 8000c1c:	b003      	add	sp, #12
 8000c1e:	bd30      	pop	{r4, r5, pc}
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_OUT);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f7ff ff15 	bl	8000a50 <stmpe811_IO_InitPin>
  uint8_t error_code = 0;
 8000c26:	2500      	movs	r5, #0
    break;    
 8000c28:	e7f7      	b.n	8000c1a <stmpe811_IO_Config+0x1a>
    stmpe811_IO_EnableIT(DeviceAddr);
 8000c2a:	9001      	str	r0, [sp, #4]
 8000c2c:	f7ff fe7c 	bl	8000928 <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8000c30:	9801      	ldr	r0, [sp, #4]
 8000c32:	4621      	mov	r1, r4
 8000c34:	f7ff ffd5 	bl	8000be2 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8000c38:	2200      	movs	r2, #0
 8000c3a:	9801      	ldr	r0, [sp, #4]
 8000c3c:	4621      	mov	r1, r4
 8000c3e:	f7ff ff07 	bl	8000a50 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);      
 8000c42:	9801      	ldr	r0, [sp, #4]
 8000c44:	2102      	movs	r1, #2
 8000c46:	f7ff fec0 	bl	80009ca <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_RISING); 
 8000c4a:	2202      	movs	r2, #2
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_FALLING); 
 8000c4c:	9801      	ldr	r0, [sp, #4]
 8000c4e:	4621      	mov	r1, r4
 8000c50:	f7ff ff99 	bl	8000b86 <stmpe811_IO_SetEdgeMode>
    break;
 8000c54:	e7e7      	b.n	8000c26 <stmpe811_IO_Config+0x26>
    stmpe811_IO_EnableIT(DeviceAddr);
 8000c56:	9001      	str	r0, [sp, #4]
 8000c58:	f7ff fe66 	bl	8000928 <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8000c5c:	9801      	ldr	r0, [sp, #4]
 8000c5e:	4621      	mov	r1, r4
 8000c60:	f7ff ffbf 	bl	8000be2 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8000c64:	2200      	movs	r2, #0
 8000c66:	9801      	ldr	r0, [sp, #4]
 8000c68:	4621      	mov	r1, r4
 8000c6a:	f7ff fef1 	bl	8000a50 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_EDGE);    
 8000c6e:	9801      	ldr	r0, [sp, #4]
 8000c70:	2102      	movs	r1, #2
 8000c72:	f7ff feaa 	bl	80009ca <stmpe811_SetITType>
    stmpe811_IO_SetEdgeMode(DeviceAddr, IO_Pin, STMPE811_EDGE_FALLING); 
 8000c76:	2201      	movs	r2, #1
 8000c78:	e7e8      	b.n	8000c4c <stmpe811_IO_Config+0x4c>
    stmpe811_IO_EnableIT(DeviceAddr);
 8000c7a:	9001      	str	r0, [sp, #4]
 8000c7c:	f7ff fe54 	bl	8000928 <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8000c80:	9801      	ldr	r0, [sp, #4]
 8000c82:	4621      	mov	r1, r4
 8000c84:	f7ff ffad 	bl	8000be2 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8000c88:	9801      	ldr	r0, [sp, #4]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	4621      	mov	r1, r4
 8000c8e:	f7ff fedf 	bl	8000a50 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 8000c92:	2100      	movs	r1, #0
 8000c94:	9801      	ldr	r0, [sp, #4]
 8000c96:	f7ff fe98 	bl	80009ca <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_LOW);      
 8000c9a:	2100      	movs	r1, #0
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_HIGH);  
 8000c9c:	9801      	ldr	r0, [sp, #4]
 8000c9e:	f7ff fe83 	bl	80009a8 <stmpe811_SetITPolarity>
 8000ca2:	e7c0      	b.n	8000c26 <stmpe811_IO_Config+0x26>
    stmpe811_IO_EnableIT(DeviceAddr);
 8000ca4:	9001      	str	r0, [sp, #4]
 8000ca6:	f7ff fe3f 	bl	8000928 <stmpe811_IO_EnableIT>
    stmpe811_IO_EnablePinIT(DeviceAddr, IO_Pin);
 8000caa:	9801      	ldr	r0, [sp, #4]
 8000cac:	4621      	mov	r1, r4
 8000cae:	f7ff ff98 	bl	8000be2 <stmpe811_IO_EnablePinIT>
    stmpe811_IO_InitPin(DeviceAddr, IO_Pin, STMPE811_DIRECTION_IN); 
 8000cb2:	9801      	ldr	r0, [sp, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4621      	mov	r1, r4
 8000cb8:	f7ff feca 	bl	8000a50 <stmpe811_IO_InitPin>
    stmpe811_SetITType(DeviceAddr, STMPE811_TYPE_LEVEL);
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	9801      	ldr	r0, [sp, #4]
 8000cc0:	f7ff fe83 	bl	80009ca <stmpe811_SetITType>
    stmpe811_SetITPolarity(DeviceAddr, STMPE811_POLARITY_HIGH);  
 8000cc4:	2104      	movs	r1, #4
 8000cc6:	e7e9      	b.n	8000c9c <stmpe811_IO_Config+0x9c>

08000cc8 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8000cc8:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000cca:	4c22      	ldr	r4, [pc, #136]	; (8000d54 <SPIx_Init+0x8c>)
{
 8000ccc:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8000cce:	4620      	mov	r0, r4
 8000cd0:	f003 ff37 	bl	8004b42 <HAL_SPI_GetState>
 8000cd4:	2800      	cmp	r0, #0
 8000cd6:	d13b      	bne.n	8000d50 <SPIx_Init+0x88>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8000cd8:	4b1f      	ldr	r3, [pc, #124]	; (8000d58 <SPIx_Init+0x90>)
 8000cda:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz 
    */  
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cdc:	2318      	movs	r3, #24
 8000cde:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000ce4:	f44f 7300 	mov.w	r3, #512	; 0x200
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8000ce8:	e9c4 0004 	strd	r0, r0, [r4, #16]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8000cec:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8000cee:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000cf2:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8000cf4:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <SPIx_Init+0x94>)
 8000cf6:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8000cf8:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8000cfa:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8000cfc:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8000cfe:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8000d00:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 8000d02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d04:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d08:	645a      	str	r2, [r3, #68]	; 0x44
 8000d0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000d0c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8000d10:	9201      	str	r2, [sp, #4]
 8000d12:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8000d14:	9002      	str	r0, [sp, #8]
 8000d16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d18:	f042 0220 	orr.w	r2, r2, #32
 8000d1c:	631a      	str	r2, [r3, #48]	; 0x30
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	f003 0320 	and.w	r3, r3, #32
 8000d24:	9302      	str	r3, [sp, #8]
 8000d26:	9b02      	ldr	r3, [sp, #8]

  /* configure SPI SCK, MOSI and MISO */    
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8000d28:	f44f 7160 	mov.w	r1, #896	; 0x380
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e9cd 1303 	strd	r1, r3, [sp, #12]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8000d32:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8000d34:	2001      	movs	r0, #1
 8000d36:	2305      	movs	r3, #5
 8000d38:	e9cd 0306 	strd	r0, r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8000d3c:	a903      	add	r1, sp, #12
 8000d3e:	4808      	ldr	r0, [pc, #32]	; (8000d60 <SPIx_Init+0x98>)
 8000d40:	f001 fc0a 	bl	8002558 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 8000d44:	4620      	mov	r0, r4
}
 8000d46:	b008      	add	sp, #32
 8000d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_SPI_Init(&SpiHandle);
 8000d4c:	f003 bb83 	b.w	8004456 <HAL_SPI_Init>
}
 8000d50:	b008      	add	sp, #32
 8000d52:	bd10      	pop	{r4, pc}
 8000d54:	20000180 	.word	0x20000180
 8000d58:	40015000 	.word	0x40015000
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40021400 	.word	0x40021400

08000d64 <SPIx_Write>:
{
 8000d64:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <SPIx_Write+0x28>)
{
 8000d68:	f8ad 0006 	strh.w	r0, [sp, #6]
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4808      	ldr	r0, [pc, #32]	; (8000d90 <SPIx_Write+0x2c>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	f10d 0106 	add.w	r1, sp, #6
 8000d76:	f003 fbe6 	bl	8004546 <HAL_SPI_Transmit>
  if(status != HAL_OK)
 8000d7a:	b120      	cbz	r0, 8000d86 <SPIx_Write+0x22>
  HAL_SPI_DeInit(&SpiHandle);
 8000d7c:	4804      	ldr	r0, [pc, #16]	; (8000d90 <SPIx_Write+0x2c>)
 8000d7e:	f003 fbcc 	bl	800451a <HAL_SPI_DeInit>
  SPIx_Init();
 8000d82:	f7ff ffa1 	bl	8000cc8 <SPIx_Init>
}
 8000d86:	b003      	add	sp, #12
 8000d88:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d8c:	2000008c 	.word	0x2000008c
 8000d90:	20000180 	.word	0x20000180

08000d94 <I2Cx_Init>:
{
 8000d94:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000d96:	4e35      	ldr	r6, [pc, #212]	; (8000e6c <I2Cx_Init+0xd8>)
{
 8000d98:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 8000d9a:	f106 0058 	add.w	r0, r6, #88	; 0x58
 8000d9e:	f002 fd25 	bl	80037ec <HAL_I2C_GetState>
 8000da2:	4604      	mov	r4, r0
 8000da4:	2800      	cmp	r0, #0
 8000da6:	d15f      	bne.n	8000e68 <I2Cx_Init+0xd4>
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8000da8:	4a31      	ldr	r2, [pc, #196]	; (8000e70 <I2Cx_Init+0xdc>)
 8000daa:	4b32      	ldr	r3, [pc, #200]	; (8000e74 <I2Cx_Init+0xe0>)
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000dac:	4d32      	ldr	r5, [pc, #200]	; (8000e78 <I2Cx_Init+0xe4>)
 8000dae:	9000      	str	r0, [sp, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 8000db0:	e9c6 2316 	strd	r2, r3, [r6, #88]	; 0x58
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8000db4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    I2cHandle.Init.OwnAddress1      = 0;
 8000db8:	e9c6 0018 	strd	r0, r0, [r6, #96]	; 0x60
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8000dbc:	e9c6 301a 	strd	r3, r0, [r6, #104]	; 0x68
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8000dc0:	e9c6 001c 	strd	r0, r0, [r6, #112]	; 0x70
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8000dc4:	67b0      	str	r0, [r6, #120]	; 0x78
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8000dc6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000dc8:	f043 0304 	orr.w	r3, r3, #4
 8000dcc:	632b      	str	r3, [r5, #48]	; 0x30
 8000dce:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	9300      	str	r3, [sp, #0]
 8000dd6:	9b00      	ldr	r3, [sp, #0]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000dd8:	9001      	str	r0, [sp, #4]
 8000dda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	632b      	str	r3, [r5, #48]	; 0x30
 8000de2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8000de4:	9005      	str	r0, [sp, #20]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	2312      	movs	r3, #18
 8000df4:	e9cd 1303 	strd	r1, r3, [sp, #12]
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8000df8:	2002      	movs	r0, #2
 8000dfa:	2304      	movs	r3, #4
 8000dfc:	e9cd 0306 	strd	r0, r3, [sp, #24]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8000e00:	a903      	add	r1, sp, #12
 8000e02:	481e      	ldr	r0, [pc, #120]	; (8000e7c <I2Cx_Init+0xe8>)
 8000e04:	f001 fba8 	bl	8002558 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8000e08:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e0c:	a903      	add	r1, sp, #12
 8000e0e:	481c      	ldr	r0, [pc, #112]	; (8000e80 <I2Cx_Init+0xec>)
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8000e10:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8000e12:	f001 fba1 	bl	8002558 <HAL_GPIO_Init>
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8000e16:	9402      	str	r4, [sp, #8]
 8000e18:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000e1a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e1e:	642b      	str	r3, [r5, #64]	; 0x40
 8000e20:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000e22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e26:	9302      	str	r3, [sp, #8]
 8000e28:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_I2Cx_FORCE_RESET();
 8000e2a:	6a2b      	ldr	r3, [r5, #32]
 8000e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e30:	622b      	str	r3, [r5, #32]
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8000e32:	6a2b      	ldr	r3, [r5, #32]
 8000e34:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000e38:	622b      	str	r3, [r5, #32]
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8000e3a:	4622      	mov	r2, r4
 8000e3c:	210f      	movs	r1, #15
 8000e3e:	2048      	movs	r0, #72	; 0x48
 8000e40:	f001 f928 	bl	8002094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8000e44:	2048      	movs	r0, #72	; 0x48
 8000e46:	f001 f957 	bl	80020f8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8000e4a:	4622      	mov	r2, r4
 8000e4c:	210f      	movs	r1, #15
 8000e4e:	2049      	movs	r0, #73	; 0x49
 8000e50:	f001 f920 	bl	8002094 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8000e54:	2049      	movs	r0, #73	; 0x49
 8000e56:	f001 f94f 	bl	80020f8 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 8000e5a:	f106 0058 	add.w	r0, r6, #88	; 0x58
}
 8000e5e:	b008      	add	sp, #32
 8000e60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_I2C_Init(&I2cHandle);
 8000e64:	f002 ba68 	b.w	8003338 <HAL_I2C_Init>
}
 8000e68:	b008      	add	sp, #32
 8000e6a:	bd70      	pop	{r4, r5, r6, pc}
 8000e6c:	20000180 	.word	0x20000180
 8000e70:	40005c00 	.word	0x40005c00
 8000e74:	000186a0 	.word	0x000186a0
 8000e78:	40023800 	.word	0x40023800
 8000e7c:	40020000 	.word	0x40020000
 8000e80:	40020800 	.word	0x40020800

08000e84 <I2Cx_Error>:
{
 8000e84:	b508      	push	{r3, lr}
  HAL_I2C_DeInit(&I2cHandle);
 8000e86:	4803      	ldr	r0, [pc, #12]	; (8000e94 <I2Cx_Error+0x10>)
 8000e88:	f002 faff 	bl	800348a <HAL_I2C_DeInit>
}
 8000e8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2Cx_Init();
 8000e90:	f7ff bf80 	b.w	8000d94 <I2Cx_Init>
 8000e94:	200001d8 	.word	0x200001d8

08000e98 <BSP_LED_Init>:
{
 8000e98:	b530      	push	{r4, r5, lr}
 8000e9a:	b089      	sub	sp, #36	; 0x24
  LEDx_GPIO_CLK_ENABLE(Led);
 8000e9c:	bb08      	cbnz	r0, 8000ee2 <BSP_LED_Init+0x4a>
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <BSP_LED_Init+0x68>)
 8000ea0:	9001      	str	r0, [sp, #4]
 8000ea2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ea4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ea8:	631a      	str	r2, [r3, #48]	; 0x30
 8000eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000eb0:	9301      	str	r3, [sp, #4]
 8000eb2:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000eb4:	4c13      	ldr	r4, [pc, #76]	; (8000f04 <BSP_LED_Init+0x6c>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000eb6:	4b14      	ldr	r3, [pc, #80]	; (8000f08 <BSP_LED_Init+0x70>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000eb8:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000ebc:	f833 5010 	ldrh.w	r5, [r3, r0, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000ec0:	6860      	ldr	r0, [r4, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000ec2:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec4:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ec6:	e9cd 3304 	strd	r3, r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000eca:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000ed0:	f001 fb42 	bl	8002558 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000ed4:	6860      	ldr	r0, [r4, #4]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	4629      	mov	r1, r5
 8000eda:	f001 fc23 	bl	8002724 <HAL_GPIO_WritePin>
}
 8000ede:	b009      	add	sp, #36	; 0x24
 8000ee0:	bd30      	pop	{r4, r5, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8000ee2:	2801      	cmp	r0, #1
 8000ee4:	d1e6      	bne.n	8000eb4 <BSP_LED_Init+0x1c>
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	9302      	str	r3, [sp, #8]
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <BSP_LED_Init+0x68>)
 8000eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000eee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000efa:	9302      	str	r3, [sp, #8]
 8000efc:	9b02      	ldr	r3, [sp, #8]
 8000efe:	e7d9      	b.n	8000eb4 <BSP_LED_Init+0x1c>
 8000f00:	40023800 	.word	0x40023800
 8000f04:	2000008c 	.word	0x2000008c
 8000f08:	08008dc4 	.word	0x08008dc4

08000f0c <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000f0c:	4b04      	ldr	r3, [pc, #16]	; (8000f20 <BSP_LED_On+0x14>)
 8000f0e:	4905      	ldr	r1, [pc, #20]	; (8000f24 <BSP_LED_On+0x18>)
 8000f10:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8000f14:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8000f18:	6858      	ldr	r0, [r3, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f001 bc02 	b.w	8002724 <HAL_GPIO_WritePin>
 8000f20:	2000008c 	.word	0x2000008c
 8000f24:	08008dc4 	.word	0x08008dc4

08000f28 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8000f2a:	4b2a      	ldr	r3, [pc, #168]	; (8000fd4 <LCD_IO_Init+0xac>)
 8000f2c:	f893 50ac 	ldrb.w	r5, [r3, #172]	; 0xac
{
 8000f30:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 8000f32:	2d00      	cmp	r5, #0
 8000f34:	d14b      	bne.n	8000fce <LCD_IO_Init+0xa6>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8000f36:	4c28      	ldr	r4, [pc, #160]	; (8000fd8 <LCD_IO_Init+0xb0>)
 8000f38:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 8000f3a:	2601      	movs	r6, #1
 8000f3c:	f883 60ac 	strb.w	r6, [r3, #172]	; 0xac
    LCD_WRX_GPIO_CLK_ENABLE();
 8000f40:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000f42:	4826      	ldr	r0, [pc, #152]	; (8000fdc <LCD_IO_Init+0xb4>)
    LCD_WRX_GPIO_CLK_ENABLE();
 8000f44:	f043 0308 	orr.w	r3, r3, #8
 8000f48:	6323      	str	r3, [r4, #48]	; 0x30
 8000f4a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8000f4c:	9505      	str	r5, [sp, #20]
    LCD_WRX_GPIO_CLK_ENABLE();
 8000f4e:	f003 0308 	and.w	r3, r3, #8
 8000f52:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000f54:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 8000f56:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000f58:	9706      	str	r7, [sp, #24]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8000f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000f5e:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000f60:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8000f64:	f001 faf8 	bl	8002558 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8000f68:	9501      	str	r5, [sp, #4]
 8000f6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000f6c:	481b      	ldr	r0, [pc, #108]	; (8000fdc <LCD_IO_Init+0xb4>)
    LCD_RDX_GPIO_CLK_ENABLE();
 8000f6e:	f043 0308 	orr.w	r3, r3, #8
 8000f72:	6323      	str	r3, [r4, #48]	; 0x30
 8000f74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f76:	f003 0308 	and.w	r3, r3, #8
 8000f7a:	9301      	str	r3, [sp, #4]
 8000f7c:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000f7e:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8000f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000f84:	e9cd 3603 	strd	r3, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000f88:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8000f8c:	f001 fae4 	bl	8002558 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8000f90:	9502      	str	r5, [sp, #8]
 8000f92:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000f94:	4812      	ldr	r0, [pc, #72]	; (8000fe0 <LCD_IO_Init+0xb8>)
    LCD_NCS_GPIO_CLK_ENABLE();
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6323      	str	r3, [r4, #48]	; 0x30
 8000f9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f9e:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8000fa2:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 8000fa4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000fa6:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 8000fa8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8000faa:	e9cd 4603 	strd	r4, r6, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8000fae:	e9cd 5705 	strd	r5, r7, [sp, #20]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8000fb2:	f001 fad1 	bl	8002558 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8000fb6:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <LCD_IO_Init+0xb8>)
 8000fb8:	462a      	mov	r2, r5
 8000fba:	4621      	mov	r1, r4
 8000fbc:	f001 fbb2 	bl	8002724 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8000fc0:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <LCD_IO_Init+0xb8>)
 8000fc2:	4632      	mov	r2, r6
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	f001 fbad 	bl	8002724 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8000fca:	f7ff fe7d 	bl	8000cc8 <SPIx_Init>
  }
}
 8000fce:	b009      	add	sp, #36	; 0x24
 8000fd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000180 	.word	0x20000180
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40020c00 	.word	0x40020c00
 8000fe0:	40020800 	.word	0x40020800

08000fe4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8000fe4:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8000fe6:	4d0b      	ldr	r5, [pc, #44]	; (8001014 <LCD_IO_WriteData+0x30>)
{
 8000fe8:	4604      	mov	r4, r0
  LCD_WRX_HIGH();
 8000fea:	2201      	movs	r2, #1
 8000fec:	480a      	ldr	r0, [pc, #40]	; (8001018 <LCD_IO_WriteData+0x34>)
 8000fee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ff2:	f001 fb97 	bl	8002724 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2104      	movs	r1, #4
 8000ffa:	4628      	mov	r0, r5
 8000ffc:	f001 fb92 	bl	8002724 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001000:	4620      	mov	r0, r4
 8001002:	f7ff feaf 	bl	8000d64 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001006:	4628      	mov	r0, r5
 8001008:	2201      	movs	r2, #1
}
 800100a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 800100e:	2104      	movs	r1, #4
 8001010:	f001 bb88 	b.w	8002724 <HAL_GPIO_WritePin>
 8001014:	40020800 	.word	0x40020800
 8001018:	40020c00 	.word	0x40020c00

0800101c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800101c:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800101e:	4d0b      	ldr	r5, [pc, #44]	; (800104c <LCD_IO_WriteReg+0x30>)
{
 8001020:	4604      	mov	r4, r0
  LCD_WRX_LOW();
 8001022:	2200      	movs	r2, #0
 8001024:	480a      	ldr	r0, [pc, #40]	; (8001050 <LCD_IO_WriteReg+0x34>)
 8001026:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800102a:	f001 fb7b 	bl	8002724 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 800102e:	2200      	movs	r2, #0
 8001030:	2104      	movs	r1, #4
 8001032:	4628      	mov	r0, r5
 8001034:	f001 fb76 	bl	8002724 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001038:	4620      	mov	r0, r4
 800103a:	f7ff fe93 	bl	8000d64 <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800103e:	4628      	mov	r0, r5
 8001040:	2201      	movs	r2, #1
}
 8001042:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8001046:	2104      	movs	r1, #4
 8001048:	f001 bb6c 	b.w	8002724 <HAL_GPIO_WritePin>
 800104c:	40020800 	.word	0x40020800
 8001050:	40020c00 	.word	0x40020c00

08001054 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8001054:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001056:	4605      	mov	r5, r0
 8001058:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 800105a:	4815      	ldr	r0, [pc, #84]	; (80010b0 <LCD_IO_ReadData+0x5c>)
 800105c:	2200      	movs	r2, #0
 800105e:	2104      	movs	r1, #4
 8001060:	f001 fb60 	bl	8002724 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800106a:	4812      	ldr	r0, [pc, #72]	; (80010b4 <LCD_IO_ReadData+0x60>)
 800106c:	f001 fb5a 	bl	8002724 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8001070:	4628      	mov	r0, r5
 8001072:	f7ff fe77 	bl	8000d64 <SPIx_Write>
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <LCD_IO_ReadData+0x64>)
 8001078:	4810      	ldr	r0, [pc, #64]	; (80010bc <LCD_IO_ReadData+0x68>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4622      	mov	r2, r4
 800107e:	a901      	add	r1, sp, #4
 8001080:	f003 fc72 	bl	8004968 <HAL_SPI_Receive>
  if(status != HAL_OK)
 8001084:	b120      	cbz	r0, 8001090 <LCD_IO_ReadData+0x3c>
  HAL_SPI_DeInit(&SpiHandle);
 8001086:	480d      	ldr	r0, [pc, #52]	; (80010bc <LCD_IO_ReadData+0x68>)
 8001088:	f003 fa47 	bl	800451a <HAL_SPI_DeInit>
  SPIx_Init();
 800108c:	f7ff fe1c 	bl	8000cc8 <SPIx_Init>
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001090:	4808      	ldr	r0, [pc, #32]	; (80010b4 <LCD_IO_ReadData+0x60>)
  return readvalue;
 8001092:	9c01      	ldr	r4, [sp, #4]
  LCD_WRX_HIGH();
 8001094:	2201      	movs	r2, #1
 8001096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109a:	f001 fb43 	bl	8002724 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800109e:	4804      	ldr	r0, [pc, #16]	; (80010b0 <LCD_IO_ReadData+0x5c>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	2104      	movs	r1, #4
 80010a4:	f001 fb3e 	bl	8002724 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 80010a8:	4620      	mov	r0, r4
 80010aa:	b003      	add	sp, #12
 80010ac:	bd30      	pop	{r4, r5, pc}
 80010ae:	bf00      	nop
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	2000008c 	.word	0x2000008c
 80010bc:	20000180 	.word	0x20000180

080010c0 <LCD_Delay>:
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 80010c0:	f000 bfc2 	b.w	8002048 <HAL_Delay>

080010c4 <IOE_Init>:
/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
  I2Cx_Init();
 80010c4:	f7ff be66 	b.w	8000d94 <I2Cx_Init>

080010c8 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 80010c8:	b510      	push	{r4, lr}
 80010ca:	b086      	sub	sp, #24
  STMPE811_INT_CLK_ENABLE();
 80010cc:	2400      	movs	r4, #0
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <IOE_ITConfig+0x4c>)
 80010d0:	9400      	str	r4, [sp, #0]
 80010d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80010d4:	4810      	ldr	r0, [pc, #64]	; (8001118 <IOE_ITConfig+0x50>)
  STMPE811_INT_CLK_ENABLE();
 80010d6:	f042 0201 	orr.w	r2, r2, #1
 80010da:	631a      	str	r2, [r3, #48]	; 0x30
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	9300      	str	r3, [sp, #0]
 80010e4:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 80010e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010ea:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 80010ec:	2301      	movs	r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 80010ee:	e9cd 3403 	strd	r3, r4, [sp, #12]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80010f2:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 80010f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010f8:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 80010fa:	f001 fa2d 	bl	8002558 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 80010fe:	4622      	mov	r2, r4
 8001100:	210f      	movs	r1, #15
 8001102:	2028      	movs	r0, #40	; 0x28
 8001104:	f000 ffc6 	bl	8002094 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8001108:	2028      	movs	r0, #40	; 0x28
 800110a:	f000 fff5 	bl	80020f8 <HAL_NVIC_EnableIRQ>
  I2Cx_ITConfig();
}
 800110e:	b006      	add	sp, #24
 8001110:	bd10      	pop	{r4, pc}
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40020000 	.word	0x40020000

0800111c <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800111c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <IOE_Write+0x2c>)
 8001120:	f88d 2017 	strb.w	r2, [sp, #23]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	f10d 0217 	add.w	r2, sp, #23
 800112c:	2301      	movs	r3, #1
 800112e:	9200      	str	r2, [sp, #0]
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	460a      	mov	r2, r1
 8001134:	4601      	mov	r1, r0
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <IOE_Write+0x30>)
 8001138:	f002 f9c0 	bl	80034bc <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 800113c:	b108      	cbz	r0, 8001142 <IOE_Write+0x26>
    I2Cx_Error();
 800113e:	f7ff fea1 	bl	8000e84 <I2Cx_Error>
  I2Cx_WriteData(Addr, Reg, Value);
}
 8001142:	b007      	add	sp, #28
 8001144:	f85d fb04 	ldr.w	pc, [sp], #4
 8001148:	2000008c 	.word	0x2000008c
 800114c:	200001d8 	.word	0x200001d8

08001150 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8001150:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	f88d 3017 	strb.w	r3, [sp, #23]
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <IOE_Read+0x34>)
 800115a:	691b      	ldr	r3, [r3, #16]
 800115c:	9302      	str	r3, [sp, #8]
{
 800115e:	460a      	mov	r2, r1
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8001160:	2301      	movs	r3, #1
 8001162:	f10d 0117 	add.w	r1, sp, #23
 8001166:	9100      	str	r1, [sp, #0]
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	4601      	mov	r1, r0
 800116c:	4806      	ldr	r0, [pc, #24]	; (8001188 <IOE_Read+0x38>)
 800116e:	f002 fa35 	bl	80035dc <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8001172:	b108      	cbz	r0, 8001178 <IOE_Read+0x28>
    I2Cx_Error();
 8001174:	f7ff fe86 	bl	8000e84 <I2Cx_Error>
  return I2Cx_ReadData(Addr, Reg);
}
 8001178:	f89d 0017 	ldrb.w	r0, [sp, #23]
 800117c:	b007      	add	sp, #28
 800117e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001182:	bf00      	nop
 8001184:	2000008c 	.word	0x2000008c
 8001188:	200001d8 	.word	0x200001d8

0800118c <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 800118c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 800118e:	4c09      	ldr	r4, [pc, #36]	; (80011b4 <IOE_ReadMultiple+0x28>)
 8001190:	6924      	ldr	r4, [r4, #16]
 8001192:	9200      	str	r2, [sp, #0]
 8001194:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001198:	460a      	mov	r2, r1
 800119a:	2301      	movs	r3, #1
 800119c:	4601      	mov	r1, r0
 800119e:	4806      	ldr	r0, [pc, #24]	; (80011b8 <IOE_ReadMultiple+0x2c>)
 80011a0:	f002 fa1c 	bl	80035dc <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 80011a4:	b110      	cbz	r0, 80011ac <IOE_ReadMultiple+0x20>
    I2Cx_Error();
 80011a6:	f7ff fe6d 	bl	8000e84 <I2Cx_Error>
    return 1;
 80011aa:	2001      	movs	r0, #1
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
}
 80011ac:	b280      	uxth	r0, r0
 80011ae:	b004      	add	sp, #16
 80011b0:	bd10      	pop	{r4, pc}
 80011b2:	bf00      	nop
 80011b4:	2000008c 	.word	0x2000008c
 80011b8:	200001d8 	.word	0x200001d8

080011bc <IOE_Delay>:
 80011bc:	f000 bf44 	b.w	8002048 <HAL_Delay>

080011c0 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80011c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80011c4:	4c15      	ldr	r4, [pc, #84]	; (800121c <FillBuffer+0x5c>)
{
 80011c6:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80011ca:	4616      	mov	r6, r2
 80011cc:	461f      	mov	r7, r3
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80011ce:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011d2:	2300      	movs	r3, #0
 80011d4:	e9c4 2301 	strd	r2, r3, [r4, #4]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 80011d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80011da:	60e3      	str	r3, [r4, #12]
{
 80011dc:	4680      	mov	r8, r0
  
  Dma2dHandler.Instance = DMA2D; 
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <FillBuffer+0x60>)
 80011e0:	6023      	str	r3, [r4, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80011e2:	4620      	mov	r0, r4
{
 80011e4:	460d      	mov	r5, r1
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 80011e6:	f001 f8ac 	bl	8002342 <HAL_DMA2D_Init>
 80011ea:	b998      	cbnz	r0, 8001214 <FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 80011ec:	4641      	mov	r1, r8
 80011ee:	4620      	mov	r0, r4
 80011f0:	f001 f96e 	bl	80024d0 <HAL_DMA2D_ConfigLayer>
 80011f4:	b970      	cbnz	r0, 8001214 <FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80011f6:	9700      	str	r7, [sp, #0]
 80011f8:	4633      	mov	r3, r6
 80011fa:	462a      	mov	r2, r5
 80011fc:	4649      	mov	r1, r9
 80011fe:	4620      	mov	r0, r4
 8001200:	f001 f8cb 	bl	800239a <HAL_DMA2D_Start>
 8001204:	b930      	cbnz	r0, 8001214 <FillBuffer+0x54>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001206:	210a      	movs	r1, #10
 8001208:	4620      	mov	r0, r4
      }
    }
  } 
}
 800120a:	b003      	add	sp, #12
 800120c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8001210:	f001 b8dd 	b.w	80023ce <HAL_DMA2D_PollForTransfer>
}
 8001214:	b003      	add	sp, #12
 8001216:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800121a:	bf00      	nop
 800121c:	20000230 	.word	0x20000230
 8001220:	4002b000 	.word	0x4002b000

08001224 <BSP_LCD_GetXSize>:
{
 8001224:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8001226:	4b02      	ldr	r3, [pc, #8]	; (8001230 <BSP_LCD_GetXSize+0xc>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122c:	4798      	blx	r3
}
 800122e:	bd08      	pop	{r3, pc}
 8001230:	20000230 	.word	0x20000230

08001234 <BSP_LCD_GetYSize>:
{
 8001234:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 8001236:	4b02      	ldr	r3, [pc, #8]	; (8001240 <BSP_LCD_GetYSize+0xc>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800123c:	4798      	blx	r3
}
 800123e:	bd08      	pop	{r3, pc}
 8001240:	20000230 	.word	0x20000230

08001244 <BSP_LCD_LayerDefaultInit>:
{     
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	b08e      	sub	sp, #56	; 0x38
  Layercfg.WindowX0 = 0;
 8001248:	2400      	movs	r4, #0
{     
 800124a:	460e      	mov	r6, r1
 800124c:	4605      	mov	r5, r0
  Layercfg.WindowX0 = 0;
 800124e:	9401      	str	r4, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001250:	f7ff ffe8 	bl	8001224 <BSP_LCD_GetXSize>
  Layercfg.WindowY0 = 0;
 8001254:	e9cd 0402 	strd	r0, r4, [sp, #8]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8001258:	f7ff ffec 	bl	8001234 <BSP_LCD_GetYSize>
  Layercfg.Alpha = 255;
 800125c:	23ff      	movs	r3, #255	; 0xff
  Layercfg.Alpha0 = 0;
 800125e:	e9cd 3406 	strd	r3, r4, [sp, #24]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001262:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001266:	2307      	movs	r3, #7
 8001268:	e9cd 2308 	strd	r2, r3, [sp, #32]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800126c:	e9cd 0404 	strd	r0, r4, [sp, #16]
  Layercfg.FBStartAdress = FB_Address;
 8001270:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.Backcolor.Blue = 0;
 8001272:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
  Layercfg.Backcolor.Red = 0;
 8001276:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 800127a:	f7ff ffd3 	bl	8001224 <BSP_LCD_GetXSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800127e:	4c0f      	ldr	r4, [pc, #60]	; (80012bc <BSP_LCD_LayerDefaultInit+0x78>)
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001280:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001282:	f7ff ffd7 	bl	8001234 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8001286:	f104 0644 	add.w	r6, r4, #68	; 0x44
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 800128a:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 800128c:	462a      	mov	r2, r5
 800128e:	a901      	add	r1, sp, #4
 8001290:	4630      	mov	r0, r6
 8001292:	f002 fba1 	bl	80039d8 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001296:	200c      	movs	r0, #12
 8001298:	fb00 4005 	mla	r0, r0, r5, r4
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	f8c0 30f0 	str.w	r3, [r0, #240]	; 0xf0
  DrawProp[LayerIndex].pFont     = &Font24;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <BSP_LCD_LayerDefaultInit+0x7c>)
 80012a6:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80012aa:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80012ae:	f8c0 30ec 	str.w	r3, [r0, #236]	; 0xec
  HAL_LTDC_EnableDither(&LtdcHandler);
 80012b2:	4630      	mov	r0, r6
 80012b4:	f002 fbf2 	bl	8003a9c <HAL_LTDC_EnableDither>
}
 80012b8:	b00e      	add	sp, #56	; 0x38
 80012ba:	bd70      	pop	{r4, r5, r6, pc}
 80012bc:	20000230 	.word	0x20000230
 80012c0:	200000a0 	.word	0x200000a0

080012c4 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 80012c4:	4b01      	ldr	r3, [pc, #4]	; (80012cc <BSP_LCD_SelectLayer+0x8>)
 80012c6:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
}
 80012ca:	4770      	bx	lr
 80012cc:	20000230 	.word	0x20000230

080012d0 <BSP_LCD_SetLayerVisible>:
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <BSP_LCD_SetLayerVisible+0x24>)
 80012d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80012d4:	01c0      	lsls	r0, r0, #7
 80012d6:	f102 0384 	add.w	r3, r2, #132	; 0x84
  if(state == ENABLE)
 80012da:	2901      	cmp	r1, #1
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 80012dc:	58c1      	ldr	r1, [r0, r3]
 80012de:	bf0c      	ite	eq
 80012e0:	f041 0101 	orreq.w	r1, r1, #1
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 80012e4:	f021 0101 	bicne.w	r1, r1, #1
 80012e8:	50c1      	str	r1, [r0, r3]
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 80012ea:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80012ec:	f043 0301 	orr.w	r3, r3, #1
 80012f0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80012f2:	4770      	bx	lr
 80012f4:	20000230 	.word	0x20000230

080012f8 <BSP_LCD_SetColorKeying>:
{  
 80012f8:	b538      	push	{r3, r4, r5, lr}
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 80012fa:	4d06      	ldr	r5, [pc, #24]	; (8001314 <BSP_LCD_SetColorKeying+0x1c>)
{  
 80012fc:	4604      	mov	r4, r0
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 80012fe:	4602      	mov	r2, r0
 8001300:	4628      	mov	r0, r5
 8001302:	f002 fb96 	bl	8003a32 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8001306:	4621      	mov	r1, r4
 8001308:	4628      	mov	r0, r5
}
 800130a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 800130e:	f002 bbad 	b.w	8003a6c <HAL_LTDC_EnableColorKeying>
 8001312:	bf00      	nop
 8001314:	20000274 	.word	0x20000274

08001318 <BSP_LCD_GetTextColor>:
  return DrawProp[ActiveLayer].TextColor;
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <BSP_LCD_GetTextColor+0x14>)
 800131a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800131e:	210c      	movs	r1, #12
 8001320:	fb01 3302 	mla	r3, r1, r2, r3
}
 8001324:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	20000230 	.word	0x20000230

08001330 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <BSP_LCD_SetTextColor+0x14>)
 8001332:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001336:	210c      	movs	r1, #12
 8001338:	fb01 3302 	mla	r3, r1, r2, r3
 800133c:	f8c3 00ec 	str.w	r0, [r3, #236]	; 0xec
}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000230 	.word	0x20000230

08001348 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <BSP_LCD_SetBackColor+0x14>)
 800134a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800134e:	210c      	movs	r1, #12
 8001350:	fb01 3302 	mla	r3, r1, r2, r3
 8001354:	f8c3 00f0 	str.w	r0, [r3, #240]	; 0xf0
}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000230 	.word	0x20000230

08001360 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = pFonts;
 8001360:	4b04      	ldr	r3, [pc, #16]	; (8001374 <BSP_LCD_SetFont+0x14>)
 8001362:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001366:	210c      	movs	r1, #12
 8001368:	fb01 3302 	mla	r3, r1, r2, r3
 800136c:	f8c3 00f4 	str.w	r0, [r3, #244]	; 0xf4
}
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000230 	.word	0x20000230

08001378 <BSP_LCD_Clear>:
{ 
 8001378:	b530      	push	{r4, r5, lr}
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800137a:	4b0d      	ldr	r3, [pc, #52]	; (80013b0 <BSP_LCD_Clear+0x38>)
 800137c:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
 8001380:	2234      	movs	r2, #52	; 0x34
 8001382:	fb02 3305 	mla	r3, r2, r5, r3
{ 
 8001386:	b085      	sub	sp, #20
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001388:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 800138c:	9103      	str	r1, [sp, #12]
{ 
 800138e:	4604      	mov	r4, r0
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8001390:	f7ff ff48 	bl	8001224 <BSP_LCD_GetXSize>
 8001394:	9002      	str	r0, [sp, #8]
 8001396:	f7ff ff4d 	bl	8001234 <BSP_LCD_GetYSize>
 800139a:	4603      	mov	r3, r0
 800139c:	2000      	movs	r0, #0
 800139e:	9000      	str	r0, [sp, #0]
 80013a0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80013a4:	9401      	str	r4, [sp, #4]
 80013a6:	4628      	mov	r0, r5
 80013a8:	f7ff ff0a 	bl	80011c0 <FillBuffer>
}
 80013ac:	b005      	add	sp, #20
 80013ae:	bd30      	pop	{r4, r5, pc}
 80013b0:	20000230 	.word	0x20000230

080013b4 <BSP_LCD_DrawHLine>:
{
 80013b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80013b8:	4c11      	ldr	r4, [pc, #68]	; (8001400 <BSP_LCD_DrawHLine+0x4c>)
{
 80013ba:	9203      	str	r2, [sp, #12]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80013bc:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
{
 80013c0:	460e      	mov	r6, r1
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80013c2:	2134      	movs	r1, #52	; 0x34
 80013c4:	fb01 4303 	mla	r3, r1, r3, r4
{
 80013c8:	4605      	mov	r5, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80013ca:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 80013ce:	f7ff ff29 	bl	8001224 <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80013d2:	f8d4 7104 	ldr.w	r7, [r4, #260]	; 0x104
 80013d6:	9a03      	ldr	r2, [sp, #12]
 80013d8:	230c      	movs	r3, #12
 80013da:	fb03 4407 	mla	r4, r3, r7, r4
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80013de:	fb00 5506 	mla	r5, r0, r6, r5
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80013e2:	f8d4 30ec 	ldr.w	r3, [r4, #236]	; 0xec
 80013e6:	9301      	str	r3, [sp, #4]
 80013e8:	2300      	movs	r3, #0
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	eb08 0185 	add.w	r1, r8, r5, lsl #2
 80013f0:	2301      	movs	r3, #1
 80013f2:	4638      	mov	r0, r7
 80013f4:	f7ff fee4 	bl	80011c0 <FillBuffer>
}
 80013f8:	b004      	add	sp, #16
 80013fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013fe:	bf00      	nop
 8001400:	20000230 	.word	0x20000230

08001404 <BSP_LCD_DrawVLine>:
{
 8001404:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001408:	4c14      	ldr	r4, [pc, #80]	; (800145c <BSP_LCD_DrawVLine+0x58>)
{
 800140a:	b085      	sub	sp, #20
 800140c:	4688      	mov	r8, r1
 800140e:	9203      	str	r2, [sp, #12]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001410:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8001414:	2134      	movs	r1, #52	; 0x34
 8001416:	fb01 4202 	mla	r2, r1, r2, r4
{
 800141a:	4605      	mov	r5, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800141c:	f8d2 70a0 	ldr.w	r7, [r2, #160]	; 0xa0
 8001420:	f7ff ff00 	bl	8001224 <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 8001424:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8001428:	4681      	mov	r9, r0
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800142a:	f7ff fefb 	bl	8001224 <BSP_LCD_GetXSize>
 800142e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8001432:	9b03      	ldr	r3, [sp, #12]
 8001434:	210c      	movs	r1, #12
 8001436:	fb01 4402 	mla	r4, r1, r2, r4
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800143a:	fb09 5508 	mla	r5, r9, r8, r5
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800143e:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 8001442:	9201      	str	r2, [sp, #4]
 8001444:	3801      	subs	r0, #1
 8001446:	9000      	str	r0, [sp, #0]
 8001448:	2201      	movs	r2, #1
 800144a:	eb07 0185 	add.w	r1, r7, r5, lsl #2
 800144e:	4630      	mov	r0, r6
 8001450:	f7ff feb6 	bl	80011c0 <FillBuffer>
}
 8001454:	b005      	add	sp, #20
 8001456:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800145a:	bf00      	nop
 800145c:	20000230 	.word	0x20000230

08001460 <BSP_LCD_DrawRect>:
{
 8001460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001462:	461e      	mov	r6, r3
 8001464:	460d      	mov	r5, r1
 8001466:	4604      	mov	r4, r0
 8001468:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800146a:	f7ff ffa3 	bl	80013b4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 800146e:	19a9      	adds	r1, r5, r6
 8001470:	463a      	mov	r2, r7
 8001472:	4620      	mov	r0, r4
 8001474:	b289      	uxth	r1, r1
 8001476:	f7ff ff9d 	bl	80013b4 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800147a:	4632      	mov	r2, r6
 800147c:	4629      	mov	r1, r5
 800147e:	4620      	mov	r0, r4
 8001480:	f7ff ffc0 	bl	8001404 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001484:	19e0      	adds	r0, r4, r7
 8001486:	4632      	mov	r2, r6
 8001488:	4629      	mov	r1, r5
 800148a:	b280      	uxth	r0, r0
}
 800148c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8001490:	f7ff bfb8 	b.w	8001404 <BSP_LCD_DrawVLine>

08001494 <BSP_LCD_DrawBitmap>:
{
 8001494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 8001498:	7ad3      	ldrb	r3, [r2, #11]
 800149a:	f892 a00a 	ldrb.w	sl, [r2, #10]
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 800149e:	7c97      	ldrb	r7, [r2, #18]
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 80014a0:	7d96      	ldrb	r6, [r2, #22]
  bitpixel = pBmp[28] + (pBmp[29] << 8);   
 80014a2:	f892 901c 	ldrb.w	r9, [r2, #28]
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 80014a6:	4d40      	ldr	r5, [pc, #256]	; (80015a8 <BSP_LCD_DrawBitmap+0x114>)
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 80014a8:	eb0a 2a03 	add.w	sl, sl, r3, lsl #8
 80014ac:	7b13      	ldrb	r3, [r2, #12]
 80014ae:	eb0a 4a03 	add.w	sl, sl, r3, lsl #16
 80014b2:	7b53      	ldrb	r3, [r2, #13]
 80014b4:	eb0a 6a03 	add.w	sl, sl, r3, lsl #24
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 80014b8:	7cd3      	ldrb	r3, [r2, #19]
 80014ba:	eb07 2703 	add.w	r7, r7, r3, lsl #8
 80014be:	7d13      	ldrb	r3, [r2, #20]
 80014c0:	eb07 4703 	add.w	r7, r7, r3, lsl #16
 80014c4:	7d53      	ldrb	r3, [r2, #21]
 80014c6:	eb07 6703 	add.w	r7, r7, r3, lsl #24
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 80014ca:	7dd3      	ldrb	r3, [r2, #23]
 80014cc:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 80014d0:	7e13      	ldrb	r3, [r2, #24]
 80014d2:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 80014d6:	7e53      	ldrb	r3, [r2, #25]
 80014d8:	eb06 6603 	add.w	r6, r6, r3, lsl #24
  bitpixel = pBmp[28] + (pBmp[29] << 8);   
 80014dc:	7f53      	ldrb	r3, [r2, #29]
 80014de:	eb09 2903 	add.w	r9, r9, r3, lsl #8
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 80014e2:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
{
 80014e6:	4614      	mov	r4, r2
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 80014e8:	2234      	movs	r2, #52	; 0x34
 80014ea:	fb02 5303 	mla	r3, r2, r3, r5
{
 80014ee:	b085      	sub	sp, #20
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 80014f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80014f4:	9303      	str	r3, [sp, #12]
{
 80014f6:	4688      	mov	r8, r1
 80014f8:	4683      	mov	fp, r0
  address = LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (((BSP_LCD_GetXSize()*Y) + X)*(4));
 80014fa:	f7ff fe93 	bl	8001224 <BSP_LCD_GetXSize>
 80014fe:	9b03      	ldr	r3, [sp, #12]
 8001500:	fb08 b000 	mla	r0, r8, r0, fp
 8001504:	eb03 0880 	add.w	r8, r3, r0, lsl #2
  if ((bitpixel/8) == 4)
 8001508:	f1a9 0320 	sub.w	r3, r9, #32
 800150c:	2b07      	cmp	r3, #7
 800150e:	d91b      	bls.n	8001548 <BSP_LCD_DrawBitmap+0xb4>
  else if ((bitpixel/8) == 2)
 8001510:	f1a9 0310 	sub.w	r3, r9, #16
    inputcolormode = CM_RGB888;
 8001514:	2b08      	cmp	r3, #8
 8001516:	bf34      	ite	cc
 8001518:	f04f 0b02 	movcc.w	fp, #2
 800151c:	f04f 0b01 	movcs.w	fp, #1
  pBmp += (index + (width * (height - 1) * (bitpixel/8)));
 8001520:	ea4f 09d9 	mov.w	r9, r9, lsr #3
 8001524:	fb07 f909 	mul.w	r9, r7, r9
 8001528:	1e72      	subs	r2, r6, #1
 800152a:	fb09 aa02 	mla	sl, r9, r2, sl
  pBmp -= width*(bitpixel/8);
 800152e:	f1c9 0300 	rsb	r3, r9, #0
  Dma2dHandler.LayerCfg[1].InputOffset = 0;
  
  Dma2dHandler.Instance = DMA2D; 
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001532:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80015a8 <BSP_LCD_DrawBitmap+0x114>
  pBmp -= width*(bitpixel/8);
 8001536:	9303      	str	r3, [sp, #12]
  pBmp += (index + (width * (height - 1) * (bitpixel/8)));
 8001538:	4454      	add	r4, sl
  for(index=0; index < height; index++)
 800153a:	f04f 0a00 	mov.w	sl, #0
 800153e:	45b2      	cmp	sl, r6
 8001540:	d105      	bne.n	800154e <BSP_LCD_DrawBitmap+0xba>
}
 8001542:	b005      	add	sp, #20
 8001544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    inputcolormode = CM_ARGB8888;
 8001548:	f04f 0b00 	mov.w	fp, #0
 800154c:	e7e8      	b.n	8001520 <BSP_LCD_DrawBitmap+0x8c>
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800154e:	2300      	movs	r3, #0
 8001550:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001554:	e9c5 2301 	strd	r2, r3, [r5, #4]
  Dma2dHandler.LayerCfg[1].InputOffset = 0;
 8001558:	e9c5 3b0a 	strd	r3, fp, [r5, #40]	; 0x28
  Dma2dHandler.Init.OutputOffset = 0;     
 800155c:	60eb      	str	r3, [r5, #12]
  Dma2dHandler.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800155e:	632b      	str	r3, [r5, #48]	; 0x30
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8001560:	22ff      	movs	r2, #255	; 0xff
  Dma2dHandler.Instance = DMA2D; 
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <BSP_LCD_DrawBitmap+0x118>)
  Dma2dHandler.LayerCfg[1].InputAlpha = 0xFF;
 8001564:	636a      	str	r2, [r5, #52]	; 0x34
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8001566:	4648      	mov	r0, r9
  Dma2dHandler.Instance = DMA2D; 
 8001568:	602b      	str	r3, [r5, #0]
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 800156a:	f000 feea 	bl	8002342 <HAL_DMA2D_Init>
 800156e:	b988      	cbnz	r0, 8001594 <BSP_LCD_DrawBitmap+0x100>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, 1) == HAL_OK) 
 8001570:	2101      	movs	r1, #1
 8001572:	4648      	mov	r0, r9
 8001574:	f000 ffac 	bl	80024d0 <HAL_DMA2D_ConfigLayer>
 8001578:	b960      	cbnz	r0, 8001594 <BSP_LCD_DrawBitmap+0x100>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800157a:	2301      	movs	r3, #1
 800157c:	9300      	str	r3, [sp, #0]
 800157e:	4642      	mov	r2, r8
 8001580:	463b      	mov	r3, r7
 8001582:	4621      	mov	r1, r4
 8001584:	4648      	mov	r0, r9
 8001586:	f000 ff08 	bl	800239a <HAL_DMA2D_Start>
 800158a:	b918      	cbnz	r0, 8001594 <BSP_LCD_DrawBitmap+0x100>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 800158c:	210a      	movs	r1, #10
 800158e:	4648      	mov	r0, r9
 8001590:	f000 ff1d 	bl	80023ce <HAL_DMA2D_PollForTransfer>
  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 8001594:	f7ff fe46 	bl	8001224 <BSP_LCD_GetXSize>
  pBmp -= width*(bitpixel/8);
 8001598:	9b03      	ldr	r3, [sp, #12]
  address+=  ((BSP_LCD_GetXSize() - width + width)*4);
 800159a:	eb08 0880 	add.w	r8, r8, r0, lsl #2
  pBmp -= width*(bitpixel/8);
 800159e:	441c      	add	r4, r3
  for(index=0; index < height; index++)
 80015a0:	f10a 0a01 	add.w	sl, sl, #1
 80015a4:	e7cb      	b.n	800153e <BSP_LCD_DrawBitmap+0xaa>
 80015a6:	bf00      	nop
 80015a8:	20000230 	.word	0x20000230
 80015ac:	4002b000 	.word	0x4002b000

080015b0 <BSP_LCD_FillRect>:
{
 80015b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80015b4:	4c18      	ldr	r4, [pc, #96]	; (8001618 <BSP_LCD_FillRect+0x68>)
 80015b6:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
 80015ba:	f04f 0a0c 	mov.w	sl, #12
{
 80015be:	4617      	mov	r7, r2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80015c0:	fb0a 4206 	mla	r2, sl, r6, r4
{
 80015c4:	b085      	sub	sp, #20
 80015c6:	4605      	mov	r5, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80015c8:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
{
 80015cc:	9303      	str	r3, [sp, #12]
 80015ce:	4689      	mov	r9, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80015d0:	f7ff feae 	bl	8001330 <BSP_LCD_SetTextColor>
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80015d4:	2234      	movs	r2, #52	; 0x34
 80015d6:	fb02 4606 	mla	r6, r2, r6, r4
 80015da:	f8d6 80a0 	ldr.w	r8, [r6, #160]	; 0xa0
 80015de:	f7ff fe21 	bl	8001224 <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80015e2:	f8d4 6104 	ldr.w	r6, [r4, #260]	; 0x104
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80015e6:	4683      	mov	fp, r0
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80015e8:	f7ff fe1c 	bl	8001224 <BSP_LCD_GetXSize>
 80015ec:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 80015f0:	9b03      	ldr	r3, [sp, #12]
 80015f2:	fb0a 4402 	mla	r4, sl, r2, r4
 80015f6:	1bc0      	subs	r0, r0, r7
 80015f8:	f8d4 20ec 	ldr.w	r2, [r4, #236]	; 0xec
 80015fc:	9201      	str	r2, [sp, #4]
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80015fe:	fb0b 5509 	mla	r5, fp, r9, r5
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001602:	9000      	str	r0, [sp, #0]
 8001604:	463a      	mov	r2, r7
 8001606:	eb08 0185 	add.w	r1, r8, r5, lsl #2
 800160a:	4630      	mov	r0, r6
 800160c:	f7ff fdd8 	bl	80011c0 <FillBuffer>
}
 8001610:	b005      	add	sp, #20
 8001612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001616:	bf00      	nop
 8001618:	20000230 	.word	0x20000230

0800161c <BSP_LCD_DisplayOn>:
  if(LcdDrv->DisplayOn != NULL)
 800161c:	4b02      	ldr	r3, [pc, #8]	; (8001628 <BSP_LCD_DisplayOn+0xc>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	b103      	cbz	r3, 8001626 <BSP_LCD_DisplayOn+0xa>
    LcdDrv->DisplayOn();
 8001624:	4718      	bx	r3
}
 8001626:	4770      	bx	lr
 8001628:	20000230 	.word	0x20000230

0800162c <BSP_LCD_MspInit>:
{
 800162c:	b530      	push	{r4, r5, lr}
 800162e:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001630:	4b49      	ldr	r3, [pc, #292]	; (8001758 <BSP_LCD_MspInit+0x12c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001632:	4d4a      	ldr	r5, [pc, #296]	; (800175c <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001634:	484a      	ldr	r0, [pc, #296]	; (8001760 <BSP_LCD_MspInit+0x134>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001636:	4c4b      	ldr	r4, [pc, #300]	; (8001764 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 8001638:	2200      	movs	r2, #0
 800163a:	9201      	str	r2, [sp, #4]
 800163c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800163e:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8001642:	6459      	str	r1, [r3, #68]	; 0x44
 8001644:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001646:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 800164a:	9101      	str	r1, [sp, #4]
 800164c:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 800164e:	9202      	str	r2, [sp, #8]
 8001650:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001652:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8001656:	6319      	str	r1, [r3, #48]	; 0x30
 8001658:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800165a:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800165e:	9102      	str	r1, [sp, #8]
 8001660:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	9203      	str	r2, [sp, #12]
 8001664:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001666:	f041 0101 	orr.w	r1, r1, #1
 800166a:	6319      	str	r1, [r3, #48]	; 0x30
 800166c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800166e:	f001 0101 	and.w	r1, r1, #1
 8001672:	9103      	str	r1, [sp, #12]
 8001674:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	9204      	str	r2, [sp, #16]
 8001678:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800167a:	f041 0102 	orr.w	r1, r1, #2
 800167e:	6319      	str	r1, [r3, #48]	; 0x30
 8001680:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001682:	f001 0102 	and.w	r1, r1, #2
 8001686:	9104      	str	r1, [sp, #16]
 8001688:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168a:	9205      	str	r2, [sp, #20]
 800168c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800168e:	f041 0104 	orr.w	r1, r1, #4
 8001692:	6319      	str	r1, [r3, #48]	; 0x30
 8001694:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001696:	f001 0104 	and.w	r1, r1, #4
 800169a:	9105      	str	r1, [sp, #20]
 800169c:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800169e:	9206      	str	r2, [sp, #24]
 80016a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016a2:	f041 0108 	orr.w	r1, r1, #8
 80016a6:	6319      	str	r1, [r3, #48]	; 0x30
 80016a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016aa:	f001 0108 	and.w	r1, r1, #8
 80016ae:	9106      	str	r1, [sp, #24]
 80016b0:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b2:	9207      	str	r2, [sp, #28]
 80016b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016b6:	f041 0120 	orr.w	r1, r1, #32
 80016ba:	6319      	str	r1, [r3, #48]	; 0x30
 80016bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016be:	f001 0120 	and.w	r1, r1, #32
 80016c2:	9107      	str	r1, [sp, #28]
 80016c4:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016c6:	9208      	str	r2, [sp, #32]
 80016c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ca:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80016ce:	6319      	str	r1, [r3, #48]	; 0x30
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016d6:	9308      	str	r3, [sp, #32]
 80016d8:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80016da:	f641 0158 	movw	r1, #6232	; 0x1858
 80016de:	2302      	movs	r3, #2
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80016e0:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80016e4:	e9cd 1309 	strd	r1, r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80016e8:	230e      	movs	r3, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80016ea:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 80016ec:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80016ee:	f000 ff33 	bl	8002558 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80016f2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80016f6:	a909      	add	r1, sp, #36	; 0x24
 80016f8:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 80016fa:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80016fc:	f000 ff2c 	bl	8002558 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001700:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001704:	a909      	add	r1, sp, #36	; 0x24
 8001706:	4818      	ldr	r0, [pc, #96]	; (8001768 <BSP_LCD_MspInit+0x13c>)
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001708:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800170a:	f000 ff25 	bl	8002558 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800170e:	2348      	movs	r3, #72	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001710:	a909      	add	r1, sp, #36	; 0x24
 8001712:	4816      	ldr	r0, [pc, #88]	; (800176c <BSP_LCD_MspInit+0x140>)
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001714:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001716:	f000 ff1f 	bl	8002558 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800171a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800171e:	a909      	add	r1, sp, #36	; 0x24
 8001720:	4813      	ldr	r0, [pc, #76]	; (8001770 <BSP_LCD_MspInit+0x144>)
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001722:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 8001724:	f000 ff18 	bl	8002558 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001728:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800172c:	a909      	add	r1, sp, #36	; 0x24
 800172e:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8001730:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001732:	f000 ff11 	bl	8002558 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001736:	2303      	movs	r3, #3
 8001738:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800173a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 800173c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800173e:	4628      	mov	r0, r5
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8001740:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001742:	f000 ff09 	bl	8002558 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001746:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800174a:	a909      	add	r1, sp, #36	; 0x24
 800174c:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 800174e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001750:	f000 ff02 	bl	8002558 <HAL_GPIO_Init>
}
 8001754:	b00f      	add	sp, #60	; 0x3c
 8001756:	bd30      	pop	{r4, r5, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	40020400 	.word	0x40020400
 8001760:	40020000 	.word	0x40020000
 8001764:	40021800 	.word	0x40021800
 8001768:	40020800 	.word	0x40020800
 800176c:	40020c00 	.word	0x40020c00
 8001770:	40021400 	.word	0x40021400

08001774 <BSP_LCD_Init>:
{ 
 8001774:	b538      	push	{r3, r4, r5, lr}
    LtdcHandler.Instance = LTDC;
 8001776:	4c21      	ldr	r4, [pc, #132]	; (80017fc <BSP_LCD_Init+0x88>)
 8001778:	4b21      	ldr	r3, [pc, #132]	; (8001800 <BSP_LCD_Init+0x8c>)
 800177a:	6463      	str	r3, [r4, #68]	; 0x44
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800177c:	2109      	movs	r1, #9
 800177e:	2301      	movs	r3, #1
 8001780:	e9c4 1316 	strd	r1, r3, [r4, #88]	; 0x58
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001784:	201d      	movs	r0, #29
 8001786:	2303      	movs	r3, #3
 8001788:	e9c4 0318 	strd	r0, r3, [r4, #96]	; 0x60
    LtdcHandler.Init.AccumulatedActiveH = 323;
 800178c:	f240 150d 	movw	r5, #269	; 0x10d
 8001790:	f240 1343 	movw	r3, #323	; 0x143
    LtdcHandler.Init.TotalHeigh = 327;
 8001794:	f240 1c17 	movw	ip, #279	; 0x117
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8001798:	e9c4 531a 	strd	r5, r3, [r4, #104]	; 0x68
    LtdcHandler.Init.TotalHeigh = 327;
 800179c:	f240 1347 	movw	r3, #327	; 0x147
 80017a0:	e9c4 c31c 	strd	ip, r3, [r4, #112]	; 0x70
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80017a4:	2308      	movs	r3, #8
 80017a6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80017aa:	23c0      	movs	r3, #192	; 0xc0
 80017ac:	f8c4 3118 	str.w	r3, [r4, #280]	; 0x118
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80017b0:	2304      	movs	r3, #4
    LtdcHandler.Init.Backcolor.Blue= 0;
 80017b2:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80017b4:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80017b8:	f504 7084 	add.w	r0, r4, #264	; 0x108
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80017bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c0:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
    LtdcHandler.Init.Backcolor.Blue= 0;
 80017c4:	f8a4 5078 	strh.w	r5, [r4, #120]	; 0x78
    LtdcHandler.Init.Backcolor.Red= 0;
 80017c8:	f884 507a 	strb.w	r5, [r4, #122]	; 0x7a
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 80017cc:	f002 fc08 	bl	8003fe0 <HAL_RCCEx_PeriphCLKConfig>
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80017d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80017d4:	e9c4 5514 	strd	r5, r5, [r4, #80]	; 0x50
    BSP_LCD_MspInit();
 80017d8:	f7ff ff28 	bl	800162c <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 80017dc:	f104 0044 	add.w	r0, r4, #68	; 0x44
 80017e0:	f002 f88e 	bl	8003900 <HAL_LTDC_Init>
    LcdDrv = &ili9341_drv;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <BSP_LCD_Init+0x90>)
 80017e6:	6423      	str	r3, [r4, #64]	; 0x40
    LcdDrv->Init();
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4798      	blx	r3
    BSP_SDRAM_Init();
 80017ec:	f000 fb04 	bl	8001df8 <BSP_SDRAM_Init>
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <BSP_LCD_Init+0x94>)
 80017f2:	f7ff fdb5 	bl	8001360 <BSP_LCD_SetFont>
}  
 80017f6:	4628      	mov	r0, r5
 80017f8:	bd38      	pop	{r3, r4, r5, pc}
 80017fa:	bf00      	nop
 80017fc:	20000230 	.word	0x20000230
 8001800:	40016800 	.word	0x40016800
 8001804:	20000000 	.word	0x20000000
 8001808:	200000a0 	.word	0x200000a0

0800180c <BSP_LCD_DrawPixel>:
{
 800180c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <BSP_LCD_DrawPixel+0x28>)
{
 8001810:	4615      	mov	r5, r2
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001812:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
{
 8001816:	460e      	mov	r6, r1
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001818:	2134      	movs	r1, #52	; 0x34
 800181a:	fb01 3302 	mla	r3, r1, r2, r3
{
 800181e:	4604      	mov	r4, r0
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8001820:	f8d3 70a0 	ldr.w	r7, [r3, #160]	; 0xa0
 8001824:	f7ff fcfe 	bl	8001224 <BSP_LCD_GetXSize>
 8001828:	fb00 4006 	mla	r0, r0, r6, r4
 800182c:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
}
 8001830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001832:	bf00      	nop
 8001834:	20000230 	.word	0x20000230

08001838 <BSP_LCD_DisplayChar>:
{
 8001838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800183c:	4f31      	ldr	r7, [pc, #196]	; (8001904 <BSP_LCD_DisplayChar+0xcc>)
{
 800183e:	b087      	sub	sp, #28
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
{
 8001844:	e9cd 0101 	strd	r0, r1, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8001848:	210c      	movs	r1, #12
 800184a:	fb01 7303 	mla	r3, r1, r3, r7
 800184e:	3a20      	subs	r2, #32
 8001850:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001854:	f8b1 b004 	ldrh.w	fp, [r1, #4]
 8001858:	f8b1 a006 	ldrh.w	sl, [r1, #6]
 800185c:	680d      	ldr	r5, [r1, #0]
 800185e:	f10b 0607 	add.w	r6, fp, #7
 8001862:	10f6      	asrs	r6, r6, #3
  offset = 8 *((width + 7)/8) -  width ;
 8001864:	ebcb 00c6 	rsb	r0, fp, r6, lsl #3
 8001868:	b2c3      	uxtb	r3, r0
 800186a:	9300      	str	r3, [sp, #0]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 800186c:	fb0a f202 	mul.w	r2, sl, r2
      if(line & (1 << (width- j + offset- 1))) 
 8001870:	f10b 33ff 	add.w	r3, fp, #4294967295
 8001874:	fb06 5502 	mla	r5, r6, r2, r5
  for(i = 0; i < height; i++)
 8001878:	f04f 0900 	mov.w	r9, #0
      if(line & (1 << (width- j + offset- 1))) 
 800187c:	9304      	str	r3, [sp, #16]
 800187e:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8001880:	45d1      	cmp	r9, sl
 8001882:	eb03 0109 	add.w	r1, r3, r9
 8001886:	b289      	uxth	r1, r1
 8001888:	d302      	bcc.n	8001890 <BSP_LCD_DisplayChar+0x58>
}
 800188a:	b007      	add	sp, #28
 800188c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8001890:	2e01      	cmp	r6, #1
      line =  pchar[0];      
 8001892:	782c      	ldrb	r4, [r5, #0]
    switch(((width + 7)/8))
 8001894:	d004      	beq.n	80018a0 <BSP_LCD_DisplayChar+0x68>
 8001896:	2e02      	cmp	r6, #2
 8001898:	d10e      	bne.n	80018b8 <BSP_LCD_DisplayChar+0x80>
      line =  (pchar[0]<< 8) | pchar[1];
 800189a:	882c      	ldrh	r4, [r5, #0]
 800189c:	ba64      	rev16	r4, r4
 800189e:	b2a4      	uxth	r4, r4
      if(line & (1 << (width- j + offset- 1))) 
 80018a0:	9b04      	ldr	r3, [sp, #16]
 80018a2:	9a00      	ldr	r2, [sp, #0]
 80018a4:	4413      	add	r3, r2
    for (j = 0; j < width; j++)
 80018a6:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 80018aa:	9303      	str	r3, [sp, #12]
    for (j = 0; j < width; j++)
 80018ac:	45c3      	cmp	fp, r8
 80018ae:	d80a      	bhi.n	80018c6 <BSP_LCD_DisplayChar+0x8e>
  for(i = 0; i < height; i++)
 80018b0:	f109 0901 	add.w	r9, r9, #1
 80018b4:	4435      	add	r5, r6
 80018b6:	e7e2      	b.n	800187e <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80018b8:	786a      	ldrb	r2, [r5, #1]
 80018ba:	0424      	lsls	r4, r4, #16
 80018bc:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80018c0:	78aa      	ldrb	r2, [r5, #2]
 80018c2:	4314      	orrs	r4, r2
      break;
 80018c4:	e7ec      	b.n	80018a0 <BSP_LCD_DisplayChar+0x68>
      if(line & (1 << (width- j + offset- 1))) 
 80018c6:	9b01      	ldr	r3, [sp, #4]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80018c8:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80018cc:	9105      	str	r1, [sp, #20]
 80018ce:	eb03 0008 	add.w	r0, r3, r8
      if(line & (1 << (width- j + offset- 1))) 
 80018d2:	9b03      	ldr	r3, [sp, #12]
 80018d4:	f04f 0c01 	mov.w	ip, #1
 80018d8:	eba3 0e08 	sub.w	lr, r3, r8
 80018dc:	fa0c fc0e 	lsl.w	ip, ip, lr
 80018e0:	ea1c 0f04 	tst.w	ip, r4
 80018e4:	f04f 0c0c 	mov.w	ip, #12
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80018e8:	fb0c 7202 	mla	r2, ip, r2, r7
 80018ec:	b280      	uxth	r0, r0
 80018ee:	bf14      	ite	ne
 80018f0:	f8d2 20ec 	ldrne.w	r2, [r2, #236]	; 0xec
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80018f4:	f8d2 20f0 	ldreq.w	r2, [r2, #240]	; 0xf0
 80018f8:	f7ff ff88 	bl	800180c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80018fc:	f108 0801 	add.w	r8, r8, #1
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8001900:	9905      	ldr	r1, [sp, #20]
    for (j = 0; j < width; j++)
 8001902:	e7d3      	b.n	80018ac <BSP_LCD_DisplayChar+0x74>
 8001904:	20000230 	.word	0x20000230

08001908 <BSP_LCD_DisplayStringAt>:
{
 8001908:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800190c:	4699      	mov	r9, r3
 800190e:	4680      	mov	r8, r0
 8001910:	460e      	mov	r6, r1
 8001912:	4615      	mov	r5, r2
  uint8_t  *ptr = pText;
 8001914:	4613      	mov	r3, r2
 8001916:	461c      	mov	r4, r3
  while (*ptr++) size ++ ;
 8001918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800191c:	2a00      	cmp	r2, #0
 800191e:	d1fa      	bne.n	8001916 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001920:	4f27      	ldr	r7, [pc, #156]	; (80019c0 <BSP_LCD_DisplayStringAt+0xb8>)
 8001922:	f7ff fc7f 	bl	8001224 <BSP_LCD_GetXSize>
 8001926:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800192a:	220c      	movs	r2, #12
 800192c:	fb02 7303 	mla	r3, r2, r3, r7
  switch (mode)
 8001930:	f1b9 0f01 	cmp.w	r9, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8001934:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001938:	889b      	ldrh	r3, [r3, #4]
 800193a:	fbb0 f0f3 	udiv	r0, r0, r3
  switch (mode)
 800193e:	d01d      	beq.n	800197c <BSP_LCD_DisplayStringAt+0x74>
 8001940:	f1b9 0f02 	cmp.w	r9, #2
 8001944:	d022      	beq.n	800198c <BSP_LCD_DisplayStringAt+0x84>
 8001946:	3d01      	subs	r5, #1
  uint8_t  *ptr = pText;
 8001948:	f04f 0900 	mov.w	r9, #0
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800194c:	f04f 0a0c 	mov.w	sl, #12
 8001950:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 8001954:	3c00      	subs	r4, #0
 8001956:	bf18      	it	ne
 8001958:	2401      	movne	r4, #1
 800195a:	f7ff fc63 	bl	8001224 <BSP_LCD_GetXSize>
 800195e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001962:	fb0a 7303 	mla	r3, sl, r3, r7
 8001966:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800196a:	889b      	ldrh	r3, [r3, #4]
 800196c:	fb03 0019 	mls	r0, r3, r9, r0
 8001970:	b280      	uxth	r0, r0
 8001972:	4298      	cmp	r0, r3
 8001974:	d300      	bcc.n	8001978 <BSP_LCD_DisplayStringAt+0x70>
 8001976:	b974      	cbnz	r4, 8001996 <BSP_LCD_DisplayStringAt+0x8e>
}
 8001978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 800197c:	1b2c      	subs	r4, r5, r4
 800197e:	4420      	add	r0, r4
 8001980:	4343      	muls	r3, r0
 8001982:	eb08 0053 	add.w	r0, r8, r3, lsr #1
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8001986:	fa1f f880 	uxth.w	r8, r0
      break;
 800198a:	e7dc      	b.n	8001946 <BSP_LCD_DisplayStringAt+0x3e>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 800198c:	1b2c      	subs	r4, r5, r4
 800198e:	4404      	add	r4, r0
 8001990:	fb14 8003 	smlabb	r0, r4, r3, r8
 8001994:	e7f7      	b.n	8001986 <BSP_LCD_DisplayStringAt+0x7e>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001996:	4640      	mov	r0, r8
 8001998:	782a      	ldrb	r2, [r5, #0]
 800199a:	4631      	mov	r1, r6
 800199c:	f7ff ff4c 	bl	8001838 <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80019a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80019a4:	fb0a 7303 	mla	r3, sl, r3, r7
    i++;
 80019a8:	f109 0901 	add.w	r9, r9, #1
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80019ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80019b0:	8898      	ldrh	r0, [r3, #4]
 80019b2:	4440      	add	r0, r8
 80019b4:	fa1f f880 	uxth.w	r8, r0
    i++;
 80019b8:	fa1f f989 	uxth.w	r9, r9
 80019bc:	e7c8      	b.n	8001950 <BSP_LCD_DisplayStringAt+0x48>
 80019be:	bf00      	nop
 80019c0:	20000230 	.word	0x20000230

080019c4 <BSP_LCD_DrawCircle>:
{
 80019c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80019c8:	b087      	sub	sp, #28
 80019ca:	e9cd 0101 	strd	r0, r1, [sp, #4]
  d = 3 - (Radius << 1);
 80019ce:	0055      	lsls	r5, r2, #1
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80019d0:	4c4c      	ldr	r4, [pc, #304]	; (8001b04 <BSP_LCD_DrawCircle+0x140>)
  d = 3 - (Radius << 1);
 80019d2:	f1c5 0503 	rsb	r5, r5, #3
  cury = Radius;
 80019d6:	4616      	mov	r6, r2
  curx = 0;
 80019d8:	f04f 0800 	mov.w	r8, #0
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80019dc:	270c      	movs	r7, #12
 80019de:	b2b2      	uxth	r2, r6
 80019e0:	9200      	str	r2, [sp, #0]
 80019e2:	9900      	ldr	r1, [sp, #0]
 80019e4:	9a02      	ldr	r2, [sp, #8]
 80019e6:	9b01      	ldr	r3, [sp, #4]
 80019e8:	1a51      	subs	r1, r2, r1
 80019ea:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 80019ee:	fa13 f388 	uxtah	r3, r3, r8
 80019f2:	fb07 4202 	mla	r2, r7, r2, r4
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	b289      	uxth	r1, r1
 80019fa:	4618      	mov	r0, r3
 80019fc:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8001a00:	9104      	str	r1, [sp, #16]
 8001a02:	9305      	str	r3, [sp, #20]
 8001a04:	f7ff ff02 	bl	800180c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8001a08:	9b01      	ldr	r3, [sp, #4]
 8001a0a:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8001a0e:	9904      	ldr	r1, [sp, #16]
 8001a10:	fa1f f988 	uxth.w	r9, r8
 8001a14:	eba3 0b09 	sub.w	fp, r3, r9
 8001a18:	fb07 4202 	mla	r2, r7, r2, r4
 8001a1c:	fa1f fb8b 	uxth.w	fp, fp
 8001a20:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8001a24:	f8cd 900c 	str.w	r9, [sp, #12]
 8001a28:	4658      	mov	r0, fp
 8001a2a:	f7ff feef 	bl	800180c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8001a2e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8001a32:	eb03 0a02 	add.w	sl, r3, r2
 8001a36:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8001a3a:	1a99      	subs	r1, r3, r2
 8001a3c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8001a40:	fb07 4202 	mla	r2, r7, r2, r4
 8001a44:	fa1f fa8a 	uxth.w	sl, sl
 8001a48:	b289      	uxth	r1, r1
 8001a4a:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8001a4e:	9104      	str	r1, [sp, #16]
 8001a50:	4650      	mov	r0, sl
 8001a52:	f7ff fedb 	bl	800180c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 8001a56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001a5a:	eba3 0902 	sub.w	r9, r3, r2
 8001a5e:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8001a62:	9904      	ldr	r1, [sp, #16]
 8001a64:	fb07 4202 	mla	r2, r7, r2, r4
 8001a68:	fa1f f989 	uxth.w	r9, r9
 8001a6c:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8001a70:	4648      	mov	r0, r9
 8001a72:	f7ff fecb 	bl	800180c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8001a76:	9b00      	ldr	r3, [sp, #0]
 8001a78:	9a02      	ldr	r2, [sp, #8]
 8001a7a:	1899      	adds	r1, r3, r2
 8001a7c:	f8d4 2104 	ldr.w	r2, [r4, #260]	; 0x104
 8001a80:	9b05      	ldr	r3, [sp, #20]
 8001a82:	fb07 4202 	mla	r2, r7, r2, r4
 8001a86:	b289      	uxth	r1, r1
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8001a8e:	9100      	str	r1, [sp, #0]
 8001a90:	f7ff febc 	bl	800180c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8001a94:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8001a98:	9900      	ldr	r1, [sp, #0]
 8001a9a:	fb07 4303 	mla	r3, r7, r3, r4
 8001a9e:	4658      	mov	r0, fp
 8001aa0:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8001aa4:	f7ff feb2 	bl	800180c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 8001aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001aac:	1899      	adds	r1, r3, r2
 8001aae:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8001ab2:	fb07 4303 	mla	r3, r7, r3, r4
 8001ab6:	b289      	uxth	r1, r1
 8001ab8:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8001abc:	9100      	str	r1, [sp, #0]
 8001abe:	4650      	mov	r0, sl
 8001ac0:	f7ff fea4 	bl	800180c <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8001ac4:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 8001ac8:	9900      	ldr	r1, [sp, #0]
 8001aca:	fb07 4303 	mla	r3, r7, r3, r4
 8001ace:	4648      	mov	r0, r9
 8001ad0:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 8001ad4:	f7ff fe9a 	bl	800180c <BSP_LCD_DrawPixel>
    if (d < 0)
 8001ad8:	2d00      	cmp	r5, #0
      d += (curx << 2) + 6;
 8001ada:	bfb5      	itete	lt
 8001adc:	3506      	addlt	r5, #6
      d += ((curx - cury) << 2) + 10;
 8001ade:	eba8 0306 	subge.w	r3, r8, r6
      d += (curx << 2) + 6;
 8001ae2:	eb05 0588 	addlt.w	r5, r5, r8, lsl #2
      d += ((curx - cury) << 2) + 10;
 8001ae6:	350a      	addge	r5, #10
      cury--;
 8001ae8:	bfa8      	it	ge
 8001aea:	f106 36ff 	addge.w	r6, r6, #4294967295
    curx++;
 8001aee:	f108 0801 	add.w	r8, r8, #1
      d += ((curx - cury) << 2) + 10;
 8001af2:	bfa8      	it	ge
 8001af4:	eb05 0583 	addge.w	r5, r5, r3, lsl #2
  while (curx <= cury)
 8001af8:	4546      	cmp	r6, r8
 8001afa:	f4bf af70 	bcs.w	80019de <BSP_LCD_DrawCircle+0x1a>
}
 8001afe:	b007      	add	sp, #28
 8001b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b04:	20000230 	.word	0x20000230

08001b08 <BSP_LCD_FillCircle>:
{
 8001b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001bd4 <BSP_LCD_FillCircle+0xcc>
 8001b10:	f8da 3104 	ldr.w	r3, [sl, #260]	; 0x104
  d = 3 - (Radius << 1);
 8001b14:	0054      	lsls	r4, r2, #1
{
 8001b16:	4691      	mov	r9, r2
  cury = Radius;
 8001b18:	4617      	mov	r7, r2
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	fb02 a303 	mla	r3, r2, r3, sl
{
 8001b20:	4680      	mov	r8, r0
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b22:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
{
 8001b26:	460e      	mov	r6, r1
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001b28:	f7ff fc02 	bl	8001330 <BSP_LCD_SetTextColor>
  d = 3 - (Radius << 1);
 8001b2c:	f1c4 0403 	rsb	r4, r4, #3
  curx = 0;
 8001b30:	2500      	movs	r5, #0
    if(cury > 0) 
 8001b32:	b1af      	cbz	r7, 8001b60 <BSP_LCD_FillCircle+0x58>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 8001b34:	b2ba      	uxth	r2, r7
 8001b36:	eba8 0002 	sub.w	r0, r8, r2
 8001b3a:	fa16 f185 	uxtah	r1, r6, r5
 8001b3e:	0052      	lsls	r2, r2, #1
 8001b40:	b280      	uxth	r0, r0
 8001b42:	b292      	uxth	r2, r2
 8001b44:	b289      	uxth	r1, r1
 8001b46:	fa1f fb85 	uxth.w	fp, r5
 8001b4a:	9201      	str	r2, [sp, #4]
 8001b4c:	9000      	str	r0, [sp, #0]
 8001b4e:	f7ff fc31 	bl	80013b4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 8001b52:	eba6 010b 	sub.w	r1, r6, fp
 8001b56:	9a01      	ldr	r2, [sp, #4]
 8001b58:	9800      	ldr	r0, [sp, #0]
 8001b5a:	b289      	uxth	r1, r1
 8001b5c:	f7ff fc2a 	bl	80013b4 <BSP_LCD_DrawHLine>
    if(curx > 0) 
 8001b60:	b1ad      	cbz	r5, 8001b8e <BSP_LCD_FillCircle+0x86>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 8001b62:	b2aa      	uxth	r2, r5
 8001b64:	fa1f fb87 	uxth.w	fp, r7
 8001b68:	eba8 0002 	sub.w	r0, r8, r2
 8001b6c:	eba6 010b 	sub.w	r1, r6, fp
 8001b70:	0052      	lsls	r2, r2, #1
 8001b72:	b280      	uxth	r0, r0
 8001b74:	b292      	uxth	r2, r2
 8001b76:	b289      	uxth	r1, r1
 8001b78:	9201      	str	r2, [sp, #4]
 8001b7a:	9000      	str	r0, [sp, #0]
 8001b7c:	f7ff fc1a 	bl	80013b4 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 8001b80:	eb0b 0106 	add.w	r1, fp, r6
 8001b84:	9a01      	ldr	r2, [sp, #4]
 8001b86:	9800      	ldr	r0, [sp, #0]
 8001b88:	b289      	uxth	r1, r1
 8001b8a:	f7ff fc13 	bl	80013b4 <BSP_LCD_DrawHLine>
    if (d < 0)
 8001b8e:	2c00      	cmp	r4, #0
      d += (curx << 2) + 6;
 8001b90:	bfb5      	itete	lt
 8001b92:	3406      	addlt	r4, #6
      d += ((curx - cury) << 2) + 10;
 8001b94:	1beb      	subge	r3, r5, r7
      d += (curx << 2) + 6;
 8001b96:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
      d += ((curx - cury) << 2) + 10;
 8001b9a:	340a      	addge	r4, #10
      cury--;
 8001b9c:	bfa8      	it	ge
 8001b9e:	f107 37ff 	addge.w	r7, r7, #4294967295
    curx++;
 8001ba2:	f105 0501 	add.w	r5, r5, #1
      d += ((curx - cury) << 2) + 10;
 8001ba6:	bfa8      	it	ge
 8001ba8:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (curx <= cury)
 8001bac:	42af      	cmp	r7, r5
 8001bae:	d2c0      	bcs.n	8001b32 <BSP_LCD_FillCircle+0x2a>
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001bb0:	f8da 3104 	ldr.w	r3, [sl, #260]	; 0x104
 8001bb4:	220c      	movs	r2, #12
 8001bb6:	fb02 aa03 	mla	sl, r2, r3, sl
 8001bba:	f8da 00ec 	ldr.w	r0, [sl, #236]	; 0xec
 8001bbe:	f7ff fbb7 	bl	8001330 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001bc2:	464a      	mov	r2, r9
 8001bc4:	4631      	mov	r1, r6
 8001bc6:	4640      	mov	r0, r8
}
 8001bc8:	b003      	add	sp, #12
 8001bca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8001bce:	f7ff bef9 	b.w	80019c4 <BSP_LCD_DrawCircle>
 8001bd2:	bf00      	nop
 8001bd4:	20000230 	.word	0x20000230

08001bd8 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8001bd8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd =0;
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 8001bdc:	4c21      	ldr	r4, [pc, #132]	; (8001c64 <BSP_SDRAM_Initialization_sequence+0x8c>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001bde:	f104 0510 	add.w	r5, r4, #16
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001be2:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd =0;
 8001be4:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001be8:	2708      	movs	r7, #8
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001bea:	4621      	mov	r1, r4
{
 8001bec:	4681      	mov	r9, r0
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf2:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001bf4:	e9c4 6700 	strd	r6, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 8001bf8:	e9c4 6802 	strd	r6, r8, [r4, #8]
  __IO uint32_t tmpmrd =0;
 8001bfc:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001c00:	f002 fb39 	bl	8004276 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8001c04:	4630      	mov	r0, r6
 8001c06:	f000 fa1f 	bl	8002048 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8001c0a:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8001c0c:	4621      	mov	r1, r4
 8001c0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c12:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001c14:	e9c4 3700 	strd	r3, r7, [r4]
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 8001c18:	f04f 0a04 	mov.w	sl, #4
  Command.ModeRegisterDefinition  = 0;
 8001c1c:	e9c4 6802 	strd	r6, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8001c20:	f002 fb29 	bl	8004276 <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001c24:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001c26:	4621      	mov	r1, r4
 8001c28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c2c:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001c2e:	e9c4 3700 	strd	r3, r7, [r4]
  Command.ModeRegisterDefinition  = 0;
 8001c32:	e9c4 a802 	strd	sl, r8, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001c36:	f002 fb1e 	bl	8004276 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8001c3a:	f44f 730c 	mov.w	r3, #560	; 0x230
 8001c3e:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 8001c40:	9b01      	ldr	r3, [sp, #4]
  Command.AutoRefreshNumber       = 1;
 8001c42:	60a6      	str	r6, [r4, #8]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001c44:	4621      	mov	r1, r4
 8001c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c4a:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8001c4c:	e9c4 a700 	strd	sl, r7, [r4]
  Command.ModeRegisterDefinition  = tmpmrd;
 8001c50:	60e3      	str	r3, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8001c52:	f002 fb10 	bl	8004276 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8001c56:	4649      	mov	r1, r9
 8001c58:	4628      	mov	r0, r5
}
 8001c5a:	b002      	add	sp, #8
 8001c5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 8001c60:	f002 bb27 	b.w	80042b2 <HAL_SDRAM_ProgramRefreshRate>
 8001c64:	20000368 	.word	0x20000368

08001c68 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 8001c68:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001c6a:	4606      	mov	r6, r0
{
 8001c6c:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 8001c6e:	2800      	cmp	r0, #0
 8001c70:	f000 80ad 	beq.w	8001dce <BSP_SDRAM_MspInit+0x166>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c74:	4b57      	ldr	r3, [pc, #348]	; (8001dd4 <BSP_SDRAM_MspInit+0x16c>)
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001c76:	4858      	ldr	r0, [pc, #352]	; (8001dd8 <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c78:	2400      	movs	r4, #0
 8001c7a:	9401      	str	r4, [sp, #4]
 8001c7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	639a      	str	r2, [r3, #56]	; 0x38
 8001c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001c86:	f002 0201 	and.w	r2, r2, #1
 8001c8a:	9201      	str	r2, [sp, #4]
 8001c8c:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 8001c8e:	9402      	str	r4, [sp, #8]
 8001c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c92:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c96:	631a      	str	r2, [r3, #48]	; 0x30
 8001c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c9a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001c9e:	9202      	str	r2, [sp, #8]
 8001ca0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca2:	9403      	str	r4, [sp, #12]
 8001ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ca6:	f042 0202 	orr.w	r2, r2, #2
 8001caa:	631a      	str	r2, [r3, #48]	; 0x30
 8001cac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cae:	f002 0202 	and.w	r2, r2, #2
 8001cb2:	9203      	str	r2, [sp, #12]
 8001cb4:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb6:	9404      	str	r4, [sp, #16]
 8001cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cba:	f042 0204 	orr.w	r2, r2, #4
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc2:	f002 0204 	and.w	r2, r2, #4
 8001cc6:	9204      	str	r2, [sp, #16]
 8001cc8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cca:	9405      	str	r4, [sp, #20]
 8001ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cce:	f042 0208 	orr.w	r2, r2, #8
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cd6:	f002 0208 	and.w	r2, r2, #8
 8001cda:	9205      	str	r2, [sp, #20]
 8001cdc:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cde:	9406      	str	r4, [sp, #24]
 8001ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ce2:	f042 0210 	orr.w	r2, r2, #16
 8001ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cea:	f002 0210 	and.w	r2, r2, #16
 8001cee:	9206      	str	r2, [sp, #24]
 8001cf0:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cf2:	9407      	str	r4, [sp, #28]
 8001cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cf6:	f042 0220 	orr.w	r2, r2, #32
 8001cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8001cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cfe:	f002 0220 	and.w	r2, r2, #32
 8001d02:	9207      	str	r2, [sp, #28]
 8001d04:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d06:	9408      	str	r4, [sp, #32]
 8001d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d16:	9308      	str	r3, [sp, #32]
 8001d18:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001d1a:	2302      	movs	r3, #2
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001d1c:	e9cd 430b 	strd	r4, r3, [sp, #44]	; 0x2c
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8001d20:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8001d22:	230c      	movs	r3, #12
 8001d24:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001d26:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8001d28:	2360      	movs	r3, #96	; 0x60
 8001d2a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 8001d2c:	f000 fc14 	bl	8002558 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8001d30:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001d32:	482a      	ldr	r0, [pc, #168]	; (8001ddc <BSP_SDRAM_MspInit+0x174>)
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 8001d34:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 8001d36:	a909      	add	r1, sp, #36	; 0x24
 8001d38:	f000 fc0e 	bl	8002558 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001d3c:	f24c 7303 	movw	r3, #50947	; 0xc703
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d40:	4827      	ldr	r0, [pc, #156]	; (8001de0 <BSP_SDRAM_MspInit+0x178>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 8001d42:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001d44:	a909      	add	r1, sp, #36	; 0x24
 8001d46:	f000 fc07 	bl	8002558 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001d4a:	f64f 7383 	movw	r3, #65411	; 0xff83
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001d4e:	4825      	ldr	r0, [pc, #148]	; (8001de4 <BSP_SDRAM_MspInit+0x17c>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 8001d50:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8001d52:	a909      	add	r1, sp, #36	; 0x24
 8001d54:	f000 fc00 	bl	8002558 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001d58:	f64f 033f 	movw	r3, #63551	; 0xf83f
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001d5c:	4822      	ldr	r0, [pc, #136]	; (8001de8 <BSP_SDRAM_MspInit+0x180>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 8001d5e:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001d60:	a909      	add	r1, sp, #36	; 0x24
 8001d62:	f000 fbf9 	bl	8002558 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001d66:	f248 1333 	movw	r3, #33075	; 0x8133
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d6a:	4820      	ldr	r0, [pc, #128]	; (8001dec <BSP_SDRAM_MspInit+0x184>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8001d6c:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001d6e:	a909      	add	r1, sp, #36	; 0x24
 8001d70:	f000 fbf2 	bl	8002558 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <BSP_SDRAM_MspInit+0x188>)
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8001d76:	2180      	movs	r1, #128	; 0x80
 8001d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d7c:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d80:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d88:	e9c3 0215 	strd	r0, r2, [r3, #84]	; 0x54
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8001d8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8001d90:	e9c3 2417 	strd	r2, r4, [r3, #92]	; 0x5c
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8001d94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001d98:	461d      	mov	r5, r3
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8001d9a:	e9c3 2419 	strd	r2, r4, [r3, #100]	; 0x64
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8001d9e:	2203      	movs	r2, #3
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8001da0:	e9c3 241b 	strd	r2, r4, [r3, #108]	; 0x6c
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8001da4:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <BSP_SDRAM_MspInit+0x18c>)
 8001da6:	f845 2f44 	str.w	r2, [r5, #68]!
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8001daa:	675c      	str	r4, [r3, #116]	; 0x74
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8001dac:	4628      	mov	r0, r5
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001dae:	6335      	str	r5, [r6, #48]	; 0x30
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8001db0:	649c      	str	r4, [r3, #72]	; 0x48
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8001db2:	67de      	str	r6, [r3, #124]	; 0x7c
  HAL_DMA_DeInit(&dmaHandle);
 8001db4:	f000 fa58 	bl	8002268 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8001db8:	4628      	mov	r0, r5
 8001dba:	f000 f9d5 	bl	8002168 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8001dbe:	2038      	movs	r0, #56	; 0x38
 8001dc0:	4622      	mov	r2, r4
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	f000 f966 	bl	8002094 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8001dc8:	2038      	movs	r0, #56	; 0x38
 8001dca:	f000 f995 	bl	80020f8 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8001dce:	b00e      	add	sp, #56	; 0x38
 8001dd0:	bd70      	pop	{r4, r5, r6, pc}
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	40020c00 	.word	0x40020c00
 8001de4:	40021000 	.word	0x40021000
 8001de8:	40021400 	.word	0x40021400
 8001dec:	40021800 	.word	0x40021800
 8001df0:	20000368 	.word	0x20000368
 8001df4:	40026410 	.word	0x40026410

08001df8 <BSP_SDRAM_Init>:
{
 8001df8:	b510      	push	{r4, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8001dfa:	4c1b      	ldr	r4, [pc, #108]	; (8001e68 <BSP_SDRAM_Init+0x70>)
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <BSP_SDRAM_Init+0x74>)
 8001dfe:	6123      	str	r3, [r4, #16]
  Timing.SelfRefreshTime      = 4;
 8001e00:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 8001e02:	2302      	movs	r3, #2
 8001e04:	2107      	movs	r1, #7
  Timing.RowCycleDelay        = 7;
 8001e06:	e9c4 212b 	strd	r2, r1, [r4, #172]	; 0xac
  Timing.ExitSelfRefreshDelay = 7;
 8001e0a:	e9c4 3129 	strd	r3, r1, [r4, #164]	; 0xa4
  Timing.RPDelay              = 2;
 8001e0e:	e9c4 332d 	strd	r3, r3, [r4, #180]	; 0xb4
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e12:	2100      	movs	r1, #0
  Timing.RCDDelay             = 2;
 8001e14:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e9c4 3105 	strd	r3, r1, [r4, #20]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001e1e:	2010      	movs	r0, #16
 8001e20:	2340      	movs	r3, #64	; 0x40
 8001e22:	e9c4 0308 	strd	r0, r3, [r4, #32]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8001e26:	f44f 73c0 	mov.w	r3, #384	; 0x180
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001e2a:	e9c4 310a 	strd	r3, r1, [r4, #40]	; 0x28
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8001e2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8001e32:	e9c4 310c 	strd	r3, r1, [r4, #48]	; 0x30
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001e36:	f104 0010 	add.w	r0, r4, #16
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001e3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8001e3e:	61e2      	str	r2, [r4, #28]
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 8001e40:	63a3      	str	r3, [r4, #56]	; 0x38
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8001e42:	f7ff ff11 	bl	8001c68 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 8001e46:	f104 01a4 	add.w	r1, r4, #164	; 0xa4
 8001e4a:	f1a1 0094 	sub.w	r0, r1, #148	; 0x94
 8001e4e:	f002 f9f2 	bl	8004236 <HAL_SDRAM_Init>
 8001e52:	4c07      	ldr	r4, [pc, #28]	; (8001e70 <BSP_SDRAM_Init+0x78>)
 8001e54:	3800      	subs	r0, #0
 8001e56:	bf18      	it	ne
 8001e58:	2001      	movne	r0, #1
 8001e5a:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8001e5c:	f240 506a 	movw	r0, #1386	; 0x56a
 8001e60:	f7ff feba 	bl	8001bd8 <BSP_SDRAM_Initialization_sequence>
}
 8001e64:	7820      	ldrb	r0, [r4, #0]
 8001e66:	bd10      	pop	{r4, pc}
 8001e68:	20000368 	.word	0x20000368
 8001e6c:	a0000140 	.word	0xa0000140
 8001e70:	200000c8 	.word	0x200000c8

08001e74 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 8001e74:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = TS_ERROR;

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 8001e76:	4c0b      	ldr	r4, [pc, #44]	; (8001ea4 <BSP_TS_Init+0x30>)
  TsYBoundary = YSize;

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8001e78:	4d0b      	ldr	r5, [pc, #44]	; (8001ea8 <BSP_TS_Init+0x34>)
  TsXBoundary = XSize;
 8001e7a:	8020      	strh	r0, [r4, #0]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8001e7c:	686b      	ldr	r3, [r5, #4]
  TsYBoundary = YSize;
 8001e7e:	8061      	strh	r1, [r4, #2]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 8001e80:	2082      	movs	r0, #130	; 0x82
 8001e82:	4798      	blx	r3
 8001e84:	f640 0311 	movw	r3, #2065	; 0x811
 8001e88:	4298      	cmp	r0, r3
 8001e8a:	d109      	bne.n	8001ea0 <BSP_TS_Init+0x2c>
  }

  if(ret == TS_OK)
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 8001e8c:	682b      	ldr	r3, [r5, #0]
    TsDrv = &stmpe811_ts_drv;
 8001e8e:	6065      	str	r5, [r4, #4]
    TsDrv->Init(TS_I2C_ADDRESS);
 8001e90:	2082      	movs	r0, #130	; 0x82
 8001e92:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8001e94:	6863      	ldr	r3, [r4, #4]
 8001e96:	2082      	movs	r0, #130	; 0x82
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	4798      	blx	r3
    ret = TS_OK;
 8001e9c:	2000      	movs	r0, #0
  }

  return ret;
}
 8001e9e:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ret = TS_ERROR;
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	e7fc      	b.n	8001e9e <BSP_TS_Init+0x2a>
 8001ea4:	20000488 	.word	0x20000488
 8001ea8:	20000064 	.word	0x20000064

08001eac <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8001eac:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8001eae:	4c2a      	ldr	r4, [pc, #168]	; (8001f58 <BSP_TS_GetState+0xac>)
 8001eb0:	6863      	ldr	r3, [r4, #4]
{
 8001eb2:	4605      	mov	r5, r0
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	2082      	movs	r0, #130	; 0x82
 8001eb8:	4798      	blx	r3
 8001eba:	b280      	uxth	r0, r0
 8001ebc:	8028      	strh	r0, [r5, #0]
  
  if(TsState->TouchDetected)
 8001ebe:	2800      	cmp	r0, #0
 8001ec0:	d03e      	beq.n	8001f40 <BSP_TS_GetState+0x94>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8001ec2:	6863      	ldr	r3, [r4, #4]
 8001ec4:	f10d 0206 	add.w	r2, sp, #6
 8001ec8:	695b      	ldr	r3, [r3, #20]
 8001eca:	a901      	add	r1, sp, #4
 8001ecc:	2082      	movs	r0, #130	; 0x82
 8001ece:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8001ed0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8001ed4:	f5a2 72b4 	sub.w	r2, r2, #360	; 0x168
 8001ed8:	b292      	uxth	r2, r2
    
    /* Y value second correction */
    yr = y / 11;
    
    /* Return y position value */
    if(yr <= 0)
 8001eda:	2a0a      	cmp	r2, #10
 8001edc:	d932      	bls.n	8001f44 <BSP_TS_GetState+0x98>
    yr = y / 11;
 8001ede:	230b      	movs	r3, #11
 8001ee0:	fbb2 f2f3 	udiv	r2, r2, r3
    {
      yr = 0;
    }
    else if (yr > TsYBoundary)
 8001ee4:	8863      	ldrh	r3, [r4, #2]
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d201      	bcs.n	8001eee <BSP_TS_GetState+0x42>
    {
      yr = TsYBoundary - 1;
 8001eea:	3b01      	subs	r3, #1
 8001eec:	b29a      	uxth	r2, r3
    else
    {}
    y = yr;
    
    /* X value first correction */
    if(x <= 3000)
 8001eee:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8001ef2:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001ef6:	428b      	cmp	r3, r1
 8001ef8:	d826      	bhi.n	8001f48 <BSP_TS_GetState+0x9c>
    {
      x = 3870 - x;
 8001efa:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 8001efe:	330e      	adds	r3, #14
 8001f00:	b29b      	uxth	r3, r3
    {
      x = 3800 - x;
    }
    
    /* X value second correction */  
    xr = x / 15;
 8001f02:	210f      	movs	r1, #15
 8001f04:	fbb3 f3f1 	udiv	r3, r3, r1
    /* Return X position value */
    if(xr <= 0)
    {
      xr = 0;
    }
    else if (xr > TsXBoundary)
 8001f08:	8821      	ldrh	r1, [r4, #0]
 8001f0a:	4299      	cmp	r1, r3
 8001f0c:	d201      	bcs.n	8001f12 <BSP_TS_GetState+0x66>
    {
      xr = TsXBoundary - 1;
 8001f0e:	1e4b      	subs	r3, r1, #1
 8001f10:	b29b      	uxth	r3, r3
    }
    else 
    {}
    
    x = xr;
    xDiff = x > _x? (x - _x): (_x - x);
 8001f12:	68a0      	ldr	r0, [r4, #8]
    yDiff = y > _y? (y - _y): (_y - y); 
 8001f14:	68e6      	ldr	r6, [r4, #12]
    xDiff = x > _x? (x - _x): (_x - x);
 8001f16:	4283      	cmp	r3, r0
 8001f18:	b281      	uxth	r1, r0
 8001f1a:	bf8c      	ite	hi
 8001f1c:	1a59      	subhi	r1, r3, r1
 8001f1e:	1ac9      	subls	r1, r1, r3
    yDiff = y > _y? (y - _y): (_y - y); 
 8001f20:	b2b0      	uxth	r0, r6
 8001f22:	42b2      	cmp	r2, r6
 8001f24:	bf8c      	ite	hi
 8001f26:	1a10      	subhi	r0, r2, r0
 8001f28:	1a80      	subls	r0, r0, r2
    xDiff = x > _x? (x - _x): (_x - x);
 8001f2a:	b289      	uxth	r1, r1
    yDiff = y > _y? (y - _y): (_y - y); 
 8001f2c:	b280      	uxth	r0, r0
    
    if (xDiff + yDiff > 5)
 8001f2e:	4401      	add	r1, r0
 8001f30:	2905      	cmp	r1, #5
    {
      _x = x;
      _y = y; 
 8001f32:	bfc8      	it	gt
 8001f34:	e9c4 3202 	strdgt	r3, r2, [r4, #8]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8001f38:	68a3      	ldr	r3, [r4, #8]
 8001f3a:	806b      	strh	r3, [r5, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8001f3c:	68e3      	ldr	r3, [r4, #12]
 8001f3e:	80ab      	strh	r3, [r5, #4]
  }
}
 8001f40:	b002      	add	sp, #8
 8001f42:	bd70      	pop	{r4, r5, r6, pc}
      yr = 0;
 8001f44:	2200      	movs	r2, #0
 8001f46:	e7d2      	b.n	8001eee <BSP_TS_GetState+0x42>
      x = 3800 - x;
 8001f48:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 8001f4c:	3308      	adds	r3, #8
 8001f4e:	b29b      	uxth	r3, r3
    if(xr <= 0)
 8001f50:	2b0e      	cmp	r3, #14
 8001f52:	d8d6      	bhi.n	8001f02 <BSP_TS_GetState+0x56>
      xr = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	e7dc      	b.n	8001f12 <BSP_TS_GetState+0x66>
 8001f58:	20000488 	.word	0x20000488

08001f5c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f5c:	490f      	ldr	r1, [pc, #60]	; (8001f9c <SystemInit+0x40>)
 8001f5e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f62:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <SystemInit+0x44>)
 8001f6c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f6e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001f76:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001f7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f82:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001f84:	4a07      	ldr	r2, [pc, #28]	; (8001fa4 <SystemInit+0x48>)
 8001f86:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f90:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001f96:	608b      	str	r3, [r1, #8]
#endif
}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	24003010 	.word	0x24003010

08001fa8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001fa8:	4770      	bx	lr
	...

08001fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fac:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fae:	4a0e      	ldr	r2, [pc, #56]	; (8001fe8 <HAL_InitTick+0x3c>)
 8001fb0:	4e0e      	ldr	r6, [pc, #56]	; (8001fec <HAL_InitTick+0x40>)
{
 8001fb2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb8:	7830      	ldrb	r0, [r6, #0]
 8001fba:	fbb3 f3f0 	udiv	r3, r3, r0
 8001fbe:	6810      	ldr	r0, [r2, #0]
 8001fc0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001fc4:	f000 f8a6 	bl	8002114 <HAL_SYSTICK_Config>
 8001fc8:	4604      	mov	r4, r0
 8001fca:	b950      	cbnz	r0, 8001fe2 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fcc:	2d0f      	cmp	r5, #15
 8001fce:	d808      	bhi.n	8001fe2 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	4629      	mov	r1, r5
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f000 f85c 	bl	8002094 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fdc:	6075      	str	r5, [r6, #4]
 8001fde:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001fe0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	e7fc      	b.n	8001fe0 <HAL_InitTick+0x34>
 8001fe6:	bf00      	nop
 8001fe8:	200000cc 	.word	0x200000cc
 8001fec:	200000d0 	.word	0x200000d0

08001ff0 <HAL_Init>:
{
 8001ff0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ff2:	4b0b      	ldr	r3, [pc, #44]	; (8002020 <HAL_Init+0x30>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ffa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002002:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800200a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800200c:	2003      	movs	r0, #3
 800200e:	f000 f82f 	bl	8002070 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8002012:	200f      	movs	r0, #15
 8002014:	f7ff ffca 	bl	8001fac <HAL_InitTick>
  HAL_MspInit();
 8002018:	f7ff ffc6 	bl	8001fa8 <HAL_MspInit>
}
 800201c:	2000      	movs	r0, #0
 800201e:	bd08      	pop	{r3, pc}
 8002020:	40023c00 	.word	0x40023c00

08002024 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8002024:	4a03      	ldr	r2, [pc, #12]	; (8002034 <HAL_IncTick+0x10>)
 8002026:	4b04      	ldr	r3, [pc, #16]	; (8002038 <HAL_IncTick+0x14>)
 8002028:	6811      	ldr	r1, [r2, #0]
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	440b      	add	r3, r1
 800202e:	6013      	str	r3, [r2, #0]
}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	20000498 	.word	0x20000498
 8002038:	200000d0 	.word	0x200000d0

0800203c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800203c:	4b01      	ldr	r3, [pc, #4]	; (8002044 <HAL_GetTick+0x8>)
 800203e:	6818      	ldr	r0, [r3, #0]
}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	20000498 	.word	0x20000498

08002048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002048:	b538      	push	{r3, r4, r5, lr}
 800204a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7ff fff6 	bl	800203c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002050:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8002052:	bf1c      	itt	ne
 8002054:	4b05      	ldrne	r3, [pc, #20]	; (800206c <HAL_Delay+0x24>)
 8002056:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8002058:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800205a:	bf18      	it	ne
 800205c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800205e:	f7ff ffed 	bl	800203c <HAL_GetTick>
 8002062:	1b43      	subs	r3, r0, r5
 8002064:	42a3      	cmp	r3, r4
 8002066:	d3fa      	bcc.n	800205e <HAL_Delay+0x16>
  {
  }
}
 8002068:	bd38      	pop	{r3, r4, r5, pc}
 800206a:	bf00      	nop
 800206c:	200000d0 	.word	0x200000d0

08002070 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002070:	4907      	ldr	r1, [pc, #28]	; (8002090 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002072:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002074:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002078:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800207a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800207c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002080:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002082:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002084:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800208c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800208e:	4770      	bx	lr
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002096:	b530      	push	{r4, r5, lr}
 8002098:	68dc      	ldr	r4, [r3, #12]
 800209a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020a4:	2d04      	cmp	r5, #4
 80020a6:	bf28      	it	cs
 80020a8:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020ac:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b0:	bf8c      	ite	hi
 80020b2:	3c03      	subhi	r4, #3
 80020b4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b6:	fa03 f505 	lsl.w	r5, r3, r5
 80020ba:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020be:	40a3      	lsls	r3, r4
 80020c0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80020c6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020cc:	bfac      	ite	ge
 80020ce:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d2:	4a08      	ldrlt	r2, [pc, #32]	; (80020f4 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d4:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d8:	bfb8      	it	lt
 80020da:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	bfaa      	itet	ge
 80020e2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80020ec:	bd30      	pop	{r4, r5, pc}
 80020ee:	bf00      	nop
 80020f0:	e000ed00 	.word	0xe000ed00
 80020f4:	e000ed14 	.word	0xe000ed14

080020f8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80020f8:	2800      	cmp	r0, #0
 80020fa:	db08      	blt.n	800210e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fc:	0942      	lsrs	r2, r0, #5
 80020fe:	2301      	movs	r3, #1
 8002100:	f000 001f 	and.w	r0, r0, #31
 8002104:	fa03 f000 	lsl.w	r0, r3, r0
 8002108:	4b01      	ldr	r3, [pc, #4]	; (8002110 <HAL_NVIC_EnableIRQ+0x18>)
 800210a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800210e:	4770      	bx	lr
 8002110:	e000e100 	.word	0xe000e100

08002114 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002114:	3801      	subs	r0, #1
 8002116:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800211a:	d20b      	bcs.n	8002134 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	4a05      	ldr	r2, [pc, #20]	; (8002138 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002122:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002124:	21f0      	movs	r1, #240	; 0xf0
 8002126:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800212e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002130:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002132:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8002134:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002136:	4770      	bx	lr
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800213c:	6803      	ldr	r3, [r0, #0]
{
 800213e:	b510      	push	{r4, lr}
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002140:	4c08      	ldr	r4, [pc, #32]	; (8002164 <DMA_CalcBaseAndBitshift+0x28>)
{
 8002142:	4602      	mov	r2, r0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002144:	b2d9      	uxtb	r1, r3
 8002146:	3910      	subs	r1, #16
 8002148:	2018      	movs	r0, #24
 800214a:	fbb1 f0f0 	udiv	r0, r1, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800214e:	5c20      	ldrb	r0, [r4, r0]
 8002150:	65d0      	str	r0, [r2, #92]	; 0x5c
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002152:	f423 707f 	bic.w	r0, r3, #1020	; 0x3fc
 8002156:	f020 0003 	bic.w	r0, r0, #3
  if (stream_number > 3U)
 800215a:	295f      	cmp	r1, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800215c:	bf88      	it	hi
 800215e:	3004      	addhi	r0, #4
 8002160:	6590      	str	r0, [r2, #88]	; 0x58
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
  }
  
  return hdma->StreamBaseAddress;
}
 8002162:	bd10      	pop	{r4, pc}
 8002164:	0800cac0 	.word	0x0800cac0

08002168 <HAL_DMA_Init>:
{
 8002168:	b570      	push	{r4, r5, r6, lr}
 800216a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff ff66 	bl	800203c <HAL_GetTick>
 8002170:	4605      	mov	r5, r0
  if(hdma == NULL)
 8002172:	2c00      	cmp	r4, #0
 8002174:	d073      	beq.n	800225e <HAL_DMA_Init+0xf6>
  hdma->State = HAL_DMA_STATE_BUSY;
 8002176:	2302      	movs	r3, #2
 8002178:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800217c:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hdma);
 800217e:	2300      	movs	r3, #0
 8002180:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8002184:	6813      	ldr	r3, [r2, #0]
 8002186:	f023 0301 	bic.w	r3, r3, #1
 800218a:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800218c:	6821      	ldr	r1, [r4, #0]
 800218e:	680b      	ldr	r3, [r1, #0]
 8002190:	07d8      	lsls	r0, r3, #31
 8002192:	d42f      	bmi.n	80021f4 <HAL_DMA_Init+0x8c>
  tmp = hdma->Instance->CR;
 8002194:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002196:	4d33      	ldr	r5, [pc, #204]	; (8002264 <HAL_DMA_Init+0xfc>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002198:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800219a:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800219c:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	68e2      	ldr	r2, [r4, #12]
 80021a4:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021a6:	6922      	ldr	r2, [r4, #16]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	6962      	ldr	r2, [r4, #20]
 80021ac:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021ae:	69e2      	ldr	r2, [r4, #28]
 80021b0:	4303      	orrs	r3, r0
 80021b2:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80021b4:	6a22      	ldr	r2, [r4, #32]
 80021b6:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80021ba:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021bc:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80021c0:	bf02      	ittt	eq
 80021c2:	e9d4 560b 	ldrdeq	r5, r6, [r4, #44]	; 0x2c
 80021c6:	4335      	orreq	r5, r6
 80021c8:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80021ca:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80021cc:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021ce:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021d0:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80021d4:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021d8:	d133      	bne.n	8002242 <HAL_DMA_Init+0xda>
    tmp |= hdma->Init.FIFOThreshold;
 80021da:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021dc:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80021de:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021e0:	b37d      	cbz	r5, 8002242 <HAL_DMA_Init+0xda>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021e2:	b990      	cbnz	r0, 800220a <HAL_DMA_Init+0xa2>
  {
    switch (tmp)
 80021e4:	2a01      	cmp	r2, #1
 80021e6:	d021      	beq.n	800222c <HAL_DMA_Init+0xc4>
 80021e8:	f032 0202 	bics.w	r2, r2, #2
 80021ec:	d129      	bne.n	8002242 <HAL_DMA_Init+0xda>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021ee:	01ea      	lsls	r2, r5, #7
 80021f0:	d527      	bpl.n	8002242 <HAL_DMA_Init+0xda>
 80021f2:	e01e      	b.n	8002232 <HAL_DMA_Init+0xca>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f4:	f7ff ff22 	bl	800203c <HAL_GetTick>
 80021f8:	1b40      	subs	r0, r0, r5
 80021fa:	2805      	cmp	r0, #5
 80021fc:	d9c6      	bls.n	800218c <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021fe:	2320      	movs	r3, #32
 8002200:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002202:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8002204:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8002208:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800220a:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800220e:	d114      	bne.n	800223a <HAL_DMA_Init+0xd2>
    switch (tmp)
 8002210:	2a03      	cmp	r2, #3
 8002212:	d816      	bhi.n	8002242 <HAL_DMA_Init+0xda>
 8002214:	a001      	add	r0, pc, #4	; (adr r0, 800221c <HAL_DMA_Init+0xb4>)
 8002216:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800221a:	bf00      	nop
 800221c:	08002233 	.word	0x08002233
 8002220:	080021ef 	.word	0x080021ef
 8002224:	08002233 	.word	0x08002233
 8002228:	0800222d 	.word	0x0800222d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800222c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8002230:	d107      	bne.n	8002242 <HAL_DMA_Init+0xda>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002232:	2340      	movs	r3, #64	; 0x40
 8002234:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8002236:	2001      	movs	r0, #1
 8002238:	e7e4      	b.n	8002204 <HAL_DMA_Init+0x9c>
    switch (tmp)
 800223a:	2a02      	cmp	r2, #2
 800223c:	d9f9      	bls.n	8002232 <HAL_DMA_Init+0xca>
 800223e:	2a03      	cmp	r2, #3
 8002240:	d0d5      	beq.n	80021ee <HAL_DMA_Init+0x86>
  hdma->Instance->FCR = tmp;
 8002242:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002244:	4620      	mov	r0, r4
 8002246:	f7ff ff79 	bl	800213c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800224a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800224c:	233f      	movs	r3, #63	; 0x3f
 800224e:	4093      	lsls	r3, r2
 8002250:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002252:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8002254:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002256:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8002258:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800225c:	e7d4      	b.n	8002208 <HAL_DMA_Init+0xa0>
    return HAL_ERROR;
 800225e:	2001      	movs	r0, #1
 8002260:	e7d2      	b.n	8002208 <HAL_DMA_Init+0xa0>
 8002262:	bf00      	nop
 8002264:	f010803f 	.word	0xf010803f

08002268 <HAL_DMA_DeInit>:
{
 8002268:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800226a:	4605      	mov	r5, r0
 800226c:	b320      	cbz	r0, 80022b8 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800226e:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8002272:	2b02      	cmp	r3, #2
 8002274:	b2dc      	uxtb	r4, r3
 8002276:	d01d      	beq.n	80022b4 <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8002278:	6803      	ldr	r3, [r0, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8002280:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8002282:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8002284:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8002286:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8002288:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800228a:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800228c:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800228e:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8002290:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002292:	f7ff ff53 	bl	800213c <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002296:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8002298:	233f      	movs	r3, #63	; 0x3f
 800229a:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 800229c:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80022a0:	e9c5 4411 	strd	r4, r4, [r5, #68]	; 0x44
  hdma->XferAbortCallback = NULL;
 80022a4:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022a8:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022aa:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80022ac:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80022b0:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
}
 80022b4:	4620      	mov	r0, r4
 80022b6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80022b8:	2401      	movs	r4, #1
 80022ba:	e7fb      	b.n	80022b4 <HAL_DMA_DeInit+0x4c>

080022bc <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80022bc:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80022be:	6804      	ldr	r4, [r0, #0]
 80022c0:	9d04      	ldr	r5, [sp, #16]
 80022c2:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80022c4:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80022c8:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 80022cc:	4333      	orrs	r3, r6
 80022ce:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80022d0:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80022d2:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80022d4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80022d8:	d130      	bne.n	800233c <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80022da:	6886      	ldr	r6, [r0, #8]
 80022dc:	b11e      	cbz	r6, 80022e6 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80022de:	2e01      	cmp	r6, #1
 80022e0:	d103      	bne.n	80022ea <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80022e2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U);
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 80022e6:	63a1      	str	r1, [r4, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 80022e8:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80022ea:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80022ec:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80022f0:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80022f4:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80022f6:	d107      	bne.n	8002308 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 80022f8:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 10U);
 80022fa:	0aa9      	lsrs	r1, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80022fc:	02db      	lsls	r3, r3, #11
 80022fe:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 8002302:	ea43 01d0 	orr.w	r1, r3, r0, lsr #3
 8002306:	e7ee      	b.n	80022e6 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8002308:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800230a:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800230e:	d10a      	bne.n	8002326 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8002310:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 11U);
 8002312:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002314:	0289      	lsls	r1, r1, #10
 8002316:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800231a:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 800231e:	0fd3      	lsrs	r3, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8002320:	ea41 31c3 	orr.w	r1, r1, r3, lsl #15
 8002324:	e7df      	b.n	80022e6 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8002326:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8002328:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800232a:	0209      	lsls	r1, r1, #8
 800232c:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8002330:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 8002334:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8002336:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 800233a:	e7d4      	b.n	80022e6 <DMA2D_SetConfig+0x2a>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800233c:	60e1      	str	r1, [r4, #12]
}
 800233e:	e7d3      	b.n	80022e8 <DMA2D_SetConfig+0x2c>

08002340 <HAL_DMA2D_MspInit>:
}
 8002340:	4770      	bx	lr

08002342 <HAL_DMA2D_Init>:
{
 8002342:	b510      	push	{r4, lr}
  if (hdma2d == NULL)
 8002344:	4604      	mov	r4, r0
 8002346:	b330      	cbz	r0, 8002396 <HAL_DMA2D_Init+0x54>
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002348:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800234c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002350:	b91b      	cbnz	r3, 800235a <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8002352:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8002356:	f7ff fff3 	bl	8002340 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800235a:	6822      	ldr	r2, [r4, #0]
 800235c:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800235e:	2302      	movs	r3, #2
 8002360:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002364:	6813      	ldr	r3, [r2, #0]
 8002366:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800236a:	430b      	orrs	r3, r1
 800236c:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800236e:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002370:	68a1      	ldr	r1, [r4, #8]
 8002372:	f023 0307 	bic.w	r3, r3, #7
 8002376:	430b      	orrs	r3, r1
 8002378:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800237a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800237c:	68e1      	ldr	r1, [r4, #12]
 800237e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002382:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002386:	430b      	orrs	r3, r1
 8002388:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800238a:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800238c:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800238e:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002390:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002394:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002396:	2001      	movs	r0, #1
 8002398:	e7fc      	b.n	8002394 <HAL_DMA2D_Init+0x52>

0800239a <HAL_DMA2D_Start>:
{
 800239a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 800239c:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
 80023a0:	2d01      	cmp	r5, #1
{
 80023a2:	4604      	mov	r4, r0
 80023a4:	f04f 0502 	mov.w	r5, #2
  __HAL_LOCK(hdma2d);
 80023a8:	d00f      	beq.n	80023ca <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80023aa:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80023ae:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80023b0:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdma2d);
 80023b2:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80023b6:	9500      	str	r5, [sp, #0]
 80023b8:	f7ff ff80 	bl	80022bc <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80023bc:	6822      	ldr	r2, [r4, #0]
 80023be:	6813      	ldr	r3, [r2, #0]
 80023c0:	4333      	orrs	r3, r6
 80023c2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80023c4:	2000      	movs	r0, #0
}
 80023c6:	b002      	add	sp, #8
 80023c8:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 80023ca:	4628      	mov	r0, r5
 80023cc:	e7fb      	b.n	80023c6 <HAL_DMA2D_Start+0x2c>

080023ce <HAL_DMA2D_PollForTransfer>:
{
 80023ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	9301      	str	r3, [sp, #4]
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80023d4:	6803      	ldr	r3, [r0, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	07db      	lsls	r3, r3, #31
{
 80023da:	4604      	mov	r4, r0
 80023dc:	460d      	mov	r5, r1
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80023de:	d417      	bmi.n	8002410 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80023e0:	6822      	ldr	r2, [r4, #0]
 80023e2:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80023e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023e6:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 80023e8:	069e      	lsls	r6, r3, #26
 80023ea:	d506      	bpl.n	80023fa <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 80023ec:	f7ff fe26 	bl	800203c <HAL_GetTick>
 80023f0:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80023f2:	6823      	ldr	r3, [r4, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	06d2      	lsls	r2, r2, #27
 80023f8:	d543      	bpl.n	8002482 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80023fa:	6823      	ldr	r3, [r4, #0]
 80023fc:	2212      	movs	r2, #18
 80023fe:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8002400:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002402:	2301      	movs	r3, #1
 8002404:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002408:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 800240c:	b002      	add	sp, #8
 800240e:	bd70      	pop	{r4, r5, r6, pc}
    tickstart = HAL_GetTick();
 8002410:	f7ff fe14 	bl	800203c <HAL_GetTick>
 8002414:	4606      	mov	r6, r0
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002416:	6823      	ldr	r3, [r4, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	0792      	lsls	r2, r2, #30
 800241c:	d4e0      	bmi.n	80023e0 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800241e:	685a      	ldr	r2, [r3, #4]
 8002420:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002422:	9a01      	ldr	r2, [sp, #4]
 8002424:	f012 0f21 	tst.w	r2, #33	; 0x21
 8002428:	d017      	beq.n	800245a <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800242a:	9a01      	ldr	r2, [sp, #4]
 800242c:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800242e:	bf42      	ittt	mi
 8002430:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002432:	f042 0202 	orrmi.w	r2, r2, #2
 8002436:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002438:	9a01      	ldr	r2, [sp, #4]
 800243a:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800243c:	bf42      	ittt	mi
 800243e:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002440:	f042 0201 	orrmi.w	r2, r2, #1
 8002444:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002446:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002448:	609a      	str	r2, [r3, #8]
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800244a:	2304      	movs	r3, #4
 800244c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8002450:	2300      	movs	r3, #0
 8002452:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8002456:	2001      	movs	r0, #1
 8002458:	e7d8      	b.n	800240c <HAL_DMA2D_PollForTransfer+0x3e>
      if (Timeout != HAL_MAX_DELAY)
 800245a:	1c69      	adds	r1, r5, #1
 800245c:	d0dc      	beq.n	8002418 <HAL_DMA2D_PollForTransfer+0x4a>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800245e:	f7ff fded 	bl	800203c <HAL_GetTick>
 8002462:	1b80      	subs	r0, r0, r6
 8002464:	42a8      	cmp	r0, r5
 8002466:	d801      	bhi.n	800246c <HAL_DMA2D_PollForTransfer+0x9e>
 8002468:	2d00      	cmp	r5, #0
 800246a:	d1d4      	bne.n	8002416 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800246c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800246e:	f043 0320 	orr.w	r3, r3, #32
 8002472:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002474:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 8002476:	2300      	movs	r3, #0
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002478:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 800247c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8002480:	e7c4      	b.n	800240c <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002482:	685a      	ldr	r2, [r3, #4]
 8002484:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002486:	9a01      	ldr	r2, [sp, #4]
 8002488:	f012 0f29 	tst.w	r2, #41	; 0x29
 800248c:	d016      	beq.n	80024bc <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800248e:	9a01      	ldr	r2, [sp, #4]
 8002490:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002492:	bf42      	ittt	mi
 8002494:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8002496:	f042 0204 	orrmi.w	r2, r2, #4
 800249a:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800249c:	9a01      	ldr	r2, [sp, #4]
 800249e:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80024a0:	bf42      	ittt	mi
 80024a2:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80024a4:	f042 0202 	orrmi.w	r2, r2, #2
 80024a8:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80024aa:	9a01      	ldr	r2, [sp, #4]
 80024ac:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80024ae:	bf42      	ittt	mi
 80024b0:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 80024b2:	f042 0201 	orrmi.w	r2, r2, #1
 80024b6:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80024b8:	2229      	movs	r2, #41	; 0x29
 80024ba:	e7c5      	b.n	8002448 <HAL_DMA2D_PollForTransfer+0x7a>
      if (Timeout != HAL_MAX_DELAY)
 80024bc:	1c69      	adds	r1, r5, #1
 80024be:	d099      	beq.n	80023f4 <HAL_DMA2D_PollForTransfer+0x26>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024c0:	f7ff fdbc 	bl	800203c <HAL_GetTick>
 80024c4:	1b80      	subs	r0, r0, r6
 80024c6:	42a8      	cmp	r0, r5
 80024c8:	d8d0      	bhi.n	800246c <HAL_DMA2D_PollForTransfer+0x9e>
 80024ca:	2d00      	cmp	r5, #0
 80024cc:	d191      	bne.n	80023f2 <HAL_DMA2D_PollForTransfer+0x24>
 80024ce:	e7cd      	b.n	800246c <HAL_DMA2D_PollForTransfer+0x9e>

080024d0 <HAL_DMA2D_ConfigLayer>:
{
 80024d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 80024d2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	f04f 0302 	mov.w	r3, #2
 80024dc:	d02b      	beq.n	8002536 <HAL_DMA2D_ConfigLayer+0x66>
 80024de:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80024e0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80024e4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80024e8:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 80024ec:	e9d3 4207 	ldrd	r4, r2, [r3, #28]
 80024f0:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 80024f2:	4f18      	ldr	r7, [pc, #96]	; (8002554 <HAL_DMA2D_ConfigLayer+0x84>)
 80024f4:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80024f8:	3c09      	subs	r4, #9
 80024fa:	2c01      	cmp	r4, #1
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80024fc:	bf9c      	itt	ls
 80024fe:	f005 437f 	andls.w	r3, r5, #4278190080	; 0xff000000
 8002502:	431a      	orrls	r2, r3
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002504:	ea4f 1601 	mov.w	r6, r1, lsl #4
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002508:	6803      	ldr	r3, [r0, #0]
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800250a:	bf88      	it	hi
 800250c:	ea42 6205 	orrhi.w	r2, r2, r5, lsl #24
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002510:	b999      	cbnz	r1, 800253a <HAL_DMA2D_ConfigLayer+0x6a>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002512:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002514:	4039      	ands	r1, r7
 8002516:	430a      	orrs	r2, r1
 8002518:	625a      	str	r2, [r3, #36]	; 0x24
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800251a:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800251c:	6982      	ldr	r2, [r0, #24]
 800251e:	619a      	str	r2, [r3, #24]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002520:	d803      	bhi.n	800252a <HAL_DMA2D_ConfigLayer+0x5a>
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002522:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8002524:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002528:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800252a:	2301      	movs	r3, #1
 800252c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8002530:	2300      	movs	r3, #0
 8002532:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8002536:	4618      	mov	r0, r3
}
 8002538:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800253a:	69d9      	ldr	r1, [r3, #28]
 800253c:	4039      	ands	r1, r7
 800253e:	430a      	orrs	r2, r1
 8002540:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002542:	1982      	adds	r2, r0, r6
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002544:	2c01      	cmp	r4, #1
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002546:	6992      	ldr	r2, [r2, #24]
 8002548:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800254a:	bf9c      	itt	ls
 800254c:	f025 457f 	bicls.w	r5, r5, #4278190080	; 0xff000000
 8002550:	621d      	strls	r5, [r3, #32]
 8002552:	e7ea      	b.n	800252a <HAL_DMA2D_ConfigLayer+0x5a>
 8002554:	00fcfff0 	.word	0x00fcfff0

08002558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255c:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8002720 <HAL_GPIO_Init+0x1c8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002560:	4a6d      	ldr	r2, [pc, #436]	; (8002718 <HAL_GPIO_Init+0x1c0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002562:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002564:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8002566:	2401      	movs	r4, #1
 8002568:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800256a:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800256e:	43ac      	bics	r4, r5
 8002570:	f040 80b9 	bne.w	80026e6 <HAL_GPIO_Init+0x18e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002574:	684d      	ldr	r5, [r1, #4]
 8002576:	f005 0403 	and.w	r4, r5, #3
 800257a:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800257e:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002580:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002582:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002586:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002588:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800258c:	d834      	bhi.n	80025f8 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800258e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002590:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002594:	68cf      	ldr	r7, [r1, #12]
 8002596:	fa07 f708 	lsl.w	r7, r7, r8
 800259a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800259e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80025a0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a2:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025a6:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80025aa:	409f      	lsls	r7, r3
 80025ac:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80025b0:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80025b2:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025b4:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b8:	688f      	ldr	r7, [r1, #8]
 80025ba:	fa07 f708 	lsl.w	r7, r7, r8
 80025be:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c2:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80025c4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025c6:	d119      	bne.n	80025fc <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 80025c8:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80025cc:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025d0:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80025d4:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025d8:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80025dc:	f04f 0e0f 	mov.w	lr, #15
 80025e0:	fa0e fe0b 	lsl.w	lr, lr, fp
 80025e4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e8:	690f      	ldr	r7, [r1, #16]
 80025ea:	fa07 f70b 	lsl.w	r7, r7, fp
 80025ee:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80025f2:	f8ca 7020 	str.w	r7, [sl, #32]
 80025f6:	e001      	b.n	80025fc <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025f8:	2c03      	cmp	r4, #3
 80025fa:	d1da      	bne.n	80025b2 <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80025fc:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025fe:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002602:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002604:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002606:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 800260a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800260c:	d06b      	beq.n	80026e6 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	f04f 0a00 	mov.w	sl, #0
 8002612:	f8cd a004 	str.w	sl, [sp, #4]
 8002616:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800261a:	4c40      	ldr	r4, [pc, #256]	; (800271c <HAL_GPIO_Init+0x1c4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800261c:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8002620:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8002624:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8002628:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800262c:	9601      	str	r6, [sp, #4]
 800262e:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8002630:	f023 0603 	bic.w	r6, r3, #3
 8002634:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8002638:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800263c:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8002640:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002644:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002648:	270f      	movs	r7, #15
 800264a:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800264e:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002650:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002654:	d04e      	beq.n	80026f4 <HAL_GPIO_Init+0x19c>
 8002656:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800265a:	42a0      	cmp	r0, r4
 800265c:	d04c      	beq.n	80026f8 <HAL_GPIO_Init+0x1a0>
 800265e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002662:	42a0      	cmp	r0, r4
 8002664:	d04a      	beq.n	80026fc <HAL_GPIO_Init+0x1a4>
 8002666:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800266a:	42a0      	cmp	r0, r4
 800266c:	d048      	beq.n	8002700 <HAL_GPIO_Init+0x1a8>
 800266e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002672:	42a0      	cmp	r0, r4
 8002674:	d046      	beq.n	8002704 <HAL_GPIO_Init+0x1ac>
 8002676:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800267a:	42a0      	cmp	r0, r4
 800267c:	d044      	beq.n	8002708 <HAL_GPIO_Init+0x1b0>
 800267e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002682:	42a0      	cmp	r0, r4
 8002684:	d042      	beq.n	800270c <HAL_GPIO_Init+0x1b4>
 8002686:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800268a:	42a0      	cmp	r0, r4
 800268c:	d040      	beq.n	8002710 <HAL_GPIO_Init+0x1b8>
 800268e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002692:	42a0      	cmp	r0, r4
 8002694:	d03e      	beq.n	8002714 <HAL_GPIO_Init+0x1bc>
 8002696:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800269a:	42a0      	cmp	r0, r4
 800269c:	bf0c      	ite	eq
 800269e:	2409      	moveq	r4, #9
 80026a0:	240a      	movne	r4, #10
 80026a2:	fa04 f40e 	lsl.w	r4, r4, lr
 80026a6:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a8:	60b4      	str	r4, [r6, #8]
        temp = EXTI->RTSR;
 80026aa:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 80026ac:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026b0:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80026b2:	bf54      	ite	pl
 80026b4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80026b6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80026ba:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80026bc:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026be:	02af      	lsls	r7, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80026c0:	bf54      	ite	pl
 80026c2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80026c4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80026c8:	60d4      	str	r4, [r2, #12]

        temp = EXTI->EMR;
 80026ca:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026cc:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80026ce:	bf54      	ite	pl
 80026d0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80026d2:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80026d6:	6054      	str	r4, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d8:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026da:	03ed      	lsls	r5, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80026dc:	bf54      	ite	pl
 80026de:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80026e0:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80026e4:	6014      	str	r4, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026e6:	3301      	adds	r3, #1
 80026e8:	2b10      	cmp	r3, #16
 80026ea:	f47f af3b 	bne.w	8002564 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80026ee:	b003      	add	sp, #12
 80026f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026f4:	4654      	mov	r4, sl
 80026f6:	e7d4      	b.n	80026a2 <HAL_GPIO_Init+0x14a>
 80026f8:	2401      	movs	r4, #1
 80026fa:	e7d2      	b.n	80026a2 <HAL_GPIO_Init+0x14a>
 80026fc:	2402      	movs	r4, #2
 80026fe:	e7d0      	b.n	80026a2 <HAL_GPIO_Init+0x14a>
 8002700:	2403      	movs	r4, #3
 8002702:	e7ce      	b.n	80026a2 <HAL_GPIO_Init+0x14a>
 8002704:	2404      	movs	r4, #4
 8002706:	e7cc      	b.n	80026a2 <HAL_GPIO_Init+0x14a>
 8002708:	2405      	movs	r4, #5
 800270a:	e7ca      	b.n	80026a2 <HAL_GPIO_Init+0x14a>
 800270c:	2406      	movs	r4, #6
 800270e:	e7c8      	b.n	80026a2 <HAL_GPIO_Init+0x14a>
 8002710:	2407      	movs	r4, #7
 8002712:	e7c6      	b.n	80026a2 <HAL_GPIO_Init+0x14a>
 8002714:	2408      	movs	r4, #8
 8002716:	e7c4      	b.n	80026a2 <HAL_GPIO_Init+0x14a>
 8002718:	40013c00 	.word	0x40013c00
 800271c:	40020000 	.word	0x40020000
 8002720:	40023800 	.word	0x40023800

08002724 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002724:	b10a      	cbz	r2, 800272a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002726:	6181      	str	r1, [r0, #24]
  }
}
 8002728:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800272a:	0409      	lsls	r1, r1, #16
 800272c:	e7fb      	b.n	8002726 <HAL_GPIO_WritePin+0x2>

0800272e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800272e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002732:	4605      	mov	r5, r0
 8002734:	b085      	sub	sp, #20
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002736:	f895 42f8 	ldrb.w	r4, [r5, #760]	; 0x2f8
{
 800273a:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
 800273e:	f89d 8034 	ldrb.w	r8, [sp, #52]	; 0x34
 8002742:	f8bd 9038 	ldrh.w	r9, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8002746:	2c01      	cmp	r4, #1
 8002748:	d025      	beq.n	8002796 <HAL_HCD_HC_Init+0x68>
 800274a:	2401      	movs	r4, #1
 800274c:	f885 42f8 	strb.w	r4, [r5, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002750:	242c      	movs	r4, #44	; 0x2c
 8002752:	fb04 5401 	mla	r4, r4, r1, r5
  hhcd->hc[ch_num].max_packet = mps;
  hhcd->hc[ch_num].ch_num = ch_num;
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
 8002756:	09d0      	lsrs	r0, r2, #7
  hhcd->hc[ch_num].do_ping = 0U;
 8002758:	2700      	movs	r7, #0
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800275a:	f002 067f 	and.w	r6, r2, #127	; 0x7f
  hhcd->hc[ch_num].do_ping = 0U;
 800275e:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002762:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  hhcd->hc[ch_num].ch_num = ch_num;
 8002766:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 800276a:	f884 803f 	strb.w	r8, [r4, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800276e:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
 8002772:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8002776:	f884 e03c 	strb.w	lr, [r4, #60]	; 0x3c
  hhcd->hc[ch_num].max_packet = mps;
 800277a:	f8a4 9040 	strh.w	r9, [r4, #64]	; 0x40

  status =  USB_HC_Init(hhcd->Instance,
 800277e:	6828      	ldr	r0, [r5, #0]
 8002780:	f8cd e000 	str.w	lr, [sp]
 8002784:	e9cd 8901 	strd	r8, r9, [sp, #4]
 8002788:	f002 fc7e 	bl	8005088 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800278c:	f885 72f8 	strb.w	r7, [r5, #760]	; 0x2f8

  return status;
}
 8002790:	b005      	add	sp, #20
 8002792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hhcd);
 8002796:	2002      	movs	r0, #2
 8002798:	e7fa      	b.n	8002790 <HAL_HCD_HC_Init+0x62>

0800279a <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800279a:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 800279c:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 80027a0:	2b01      	cmp	r3, #1
{
 80027a2:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80027a4:	d009      	beq.n	80027ba <HAL_HCD_HC_Halt+0x20>
 80027a6:	2301      	movs	r3, #1
 80027a8:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027ac:	6800      	ldr	r0, [r0, #0]
 80027ae:	f002 fcfa 	bl	80051a6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027b2:	2000      	movs	r0, #0
 80027b4:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8

  return status;
}
 80027b8:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80027ba:	2002      	movs	r0, #2
 80027bc:	e7fc      	b.n	80027b8 <HAL_HCD_HC_Halt+0x1e>

080027be <HAL_HCD_Init>:
{
 80027be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 80027c2:	4606      	mov	r6, r0
{
 80027c4:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 80027c6:	2800      	cmp	r0, #0
 80027c8:	d043      	beq.n	8002852 <HAL_HCD_Init+0x94>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80027ca:	f890 32f9 	ldrb.w	r3, [r0, #761]	; 0x2f9
  USBx = hhcd->Instance;
 80027ce:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 80027d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80027d4:	b91b      	cbnz	r3, 80027de <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 80027d6:	f880 22f8 	strb.w	r2, [r0, #760]	; 0x2f8
    HAL_HCD_MspInit(hhcd);
 80027da:	f003 fbe9 	bl	8005fb0 <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 80027de:	2303      	movs	r3, #3
 80027e0:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 80027e6:	4634      	mov	r4, r6
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80027e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 80027ec:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 80027f0:	bf08      	it	eq
 80027f2:	6133      	streq	r3, [r6, #16]
  __HAL_HCD_DISABLE(hhcd);
 80027f4:	f002 fab6 	bl	8004d64 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80027f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027fa:	466d      	mov	r5, sp
 80027fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002800:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002802:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002806:	e885 0003 	stmia.w	r5, {r0, r1}
 800280a:	f106 0804 	add.w	r8, r6, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800280e:	4637      	mov	r7, r6
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002810:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8002814:	6830      	ldr	r0, [r6, #0]
 8002816:	f002 fa5f 	bl	8004cd8 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800281a:	f857 0b10 	ldr.w	r0, [r7], #16
 800281e:	2101      	movs	r1, #1
 8002820:	f002 faa6 	bl	8004d70 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002824:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8002826:	46ec      	mov	ip, sp
 8002828:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800282c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800282e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002832:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002836:	e885 0003 	stmia.w	r5, {r0, r1}
 800283a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800283e:	6830      	ldr	r0, [r6, #0]
 8002840:	f002 fb4c 	bl	8004edc <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8002844:	2301      	movs	r3, #1
 8002846:	f886 32f9 	strb.w	r3, [r6, #761]	; 0x2f9
  return HAL_OK;
 800284a:	2000      	movs	r0, #0
}
 800284c:	b00a      	add	sp, #40	; 0x28
 800284e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8002852:	2001      	movs	r0, #1
 8002854:	e7fa      	b.n	800284c <HAL_HCD_Init+0x8e>
	...

08002858 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002858:	b4f0      	push	{r4, r5, r6, r7}
  hhcd->hc[ch_num].ep_is_in = direction;
 800285a:	262c      	movs	r6, #44	; 0x2c
 800285c:	fb06 0601 	mla	r6, r6, r1, r0
{
 8002860:	f89d 7010 	ldrb.w	r7, [sp, #16]
 8002864:	9d05      	ldr	r5, [sp, #20]
 8002866:	f8bd 4018 	ldrh.w	r4, [sp, #24]
 800286a:	f89d c01c 	ldrb.w	ip, [sp, #28]
  hhcd->hc[ch_num].ep_is_in = direction;
 800286e:	f886 203b 	strb.w	r2, [r6, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002872:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f

  if (token == 0U)
 8002876:	b97f      	cbnz	r7, 8002898 <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002878:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800287a:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800287c:	f886 7042 	strb.w	r7, [r6, #66]	; 0x42
    hhcd->hc[ch_num].do_ping = do_ping;
 8002880:	f886 c03d 	strb.w	ip, [r6, #61]	; 0x3d
  switch (ep_type)
 8002884:	d03c      	beq.n	8002900 <HAL_HCD_HC_SubmitRequest+0xa8>
 8002886:	42bb      	cmp	r3, r7
 8002888:	d03a      	beq.n	8002900 <HAL_HCD_HC_SubmitRequest+0xa8>
 800288a:	2b01      	cmp	r3, #1
 800288c:	d11f      	bne.n	80028ce <HAL_HCD_HC_SubmitRequest+0x76>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800288e:	232c      	movs	r3, #44	; 0x2c
 8002890:	fb03 0301 	mla	r3, r3, r1, r0
 8002894:	2200      	movs	r2, #0
 8002896:	e030      	b.n	80028fa <HAL_HCD_HC_SubmitRequest+0xa2>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002898:	f04f 0c02 	mov.w	ip, #2
 800289c:	f886 c042 	strb.w	ip, [r6, #66]	; 0x42
  switch (ep_type)
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d814      	bhi.n	80028ce <HAL_HCD_HC_SubmitRequest+0x76>
 80028a4:	a601      	add	r6, pc, #4	; (adr r6, 80028ac <HAL_HCD_HC_SubmitRequest+0x54>)
 80028a6:	f856 f023 	ldr.w	pc, [r6, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	080028bd 	.word	0x080028bd
 80028b0:	0800288f 	.word	0x0800288f
 80028b4:	08002901 	.word	0x08002901
 80028b8:	08002901 	.word	0x08002901
      if ((token == 1U) && (direction == 0U)) /*send data */
 80028bc:	2f01      	cmp	r7, #1
 80028be:	d106      	bne.n	80028ce <HAL_HCD_HC_SubmitRequest+0x76>
 80028c0:	b92a      	cbnz	r2, 80028ce <HAL_HCD_HC_SubmitRequest+0x76>
        if (length == 0U)
 80028c2:	232c      	movs	r3, #44	; 0x2c
          hhcd->hc[ch_num].toggle_out = 1U;
 80028c4:	fb03 0301 	mla	r3, r3, r1, r0
        if (length == 0U)
 80028c8:	b99c      	cbnz	r4, 80028f2 <HAL_HCD_HC_SubmitRequest+0x9a>
          hhcd->hc[ch_num].toggle_out = 1U;
 80028ca:	f883 7055 	strb.w	r7, [r3, #85]	; 0x55

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80028ce:	222c      	movs	r2, #44	; 0x2c
 80028d0:	fb02 0301 	mla	r3, r2, r1, r0
  hhcd->hc[ch_num].xfer_len  = length;
 80028d4:	64dc      	str	r4, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].urb_state = URB_IDLE;
  hhcd->hc[ch_num].xfer_count = 0U;
 80028d6:	2400      	movs	r4, #0
  hhcd->hc[ch_num].ch_num = ch_num;
 80028d8:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80028dc:	f8a3 4060 	strh.w	r4, [r3, #96]	; 0x60
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80028e0:	4619      	mov	r1, r3
 80028e2:	7c02      	ldrb	r2, [r0, #16]
  hhcd->hc[ch_num].xfer_buff = pbuff;
 80028e4:	645d      	str	r5, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_count = 0U;
 80028e6:	651c      	str	r4, [r3, #80]	; 0x50
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80028e8:	6800      	ldr	r0, [r0, #0]
}
 80028ea:	bcf0      	pop	{r4, r5, r6, r7}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80028ec:	3138      	adds	r1, #56	; 0x38
 80028ee:	f002 bcc9 	b.w	8005284 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80028f2:	f893 6055 	ldrb.w	r6, [r3, #85]	; 0x55
 80028f6:	2e00      	cmp	r6, #0
 80028f8:	d1e9      	bne.n	80028ce <HAL_HCD_HC_SubmitRequest+0x76>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      break;
 80028fe:	e7e6      	b.n	80028ce <HAL_HCD_HC_SubmitRequest+0x76>
      if (direction == 0U)
 8002900:	232c      	movs	r3, #44	; 0x2c
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002902:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8002906:	b92a      	cbnz	r2, 8002914 <HAL_HCD_HC_SubmitRequest+0xbc>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002908:	f893 6055 	ldrb.w	r6, [r3, #85]	; 0x55
 800290c:	2e00      	cmp	r6, #0
 800290e:	d0f4      	beq.n	80028fa <HAL_HCD_HC_SubmitRequest+0xa2>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002910:	2202      	movs	r2, #2
 8002912:	e7f2      	b.n	80028fa <HAL_HCD_HC_SubmitRequest+0xa2>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002914:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8002918:	2a00      	cmp	r2, #0
 800291a:	d1f9      	bne.n	8002910 <HAL_HCD_HC_SubmitRequest+0xb8>
 800291c:	e7ed      	b.n	80028fa <HAL_HCD_HC_SubmitRequest+0xa2>
 800291e:	bf00      	nop

08002920 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002924:	6806      	ldr	r6, [r0, #0]
{
 8002926:	b085      	sub	sp, #20
 8002928:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800292a:	4630      	mov	r0, r6
 800292c:	f002 fad1 	bl	8004ed2 <USB_GetMode>
 8002930:	2801      	cmp	r0, #1
 8002932:	f040 80f7 	bne.w	8002b24 <HAL_HCD_IRQHandler+0x204>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002936:	6820      	ldr	r0, [r4, #0]
 8002938:	f002 fac7 	bl	8004eca <USB_ReadInterrupts>
 800293c:	2800      	cmp	r0, #0
 800293e:	f000 80f1 	beq.w	8002b24 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002942:	6820      	ldr	r0, [r4, #0]
 8002944:	f002 fac1 	bl	8004eca <USB_ReadInterrupts>
 8002948:	0283      	lsls	r3, r0, #10
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800294a:	bf48      	it	mi
 800294c:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800294e:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002950:	bf44      	itt	mi
 8002952:	f44f 1200 	movmi.w	r2, #2097152	; 0x200000
 8002956:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002958:	f002 fab7 	bl	8004eca <USB_ReadInterrupts>
 800295c:	02c7      	lsls	r7, r0, #11
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800295e:	bf48      	it	mi
 8002960:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002962:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002964:	bf44      	itt	mi
 8002966:	f44f 1280 	movmi.w	r2, #1048576	; 0x100000
 800296a:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800296c:	f002 faad 	bl	8004eca <USB_ReadInterrupts>
 8002970:	0145      	lsls	r5, r0, #5
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002972:	bf48      	it	mi
 8002974:	6823      	ldrmi	r3, [r4, #0]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002976:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002978:	bf44      	itt	mi
 800297a:	f04f 6280 	movmi.w	r2, #67108864	; 0x4000000
 800297e:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002980:	f002 faa3 	bl	8004eca <USB_ReadInterrupts>
 8002984:	0780      	lsls	r0, r0, #30
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002986:	bf48      	it	mi
 8002988:	6823      	ldrmi	r3, [r4, #0]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800298a:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800298c:	bf44      	itt	mi
 800298e:	2202      	movmi	r2, #2
 8002990:	615a      	strmi	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002992:	f002 fa9a 	bl	8004eca <USB_ReadInterrupts>
 8002996:	0081      	lsls	r1, r0, #2
 8002998:	d515      	bpl.n	80029c6 <HAL_HCD_IRQHandler+0xa6>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800299a:	6823      	ldr	r3, [r4, #0]
 800299c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80029a0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80029a2:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 80029a6:	07da      	lsls	r2, r3, #31
 80029a8:	d40d      	bmi.n	80029c6 <HAL_HCD_IRQHandler+0xa6>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80029aa:	2110      	movs	r1, #16
 80029ac:	4630      	mov	r0, r6
 80029ae:	f002 fa0f 	bl	8004dd0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80029b2:	4630      	mov	r0, r6
 80029b4:	f002 fa32 	bl	8004e1c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80029b8:	6820      	ldr	r0, [r4, #0]
 80029ba:	2101      	movs	r1, #1
 80029bc:	f002 fafa 	bl	8004fb4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80029c0:	4620      	mov	r0, r4
 80029c2:	f003 fb5b 	bl	800607c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80029c6:	6820      	ldr	r0, [r4, #0]
 80029c8:	f002 fa7f 	bl	8004eca <USB_ReadInterrupts>
 80029cc:	01c3      	lsls	r3, r0, #7
 80029ce:	d53d      	bpl.n	8002a4c <HAL_HCD_IRQHandler+0x12c>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029d0:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80029d2:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80029d6:	9302      	str	r3, [sp, #8]
  hprt0_dup = USBx_HPRT0;
 80029d8:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 80029dc:	9303      	str	r3, [sp, #12]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80029de:	9b03      	ldr	r3, [sp, #12]
 80029e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80029e4:	9303      	str	r3, [sp, #12]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80029e6:	9b02      	ldr	r3, [sp, #8]
 80029e8:	079f      	lsls	r7, r3, #30
 80029ea:	d509      	bpl.n	8002a00 <HAL_HCD_IRQHandler+0xe0>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80029ec:	9b02      	ldr	r3, [sp, #8]
 80029ee:	07d8      	lsls	r0, r3, #31
 80029f0:	d502      	bpl.n	80029f8 <HAL_HCD_IRQHandler+0xd8>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80029f2:	4620      	mov	r0, r4
 80029f4:	f003 fb3e 	bl	8006074 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80029f8:	9b03      	ldr	r3, [sp, #12]
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	9303      	str	r3, [sp, #12]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002a00:	9b02      	ldr	r3, [sp, #8]
 8002a02:	0719      	lsls	r1, r3, #28
 8002a04:	d518      	bpl.n	8002a38 <HAL_HCD_IRQHandler+0x118>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002a06:	9b03      	ldr	r3, [sp, #12]
 8002a08:	f043 0308 	orr.w	r3, r3, #8
 8002a0c:	9303      	str	r3, [sp, #12]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002a0e:	9b02      	ldr	r3, [sp, #8]
 8002a10:	075a      	lsls	r2, r3, #29
 8002a12:	f140 8092 	bpl.w	8002b3a <HAL_HCD_IRQHandler+0x21a>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002a16:	69a1      	ldr	r1, [r4, #24]
 8002a18:	2902      	cmp	r1, #2
 8002a1a:	f040 8086 	bne.w	8002b2a <HAL_HCD_IRQHandler+0x20a>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a1e:	9b02      	ldr	r3, [sp, #8]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002a20:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002a22:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002a26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002a2a:	bf18      	it	ne
 8002a2c:	2101      	movne	r1, #1
 8002a2e:	f002 fac1 	bl	8004fb4 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002a32:	4620      	mov	r0, r4
 8002a34:	f003 fb26 	bl	8006084 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002a38:	9b02      	ldr	r3, [sp, #8]
 8002a3a:	069b      	lsls	r3, r3, #26
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002a3c:	bf42      	ittt	mi
 8002a3e:	9b03      	ldrmi	r3, [sp, #12]
 8002a40:	f043 0320 	orrmi.w	r3, r3, #32
 8002a44:	9303      	strmi	r3, [sp, #12]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002a46:	9b03      	ldr	r3, [sp, #12]
 8002a48:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002a4c:	6820      	ldr	r0, [r4, #0]
 8002a4e:	f002 fa3c 	bl	8004eca <USB_ReadInterrupts>
 8002a52:	0707      	lsls	r7, r0, #28
 8002a54:	d505      	bpl.n	8002a62 <HAL_HCD_IRQHandler+0x142>
      HAL_HCD_SOF_Callback(hhcd);
 8002a56:	4620      	mov	r0, r4
 8002a58:	f003 fb08 	bl	800606c <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002a5c:	6823      	ldr	r3, [r4, #0]
 8002a5e:	2208      	movs	r2, #8
 8002a60:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002a62:	6820      	ldr	r0, [r4, #0]
 8002a64:	f002 fa31 	bl	8004eca <USB_ReadInterrupts>
 8002a68:	06c5      	lsls	r5, r0, #27
 8002a6a:	d544      	bpl.n	8002af6 <HAL_HCD_IRQHandler+0x1d6>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a6c:	6827      	ldr	r7, [r4, #0]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	f023 0310 	bic.w	r3, r3, #16
 8002a74:	61bb      	str	r3, [r7, #24]
  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002a76:	6a3b      	ldr	r3, [r7, #32]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002a78:	f3c3 4243 	ubfx	r2, r3, #17, #4
  switch (pktsts)
 8002a7c:	2a02      	cmp	r2, #2
 8002a7e:	d135      	bne.n	8002aec <HAL_HCD_IRQHandler+0x1cc>
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a80:	f3c3 190a 	ubfx	r9, r3, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a84:	f1b9 0f00 	cmp.w	r9, #0
 8002a88:	d030      	beq.n	8002aec <HAL_HCD_IRQHandler+0x1cc>
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002a8a:	f003 080f 	and.w	r8, r3, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002a8e:	252c      	movs	r5, #44	; 0x2c
 8002a90:	fb05 4508 	mla	r5, r5, r8, r4
 8002a94:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8002a96:	b349      	cbz	r1, 8002aec <HAL_HCD_IRQHandler+0x1cc>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002a98:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8002a9a:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 8002a9c:	444b      	add	r3, r9
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d84f      	bhi.n	8002b42 <HAL_HCD_IRQHandler+0x222>
          (void)USB_ReadPacket(hhcd->Instance,
 8002aa2:	464a      	mov	r2, r9
 8002aa4:	4638      	mov	r0, r7
 8002aa6:	f002 f9f0 	bl	8004e8a <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002aaa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002aac:	f8b5 1040 	ldrh.w	r1, [r5, #64]	; 0x40
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ab0:	444b      	add	r3, r9
 8002ab2:	646b      	str	r3, [r5, #68]	; 0x44
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ab4:	f507 67a0 	add.w	r7, r7, #1280	; 0x500
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ab8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002aba:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002abe:	eb07 1848 	add.w	r8, r7, r8, lsl #5
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ac2:	444b      	add	r3, r9
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ac4:	4589      	cmp	r9, r1
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002ac6:	652b      	str	r3, [r5, #80]	; 0x50
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ac8:	f8d8 3010 	ldr.w	r3, [r8, #16]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002acc:	d10e      	bne.n	8002aec <HAL_HCD_IRQHandler+0x1cc>
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002ace:	f3c3 43c9 	ubfx	r3, r3, #19, #10
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002ad2:	b15b      	cbz	r3, 8002aec <HAL_HCD_IRQHandler+0x1cc>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ad4:	59d3      	ldr	r3, [r2, r7]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ad6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ada:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002ade:	51d3      	str	r3, [r2, r7]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002ae0:	f895 3054 	ldrb.w	r3, [r5, #84]	; 0x54
 8002ae4:	f083 0301 	eor.w	r3, r3, #1
 8002ae8:	f885 3054 	strb.w	r3, [r5, #84]	; 0x54
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002aec:	6822      	ldr	r2, [r4, #0]
 8002aee:	6993      	ldr	r3, [r2, #24]
 8002af0:	f043 0310 	orr.w	r3, r3, #16
 8002af4:	6193      	str	r3, [r2, #24]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002af6:	6820      	ldr	r0, [r4, #0]
 8002af8:	f002 f9e7 	bl	8004eca <USB_ReadInterrupts>
 8002afc:	0180      	lsls	r0, r0, #6
 8002afe:	d511      	bpl.n	8002b24 <HAL_HCD_IRQHandler+0x204>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002b00:	6820      	ldr	r0, [r4, #0]
 8002b02:	f002 fb4b 	bl	800519c <USB_HC_ReadInterrupt>
 8002b06:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
 8002b0a:	9001      	str	r0, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b0c:	9300      	str	r3, [sp, #0]
 8002b0e:	f04f 0900 	mov.w	r9, #0
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b12:	252c      	movs	r5, #44	; 0x2c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b14:	2702      	movs	r7, #2
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b16:	68a3      	ldr	r3, [r4, #8]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b18:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002b1a:	454b      	cmp	r3, r9
 8002b1c:	d815      	bhi.n	8002b4a <HAL_HCD_IRQHandler+0x22a>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002b1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b22:	6143      	str	r3, [r0, #20]
}
 8002b24:	b005      	add	sp, #20
 8002b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002b2a:	68e3      	ldr	r3, [r4, #12]
 8002b2c:	2b01      	cmp	r3, #1
          USBx_HOST->HFIR = 60000U;
 8002b2e:	bf04      	itt	eq
 8002b30:	f64e 2260 	movweq	r2, #60000	; 0xea60
 8002b34:	f8c5 2404 	streq.w	r2, [r5, #1028]	; 0x404
 8002b38:	e77b      	b.n	8002a32 <HAL_HCD_IRQHandler+0x112>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f003 faa6 	bl	800608c <HAL_HCD_PortDisabled_Callback>
 8002b40:	e77a      	b.n	8002a38 <HAL_HCD_IRQHandler+0x118>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002b42:	2304      	movs	r3, #4
 8002b44:	f885 3060 	strb.w	r3, [r5, #96]	; 0x60
 8002b48:	e7d0      	b.n	8002aec <HAL_HCD_IRQHandler+0x1cc>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002b4a:	9a01      	ldr	r2, [sp, #4]
 8002b4c:	f009 030f 	and.w	r3, r9, #15
 8002b50:	fa22 f303 	lsr.w	r3, r2, r3
 8002b54:	07d9      	lsls	r1, r3, #31
 8002b56:	f140 8085 	bpl.w	8002c64 <HAL_HCD_IRQHandler+0x344>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b5a:	9b00      	ldr	r3, [sp, #0]
 8002b5c:	fa5f fb89 	uxtb.w	fp, r9
 8002b60:	681a      	ldr	r2, [r3, #0]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b62:	f500 6aa0 	add.w	sl, r0, #1280	; 0x500
 8002b66:	eb0a 164b 	add.w	r6, sl, fp, lsl #5
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b6a:	f412 4f00 	tst.w	r2, #32768	; 0x8000
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b6e:	ea4f 184b 	mov.w	r8, fp, lsl #5
 8002b72:	68b2      	ldr	r2, [r6, #8]
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002b74:	f000 80e2 	beq.w	8002d3c <HAL_HCD_IRQHandler+0x41c>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002b78:	0752      	lsls	r2, r2, #29
 8002b7a:	d506      	bpl.n	8002b8a <HAL_HCD_IRQHandler+0x26a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002b7c:	2204      	movs	r2, #4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002b7e:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b80:	f04f 0c06 	mov.w	ip, #6
 8002b84:	fb05 420b 	mla	r2, r5, fp, r4
 8002b88:	e009      	b.n	8002b9e <HAL_HCD_IRQHandler+0x27e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002b8a:	68b2      	ldr	r2, [r6, #8]
 8002b8c:	05d3      	lsls	r3, r2, #23
 8002b8e:	d50c      	bpl.n	8002baa <HAL_HCD_IRQHandler+0x28a>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002b90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b94:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002b96:	f04f 0c07 	mov.w	ip, #7
 8002b9a:	fb05 420b 	mla	r2, r5, fp, r4
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002b9e:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ba2:	4659      	mov	r1, fp
 8002ba4:	f002 faff 	bl	80051a6 <USB_HC_Halt>
 8002ba8:	e004      	b.n	8002bb4 <HAL_HCD_IRQHandler+0x294>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002baa:	68b2      	ldr	r2, [r6, #8]
 8002bac:	0691      	lsls	r1, r2, #26
 8002bae:	d50c      	bpl.n	8002bca <HAL_HCD_IRQHandler+0x2aa>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	60b2      	str	r2, [r6, #8]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002bb4:	68b2      	ldr	r2, [r6, #8]
 8002bb6:	0592      	lsls	r2, r2, #22
 8002bb8:	d521      	bpl.n	8002bfe <HAL_HCD_IRQHandler+0x2de>
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bba:	6820      	ldr	r0, [r4, #0]
 8002bbc:	4659      	mov	r1, fp
 8002bbe:	f002 faf2 	bl	80051a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002bc6:	60b2      	str	r2, [r6, #8]
 8002bc8:	e04c      	b.n	8002c64 <HAL_HCD_IRQHandler+0x344>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002bca:	68b2      	ldr	r2, [r6, #8]
 8002bcc:	0712      	lsls	r2, r2, #28
 8002bce:	d506      	bpl.n	8002bde <HAL_HCD_IRQHandler+0x2be>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002bd0:	2208      	movs	r2, #8
 8002bd2:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002bd4:	f04f 0c05 	mov.w	ip, #5
 8002bd8:	fb05 420b 	mla	r2, r5, fp, r4
 8002bdc:	e7df      	b.n	8002b9e <HAL_HCD_IRQHandler+0x27e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002bde:	68b2      	ldr	r2, [r6, #8]
 8002be0:	0553      	lsls	r3, r2, #21
 8002be2:	d507      	bpl.n	8002bf4 <HAL_HCD_IRQHandler+0x2d4>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002be8:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002bea:	f04f 0c08 	mov.w	ip, #8
 8002bee:	fb05 420b 	mla	r2, r5, fp, r4
 8002bf2:	e7d4      	b.n	8002b9e <HAL_HCD_IRQHandler+0x27e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002bf4:	68b2      	ldr	r2, [r6, #8]
 8002bf6:	0611      	lsls	r1, r2, #24
 8002bf8:	d5dc      	bpl.n	8002bb4 <HAL_HCD_IRQHandler+0x294>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002bfa:	2280      	movs	r2, #128	; 0x80
 8002bfc:	e7bf      	b.n	8002b7e <HAL_HCD_IRQHandler+0x25e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002bfe:	68b2      	ldr	r2, [r6, #8]
 8002c00:	07d3      	lsls	r3, r2, #31
 8002c02:	d544      	bpl.n	8002c8e <HAL_HCD_IRQHandler+0x36e>
    if (hhcd->Init.dma_enable != 0U)
 8002c04:	6922      	ldr	r2, [r4, #16]
 8002c06:	b142      	cbz	r2, 8002c1a <HAL_HCD_IRQHandler+0x2fa>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c08:	6932      	ldr	r2, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c0a:	fb05 400b 	mla	r0, r5, fp, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c0e:	f3c2 0c12 	ubfx	ip, r2, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002c12:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8002c14:	eba2 020c 	sub.w	r2, r2, ip
 8002c18:	6502      	str	r2, [r0, #80]	; 0x50
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c1a:	fb05 400b 	mla	r0, r5, fp, r4
 8002c1e:	2201      	movs	r2, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c20:	2300      	movs	r3, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 8002c22:	f880 2061 	strb.w	r2, [r0, #97]	; 0x61
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c26:	65c3      	str	r3, [r0, #92]	; 0x5c
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002c28:	60b2      	str	r2, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c2a:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
 8002c2e:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 8002c32:	d11d      	bne.n	8002c70 <HAL_HCD_IRQHandler+0x350>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c34:	6820      	ldr	r0, [r4, #0]
 8002c36:	4659      	mov	r1, fp
 8002c38:	f002 fab5 	bl	80051a6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	60b2      	str	r2, [r6, #8]
    if (hhcd->Init.dma_enable == 1U)
 8002c40:	6923      	ldr	r3, [r4, #16]
 8002c42:	2b01      	cmp	r3, #1
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002c44:	fb05 410b 	mla	r1, r5, fp, r4
    if (hhcd->Init.dma_enable == 1U)
 8002c48:	d106      	bne.n	8002c58 <HAL_HCD_IRQHandler+0x338>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002c4a:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
 8002c4e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
 8002c50:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c54:	07d8      	lsls	r0, r3, #31
 8002c56:	d505      	bpl.n	8002c64 <HAL_HCD_IRQHandler+0x344>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002c58:	f891 3054 	ldrb.w	r3, [r1, #84]	; 0x54
 8002c5c:	f083 0301 	eor.w	r3, r3, #1
 8002c60:	f881 3054 	strb.w	r3, [r1, #84]	; 0x54
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c64:	9b00      	ldr	r3, [sp, #0]
 8002c66:	3320      	adds	r3, #32
 8002c68:	f109 0901 	add.w	r9, r9, #1
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	e752      	b.n	8002b16 <HAL_HCD_IRQHandler+0x1f6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002c70:	2a01      	cmp	r2, #1
 8002c72:	d1e5      	bne.n	8002c40 <HAL_HCD_IRQHandler+0x320>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c74:	f858 300a 	ldr.w	r3, [r8, sl]
 8002c78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002c7c:	f848 300a 	str.w	r3, [r8, sl]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c80:	4659      	mov	r1, fp
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002c82:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c86:	4620      	mov	r0, r4
 8002c88:	f003 fa04 	bl	8006094 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c8c:	e7d8      	b.n	8002c40 <HAL_HCD_IRQHandler+0x320>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002c8e:	68b3      	ldr	r3, [r6, #8]
 8002c90:	f013 0302 	ands.w	r3, r3, #2
 8002c94:	d035      	beq.n	8002d02 <HAL_HCD_IRQHandler+0x3e2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002c96:	fb05 400b 	mla	r0, r5, fp, r4
 8002c9a:	f890 2061 	ldrb.w	r2, [r0, #97]	; 0x61
 8002c9e:	2a01      	cmp	r2, #1
 8002ca0:	d10b      	bne.n	8002cba <HAL_HCD_IRQHandler+0x39a>
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ca2:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002ca6:	fb05 430b 	mla	r3, r5, fp, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002caa:	60b7      	str	r7, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002cac:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
 8002cb0:	4659      	mov	r1, fp
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f003 f9ee 	bl	8006094 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002cb8:	e7d4      	b.n	8002c64 <HAL_HCD_IRQHandler+0x344>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002cba:	2a05      	cmp	r2, #5
 8002cbc:	d0f1      	beq.n	8002ca2 <HAL_HCD_IRQHandler+0x382>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002cbe:	2a06      	cmp	r2, #6
 8002cc0:	d001      	beq.n	8002cc6 <HAL_HCD_IRQHandler+0x3a6>
 8002cc2:	2a08      	cmp	r2, #8
 8002cc4:	d109      	bne.n	8002cda <HAL_HCD_IRQHandler+0x3ba>
      hhcd->hc[ch_num].ErrCnt++;
 8002cc6:	fb05 400b 	mla	r0, r5, fp, r4
 8002cca:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002ccc:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cce:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 8002cd0:	65c2      	str	r2, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002cd2:	d904      	bls.n	8002cde <HAL_HCD_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	65c3      	str	r3, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cd8:	e011      	b.n	8002cfe <HAL_HCD_IRQHandler+0x3de>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002cda:	2a03      	cmp	r2, #3
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_HCD_IRQHandler+0x3d4>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cde:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ce2:	f858 200a 	ldr.w	r2, [r8, sl]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ce6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cea:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cee:	f848 200a 	str.w	r2, [r8, sl]
 8002cf2:	e7d8      	b.n	8002ca6 <HAL_HCD_IRQHandler+0x386>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002cf4:	2a07      	cmp	r2, #7
 8002cf6:	d1d6      	bne.n	8002ca6 <HAL_HCD_IRQHandler+0x386>
      hhcd->hc[ch_num].ErrCnt++;
 8002cf8:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002cfa:	3201      	adds	r2, #1
 8002cfc:	65c2      	str	r2, [r0, #92]	; 0x5c
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cfe:	2204      	movs	r2, #4
 8002d00:	e7cf      	b.n	8002ca2 <HAL_HCD_IRQHandler+0x382>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002d02:	68b2      	ldr	r2, [r6, #8]
 8002d04:	06d2      	lsls	r2, r2, #27
 8002d06:	d5ad      	bpl.n	8002c64 <HAL_HCD_IRQHandler+0x344>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d08:	fb05 4e0b 	mla	lr, r5, fp, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d0c:	6820      	ldr	r0, [r4, #0]
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002d0e:	f89e 203f 	ldrb.w	r2, [lr, #63]	; 0x3f
 8002d12:	2a03      	cmp	r2, #3
 8002d14:	d106      	bne.n	8002d24 <HAL_HCD_IRQHandler+0x404>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d16:	f8ce 305c 	str.w	r3, [lr, #92]	; 0x5c
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d1a:	4659      	mov	r1, fp
 8002d1c:	f002 fa43 	bl	80051a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002d20:	2210      	movs	r2, #16
 8002d22:	e750      	b.n	8002bc6 <HAL_HCD_IRQHandler+0x2a6>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002d24:	f012 02fd 	ands.w	r2, r2, #253	; 0xfd
 8002d28:	d1fa      	bne.n	8002d20 <HAL_HCD_IRQHandler+0x400>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002d2a:	f8ce 205c 	str.w	r2, [lr, #92]	; 0x5c
      if (hhcd->Init.dma_enable == 0U)
 8002d2e:	6922      	ldr	r2, [r4, #16]
 8002d30:	2a00      	cmp	r2, #0
 8002d32:	d1f5      	bne.n	8002d20 <HAL_HCD_IRQHandler+0x400>
        hhcd->hc[ch_num].state = HC_NAK;
 8002d34:	2203      	movs	r2, #3
 8002d36:	f88e 2061 	strb.w	r2, [lr, #97]	; 0x61
 8002d3a:	e7ee      	b.n	8002d1a <HAL_HCD_IRQHandler+0x3fa>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002d3c:	f012 0204 	ands.w	r2, r2, #4
 8002d40:	d007      	beq.n	8002d52 <HAL_HCD_IRQHandler+0x432>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002d42:	2204      	movs	r2, #4
 8002d44:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d46:	fb05 430b 	mla	r3, r5, fp, r4
 8002d4a:	2206      	movs	r2, #6
    hhcd->hc[ch_num].state = HC_STALL;
 8002d4c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 8002d50:	e010      	b.n	8002d74 <HAL_HCD_IRQHandler+0x454>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d52:	68b3      	ldr	r3, [r6, #8]
 8002d54:	069b      	lsls	r3, r3, #26
 8002d56:	d511      	bpl.n	8002d7c <HAL_HCD_IRQHandler+0x45c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d58:	2320      	movs	r3, #32
 8002d5a:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d5c:	fb05 430b 	mla	r3, r5, fp, r4
 8002d60:	f893 c03d 	ldrb.w	ip, [r3, #61]	; 0x3d
 8002d64:	f1bc 0f01 	cmp.w	ip, #1
 8002d68:	f47f af7c 	bne.w	8002c64 <HAL_HCD_IRQHandler+0x344>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d70:	f883 7060 	strb.w	r7, [r3, #96]	; 0x60
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d74:	4659      	mov	r1, fp
 8002d76:	f002 fa16 	bl	80051a6 <USB_HC_Halt>
 8002d7a:	e773      	b.n	8002c64 <HAL_HCD_IRQHandler+0x344>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002d7c:	68b3      	ldr	r3, [r6, #8]
 8002d7e:	f413 7300 	ands.w	r3, r3, #512	; 0x200
 8002d82:	d003      	beq.n	8002d8c <HAL_HCD_IRQHandler+0x46c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d88:	60b2      	str	r2, [r6, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d8a:	e7f3      	b.n	8002d74 <HAL_HCD_IRQHandler+0x454>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002d8c:	68b2      	ldr	r2, [r6, #8]
 8002d8e:	f012 0201 	ands.w	r2, r2, #1
 8002d92:	d010      	beq.n	8002db6 <HAL_HCD_IRQHandler+0x496>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002d94:	fb05 420b 	mla	r2, r5, fp, r4
 8002d98:	65d3      	str	r3, [r2, #92]	; 0x5c
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002d9a:	68b3      	ldr	r3, [r6, #8]
 8002d9c:	0659      	lsls	r1, r3, #25
      hhcd->hc[ch_num].do_ping = 1U;
 8002d9e:	bf41      	itttt	mi
 8002da0:	f04f 0c01 	movmi.w	ip, #1
 8002da4:	f882 c03d 	strbmi.w	ip, [r2, #61]	; 0x3d
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002da8:	2240      	movmi	r2, #64	; 0x40
 8002daa:	60b2      	strmi	r2, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002dac:	2201      	movs	r2, #1
 8002dae:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002db0:	fb05 430b 	mla	r3, r5, fp, r4
 8002db4:	e7ca      	b.n	8002d4c <HAL_HCD_IRQHandler+0x42c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002db6:	68b3      	ldr	r3, [r6, #8]
 8002db8:	065b      	lsls	r3, r3, #25
 8002dba:	d510      	bpl.n	8002dde <HAL_HCD_IRQHandler+0x4be>
    hhcd->hc[ch_num].state = HC_NYET;
 8002dbc:	fb05 4c0b 	mla	ip, r5, fp, r4
 8002dc0:	f04f 0e04 	mov.w	lr, #4
 8002dc4:	f88c e061 	strb.w	lr, [ip, #97]	; 0x61
    hhcd->hc[ch_num].do_ping = 1U;
 8002dc8:	f04f 0e01 	mov.w	lr, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002dcc:	f8cc 205c 	str.w	r2, [ip, #92]	; 0x5c
    hhcd->hc[ch_num].do_ping = 1U;
 8002dd0:	f88c e03d 	strb.w	lr, [ip, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dd4:	4659      	mov	r1, fp
 8002dd6:	f002 f9e6 	bl	80051a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002dda:	2240      	movs	r2, #64	; 0x40
 8002ddc:	e6f3      	b.n	8002bc6 <HAL_HCD_IRQHandler+0x2a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002dde:	68b2      	ldr	r2, [r6, #8]
 8002de0:	0711      	lsls	r1, r2, #28
 8002de2:	d505      	bpl.n	8002df0 <HAL_HCD_IRQHandler+0x4d0>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002de4:	2208      	movs	r2, #8
 8002de6:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002de8:	fb05 430b 	mla	r3, r5, fp, r4
 8002dec:	2205      	movs	r2, #5
 8002dee:	e7ad      	b.n	8002d4c <HAL_HCD_IRQHandler+0x42c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002df0:	68b2      	ldr	r2, [r6, #8]
 8002df2:	06d2      	lsls	r2, r2, #27
 8002df4:	d514      	bpl.n	8002e20 <HAL_HCD_IRQHandler+0x500>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002df6:	fb05 420b 	mla	r2, r5, fp, r4
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	65d3      	str	r3, [r2, #92]	; 0x5c
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002dfe:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
    hhcd->hc[ch_num].state = HC_NAK;
 8002e02:	f04f 0c03 	mov.w	ip, #3
 8002e06:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d185      	bne.n	8002d1a <HAL_HCD_IRQHandler+0x3fa>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002e0e:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d181      	bne.n	8002d1a <HAL_HCD_IRQHandler+0x3fa>
        hhcd->hc[ch_num].do_ping = 1U;
 8002e16:	f04f 0c01 	mov.w	ip, #1
 8002e1a:	f882 c03d 	strb.w	ip, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e1e:	e77c      	b.n	8002d1a <HAL_HCD_IRQHandler+0x3fa>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002e20:	68b2      	ldr	r2, [r6, #8]
 8002e22:	0613      	lsls	r3, r2, #24
 8002e24:	d520      	bpl.n	8002e68 <HAL_HCD_IRQHandler+0x548>
    if (hhcd->Init.dma_enable == 0U)
 8002e26:	6922      	ldr	r2, [r4, #16]
 8002e28:	b952      	cbnz	r2, 8002e40 <HAL_HCD_IRQHandler+0x520>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002e2a:	fb05 420b 	mla	r2, r5, fp, r4
 8002e2e:	f04f 0c06 	mov.w	ip, #6
 8002e32:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e36:	4659      	mov	r1, fp
 8002e38:	f002 f9b5 	bl	80051a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002e3c:	2280      	movs	r2, #128	; 0x80
 8002e3e:	e6c2      	b.n	8002bc6 <HAL_HCD_IRQHandler+0x2a6>
      hhcd->hc[ch_num].ErrCnt++;
 8002e40:	fb05 400b 	mla	r0, r5, fp, r4
 8002e44:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8002e46:	3201      	adds	r2, #1
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e48:	2a02      	cmp	r2, #2
      hhcd->hc[ch_num].ErrCnt++;
 8002e4a:	65c2      	str	r2, [r0, #92]	; 0x5c
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002e4c:	d909      	bls.n	8002e62 <HAL_HCD_IRQHandler+0x542>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e4e:	2300      	movs	r3, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e50:	2204      	movs	r2, #4
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002e52:	65c3      	str	r3, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002e54:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002e58:	4659      	mov	r1, fp
 8002e5a:	4620      	mov	r0, r4
 8002e5c:	f003 f91a 	bl	8006094 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002e60:	e7ec      	b.n	8002e3c <HAL_HCD_IRQHandler+0x51c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e62:	f880 7060 	strb.w	r7, [r0, #96]	; 0x60
 8002e66:	e7e9      	b.n	8002e3c <HAL_HCD_IRQHandler+0x51c>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002e68:	68b2      	ldr	r2, [r6, #8]
 8002e6a:	0551      	lsls	r1, r2, #21
 8002e6c:	d50b      	bpl.n	8002e86 <HAL_HCD_IRQHandler+0x566>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002e6e:	fb05 420b 	mla	r2, r5, fp, r4
 8002e72:	f04f 0c08 	mov.w	ip, #8
 8002e76:	f882 c061 	strb.w	ip, [r2, #97]	; 0x61
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e7a:	4659      	mov	r1, fp
 8002e7c:	f002 f993 	bl	80051a6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002e80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e84:	e69f      	b.n	8002bc6 <HAL_HCD_IRQHandler+0x2a6>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002e86:	68b2      	ldr	r2, [r6, #8]
 8002e88:	0792      	lsls	r2, r2, #30
 8002e8a:	f57f aeeb 	bpl.w	8002c64 <HAL_HCD_IRQHandler+0x344>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002e8e:	fb05 420b 	mla	r2, r5, fp, r4
 8002e92:	f892 0061 	ldrb.w	r0, [r2, #97]	; 0x61
 8002e96:	2801      	cmp	r0, #1
 8002e98:	d121      	bne.n	8002ede <HAL_HCD_IRQHandler+0x5be>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002e9a:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e9e:	f892 003f 	ldrb.w	r0, [r2, #63]	; 0x3f
 8002ea2:	3802      	subs	r0, #2
 8002ea4:	2801      	cmp	r0, #1
 8002ea6:	f63f aefe 	bhi.w	8002ca6 <HAL_HCD_IRQHandler+0x386>
        if (hhcd->Init.dma_enable == 0U)
 8002eaa:	6920      	ldr	r0, [r4, #16]
 8002eac:	b930      	cbnz	r0, 8002ebc <HAL_HCD_IRQHandler+0x59c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002eae:	f892 0055 	ldrb.w	r0, [r2, #85]	; 0x55
 8002eb2:	f080 0001 	eor.w	r0, r0, #1
 8002eb6:	f882 0055 	strb.w	r0, [r2, #85]	; 0x55
 8002eba:	e6f4      	b.n	8002ca6 <HAL_HCD_IRQHandler+0x386>
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002ebc:	2801      	cmp	r0, #1
 8002ebe:	f47f aef2 	bne.w	8002ca6 <HAL_HCD_IRQHandler+0x386>
 8002ec2:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	f43f aeee 	beq.w	8002ca6 <HAL_HCD_IRQHandler+0x386>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002eca:	f8b2 c040 	ldrh.w	ip, [r2, #64]	; 0x40
 8002ece:	3801      	subs	r0, #1
 8002ed0:	4460      	add	r0, ip
 8002ed2:	fbb0 f0fc 	udiv	r0, r0, ip
          if ((num_packets & 1U) != 0U)
 8002ed6:	07c3      	lsls	r3, r0, #31
 8002ed8:	f57f aee5 	bpl.w	8002ca6 <HAL_HCD_IRQHandler+0x386>
 8002edc:	e7e7      	b.n	8002eae <HAL_HCD_IRQHandler+0x58e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ede:	2803      	cmp	r0, #3
 8002ee0:	d102      	bne.n	8002ee8 <HAL_HCD_IRQHandler+0x5c8>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002ee2:	f882 7060 	strb.w	r7, [r2, #96]	; 0x60
 8002ee6:	e6de      	b.n	8002ca6 <HAL_HCD_IRQHandler+0x386>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002ee8:	2804      	cmp	r0, #4
 8002eea:	d0fa      	beq.n	8002ee2 <HAL_HCD_IRQHandler+0x5c2>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002eec:	2805      	cmp	r0, #5
 8002eee:	d102      	bne.n	8002ef6 <HAL_HCD_IRQHandler+0x5d6>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002ef0:	f882 0060 	strb.w	r0, [r2, #96]	; 0x60
 8002ef4:	e6d7      	b.n	8002ca6 <HAL_HCD_IRQHandler+0x386>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002ef6:	2806      	cmp	r0, #6
 8002ef8:	f43f aee5 	beq.w	8002cc6 <HAL_HCD_IRQHandler+0x3a6>
 8002efc:	2808      	cmp	r0, #8
 8002efe:	f47f aed2 	bne.w	8002ca6 <HAL_HCD_IRQHandler+0x386>
 8002f02:	e6e0      	b.n	8002cc6 <HAL_HCD_IRQHandler+0x3a6>

08002f04 <HAL_HCD_Start>:
{
 8002f04:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 8002f06:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002f0a:	2b01      	cmp	r3, #1
{
 8002f0c:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002f0e:	d00c      	beq.n	8002f2a <HAL_HCD_Start+0x26>
 8002f10:	2101      	movs	r1, #1
 8002f12:	f880 12f8 	strb.w	r1, [r0, #760]	; 0x2f8
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002f16:	6800      	ldr	r0, [r0, #0]
 8002f18:	f002 f886 	bl	8005028 <USB_DriveVbus>
  __HAL_HCD_ENABLE(hhcd);
 8002f1c:	6820      	ldr	r0, [r4, #0]
 8002f1e:	f001 ff1b 	bl	8004d58 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002f28:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002f2a:	2002      	movs	r0, #2
 8002f2c:	e7fc      	b.n	8002f28 <HAL_HCD_Start+0x24>

08002f2e <HAL_HCD_Stop>:
{
 8002f2e:	b510      	push	{r4, lr}
  __HAL_LOCK(hhcd);
 8002f30:	f890 32f8 	ldrb.w	r3, [r0, #760]	; 0x2f8
 8002f34:	2b01      	cmp	r3, #1
{
 8002f36:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8002f38:	d009      	beq.n	8002f4e <HAL_HCD_Stop+0x20>
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	f880 32f8 	strb.w	r3, [r0, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002f40:	6800      	ldr	r0, [r0, #0]
 8002f42:	f002 fa46 	bl	80053d2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002f46:	2000      	movs	r0, #0
 8002f48:	f884 02f8 	strb.w	r0, [r4, #760]	; 0x2f8
}
 8002f4c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8002f4e:	2002      	movs	r0, #2
 8002f50:	e7fc      	b.n	8002f4c <HAL_HCD_Stop+0x1e>

08002f52 <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 8002f52:	6800      	ldr	r0, [r0, #0]
 8002f54:	f002 b84a 	b.w	8004fec <USB_ResetPort>

08002f58 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8002f58:	232c      	movs	r3, #44	; 0x2c
 8002f5a:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002f5e:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
 8002f62:	4770      	bx	lr

08002f64 <HAL_HCD_HC_GetXferCount>:
  return hhcd->hc[chnum].xfer_count;
 8002f64:	232c      	movs	r3, #44	; 0x2c
 8002f66:	fb03 0101 	mla	r1, r3, r1, r0
}
 8002f6a:	6d08      	ldr	r0, [r1, #80]	; 0x50
 8002f6c:	4770      	bx	lr

08002f6e <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002f6e:	6800      	ldr	r0, [r0, #0]
 8002f70:	f002 b885 	b.w	800507e <USB_GetCurrentFrame>

08002f74 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8002f74:	6800      	ldr	r0, [r0, #0]
 8002f76:	f002 b877 	b.w	8005068 <USB_GetHostSpeed>

08002f7a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f7a:	6801      	ldr	r1, [r0, #0]
 8002f7c:	694b      	ldr	r3, [r1, #20]
 8002f7e:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	d010      	beq.n	8002faa <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f88:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8002f8c:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f8e:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f90:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f92:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f96:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f9a:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f9c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fa0:	f043 0304 	orr.w	r3, r3, #4
 8002fa4:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	4770      	bx	lr
  }
  return HAL_OK;
 8002faa:	4618      	mov	r0, r3
}
 8002fac:	4770      	bx	lr

08002fae <I2C_WaitOnFlagUntilTimeout>:
{
 8002fae:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8002fb2:	4606      	mov	r6, r0
 8002fb4:	460f      	mov	r7, r1
 8002fb6:	4691      	mov	r9, r2
 8002fb8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8002fbe:	6833      	ldr	r3, [r6, #0]
 8002fc0:	f1ba 0f01 	cmp.w	sl, #1
 8002fc4:	bf0c      	ite	eq
 8002fc6:	695c      	ldreq	r4, [r3, #20]
 8002fc8:	699c      	ldrne	r4, [r3, #24]
 8002fca:	ea27 0404 	bic.w	r4, r7, r4
 8002fce:	b2a4      	uxth	r4, r4
 8002fd0:	fab4 f484 	clz	r4, r4
 8002fd4:	0964      	lsrs	r4, r4, #5
 8002fd6:	45a1      	cmp	r9, r4
 8002fd8:	d001      	beq.n	8002fde <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8002fda:	2000      	movs	r0, #0
 8002fdc:	e017      	b.n	800300e <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	1c6a      	adds	r2, r5, #1
 8002fe0:	d0ee      	beq.n	8002fc0 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fe2:	f7ff f82b 	bl	800203c <HAL_GetTick>
 8002fe6:	9b08      	ldr	r3, [sp, #32]
 8002fe8:	1ac0      	subs	r0, r0, r3
 8002fea:	42a8      	cmp	r0, r5
 8002fec:	d801      	bhi.n	8002ff2 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002fee:	2d00      	cmp	r5, #0
 8002ff0:	d1e5      	bne.n	8002fbe <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ff2:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ff4:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ff6:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ff8:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ffc:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003000:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003002:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003006:	f042 0220 	orr.w	r2, r2, #32
 800300a:	6432      	str	r2, [r6, #64]	; 0x40
        return HAL_ERROR;
 800300c:	2001      	movs	r0, #1
}
 800300e:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08003012 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8003012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003016:	4604      	mov	r4, r0
 8003018:	460f      	mov	r7, r1
 800301a:	4616      	mov	r6, r2
 800301c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800301e:	6825      	ldr	r5, [r4, #0]
 8003020:	6968      	ldr	r0, [r5, #20]
 8003022:	ea27 0000 	bic.w	r0, r7, r0
 8003026:	b280      	uxth	r0, r0
 8003028:	b1b8      	cbz	r0, 800305a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800302a:	696b      	ldr	r3, [r5, #20]
 800302c:	055a      	lsls	r2, r3, #21
 800302e:	d516      	bpl.n	800305e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003030:	682b      	ldr	r3, [r5, #0]
 8003032:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003036:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003038:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800303c:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800303e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003040:	2300      	movs	r3, #0
 8003042:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003044:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003048:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800304c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800304e:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003052:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003054:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8003058:	2001      	movs	r0, #1
}
 800305a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800305e:	1c73      	adds	r3, r6, #1
 8003060:	d0de      	beq.n	8003020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003062:	f7fe ffeb 	bl	800203c <HAL_GetTick>
 8003066:	eba0 0008 	sub.w	r0, r0, r8
 800306a:	42b0      	cmp	r0, r6
 800306c:	d801      	bhi.n	8003072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 800306e:	2e00      	cmp	r6, #0
 8003070:	d1d5      	bne.n	800301e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003072:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003076:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003078:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003080:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003082:	f042 0220 	orr.w	r2, r2, #32
 8003086:	e7e4      	b.n	8003052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08003088 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8003088:	b570      	push	{r4, r5, r6, lr}
 800308a:	4604      	mov	r4, r0
 800308c:	460d      	mov	r5, r1
 800308e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003090:	6821      	ldr	r1, [r4, #0]
 8003092:	694b      	ldr	r3, [r1, #20]
 8003094:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8003098:	d001      	beq.n	800309e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800309a:	2000      	movs	r0, #0
 800309c:	e010      	b.n	80030c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800309e:	694a      	ldr	r2, [r1, #20]
 80030a0:	06d2      	lsls	r2, r2, #27
 80030a2:	d50e      	bpl.n	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030a4:	f06f 0210 	mvn.w	r2, #16
 80030a8:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80030aa:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030ac:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030b6:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b8:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80030ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      return HAL_ERROR;
 80030be:	2001      	movs	r0, #1
}
 80030c0:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c2:	f7fe ffbb 	bl	800203c <HAL_GetTick>
 80030c6:	1b80      	subs	r0, r0, r6
 80030c8:	42a8      	cmp	r0, r5
 80030ca:	d801      	bhi.n	80030d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80030cc:	2d00      	cmp	r5, #0
 80030ce:	d1df      	bne.n	8003090 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030d0:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80030d2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030d4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030d6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030de:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80030e0:	f042 0220 	orr.w	r2, r2, #32
 80030e4:	e7e8      	b.n	80030b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080030e6 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80030e6:	b570      	push	{r4, r5, r6, lr}
 80030e8:	4604      	mov	r4, r0
 80030ea:	460d      	mov	r5, r1
 80030ec:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	075b      	lsls	r3, r3, #29
 80030f4:	d501      	bpl.n	80030fa <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80030f6:	2000      	movs	r0, #0
}
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030fa:	4620      	mov	r0, r4
 80030fc:	f7ff ff3d 	bl	8002f7a <I2C_IsAcknowledgeFailed>
 8003100:	b9a8      	cbnz	r0, 800312e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8003102:	1c6a      	adds	r2, r5, #1
 8003104:	d0f3      	beq.n	80030ee <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003106:	f7fe ff99 	bl	800203c <HAL_GetTick>
 800310a:	1b80      	subs	r0, r0, r6
 800310c:	42a8      	cmp	r0, r5
 800310e:	d801      	bhi.n	8003114 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8003110:	2d00      	cmp	r5, #0
 8003112:	d1ec      	bne.n	80030ee <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003114:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003116:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003118:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800311a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800311e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003122:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003124:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003128:	f042 0220 	orr.w	r2, r2, #32
 800312c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800312e:	2001      	movs	r0, #1
 8003130:	e7e2      	b.n	80030f8 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08003132 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8003132:	b570      	push	{r4, r5, r6, lr}
 8003134:	4604      	mov	r4, r0
 8003136:	460d      	mov	r5, r1
 8003138:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800313a:	6823      	ldr	r3, [r4, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	061b      	lsls	r3, r3, #24
 8003140:	d501      	bpl.n	8003146 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8003142:	2000      	movs	r0, #0
}
 8003144:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003146:	4620      	mov	r0, r4
 8003148:	f7ff ff17 	bl	8002f7a <I2C_IsAcknowledgeFailed>
 800314c:	b9a8      	cbnz	r0, 800317a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800314e:	1c6a      	adds	r2, r5, #1
 8003150:	d0f3      	beq.n	800313a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003152:	f7fe ff73 	bl	800203c <HAL_GetTick>
 8003156:	1b80      	subs	r0, r0, r6
 8003158:	42a8      	cmp	r0, r5
 800315a:	d801      	bhi.n	8003160 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800315c:	2d00      	cmp	r5, #0
 800315e:	d1ec      	bne.n	800313a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003160:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8003162:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003164:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003166:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800316e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003170:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003174:	f042 0220 	orr.w	r2, r2, #32
 8003178:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800317a:	2001      	movs	r0, #1
 800317c:	e7e2      	b.n	8003144 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08003180 <I2C_RequestMemoryWrite>:
{
 8003180:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003184:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003186:	6802      	ldr	r2, [r0, #0]
{
 8003188:	b085      	sub	sp, #20
 800318a:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800318e:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003190:	6813      	ldr	r3, [r2, #0]
 8003192:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003196:	6013      	str	r3, [r2, #0]
{
 8003198:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800319a:	463b      	mov	r3, r7
 800319c:	f8cd 8000 	str.w	r8, [sp]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80031a6:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031a8:	f7ff ff01 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	b138      	cbz	r0, 80031c0 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	05db      	lsls	r3, r3, #23
 80031b4:	d502      	bpl.n	80031bc <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031ba:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 80031bc:	2003      	movs	r0, #3
 80031be:	e00a      	b.n	80031d6 <I2C_RequestMemoryWrite+0x56>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031c0:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 80031c4:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031c6:	4919      	ldr	r1, [pc, #100]	; (800322c <I2C_RequestMemoryWrite+0xac>)
 80031c8:	4643      	mov	r3, r8
 80031ca:	463a      	mov	r2, r7
 80031cc:	4620      	mov	r0, r4
 80031ce:	f7ff ff20 	bl	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031d2:	b118      	cbz	r0, 80031dc <I2C_RequestMemoryWrite+0x5c>
      return HAL_ERROR;
 80031d4:	2001      	movs	r0, #1
}
 80031d6:	b005      	add	sp, #20
 80031d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031dc:	6823      	ldr	r3, [r4, #0]
 80031de:	9003      	str	r0, [sp, #12]
 80031e0:	695a      	ldr	r2, [r3, #20]
 80031e2:	9203      	str	r2, [sp, #12]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e8:	4642      	mov	r2, r8
 80031ea:	4639      	mov	r1, r7
 80031ec:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ee:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031f0:	f7ff ff9f 	bl	8003132 <I2C_WaitOnTXEFlagUntilTimeout>
 80031f4:	b140      	cbz	r0, 8003208 <I2C_RequestMemoryWrite+0x88>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80031f8:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fa:	bf01      	itttt	eq
 80031fc:	6822      	ldreq	r2, [r4, #0]
 80031fe:	6813      	ldreq	r3, [r2, #0]
 8003200:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003204:	6013      	streq	r3, [r2, #0]
 8003206:	e7e5      	b.n	80031d4 <I2C_RequestMemoryWrite+0x54>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003208:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320c:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800320e:	d102      	bne.n	8003216 <I2C_RequestMemoryWrite+0x96>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003210:	b2ed      	uxtb	r5, r5
 8003212:	611d      	str	r5, [r3, #16]
 8003214:	e7df      	b.n	80031d6 <I2C_RequestMemoryWrite+0x56>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003216:	0a2a      	lsrs	r2, r5, #8
 8003218:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800321a:	4639      	mov	r1, r7
 800321c:	4642      	mov	r2, r8
 800321e:	4620      	mov	r0, r4
 8003220:	f7ff ff87 	bl	8003132 <I2C_WaitOnTXEFlagUntilTimeout>
 8003224:	2800      	cmp	r0, #0
 8003226:	d1e6      	bne.n	80031f6 <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	e7f1      	b.n	8003210 <I2C_RequestMemoryWrite+0x90>
 800322c:	00010002 	.word	0x00010002

08003230 <I2C_RequestMemoryRead>:
{
 8003230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003234:	469a      	mov	sl, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003236:	6803      	ldr	r3, [r0, #0]
{
 8003238:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003240:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003242:	681a      	ldr	r2, [r3, #0]
{
 8003244:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003248:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800324c:	601a      	str	r2, [r3, #0]
{
 800324e:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003250:	463b      	mov	r3, r7
 8003252:	f8cd 8000 	str.w	r8, [sp]
 8003256:	2200      	movs	r2, #0
 8003258:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 800325c:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800325e:	f7ff fea6 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003262:	6823      	ldr	r3, [r4, #0]
 8003264:	b148      	cbz	r0, 800327a <I2C_RequestMemoryRead+0x4a>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003266:	681b      	ldr	r3, [r3, #0]
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003268:	05db      	lsls	r3, r3, #23
 800326a:	d502      	bpl.n	8003272 <I2C_RequestMemoryRead+0x42>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800326c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003270:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_TIMEOUT;
 8003272:	2003      	movs	r0, #3
}
 8003274:	b004      	add	sp, #16
 8003276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800327a:	fa5f f986 	uxtb.w	r9, r6
 800327e:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 8003282:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003284:	492a      	ldr	r1, [pc, #168]	; (8003330 <I2C_RequestMemoryRead+0x100>)
 8003286:	4643      	mov	r3, r8
 8003288:	463a      	mov	r2, r7
 800328a:	4620      	mov	r0, r4
 800328c:	f7ff fec1 	bl	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003290:	b108      	cbz	r0, 8003296 <I2C_RequestMemoryRead+0x66>
    return HAL_ERROR;
 8003292:	2001      	movs	r0, #1
 8003294:	e7ee      	b.n	8003274 <I2C_RequestMemoryRead+0x44>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003296:	6823      	ldr	r3, [r4, #0]
 8003298:	9003      	str	r0, [sp, #12]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	9203      	str	r2, [sp, #12]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a2:	4642      	mov	r2, r8
 80032a4:	4639      	mov	r1, r7
 80032a6:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a8:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032aa:	f7ff ff42 	bl	8003132 <I2C_WaitOnTXEFlagUntilTimeout>
 80032ae:	b140      	cbz	r0, 80032c2 <I2C_RequestMemoryRead+0x92>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032b2:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032b4:	bf01      	itttt	eq
 80032b6:	6822      	ldreq	r2, [r4, #0]
 80032b8:	6813      	ldreq	r3, [r2, #0]
 80032ba:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80032be:	6013      	streq	r3, [r2, #0]
 80032c0:	e7e7      	b.n	8003292 <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032c2:	f1ba 0f01 	cmp.w	sl, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c6:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032c8:	d11a      	bne.n	8003300 <I2C_RequestMemoryRead+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032ca:	b2ed      	uxtb	r5, r5
 80032cc:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ce:	4642      	mov	r2, r8
 80032d0:	4639      	mov	r1, r7
 80032d2:	4620      	mov	r0, r4
 80032d4:	f7ff ff2d 	bl	8003132 <I2C_WaitOnTXEFlagUntilTimeout>
 80032d8:	2800      	cmp	r0, #0
 80032da:	d1e9      	bne.n	80032b0 <I2C_RequestMemoryRead+0x80>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032dc:	6822      	ldr	r2, [r4, #0]
 80032de:	6813      	ldr	r3, [r2, #0]
 80032e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e4:	6013      	str	r3, [r2, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ea:	4602      	mov	r2, r0
 80032ec:	f8cd 8000 	str.w	r8, [sp]
 80032f0:	463b      	mov	r3, r7
 80032f2:	4620      	mov	r0, r4
 80032f4:	f7ff fe5b 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 80032f8:	6822      	ldr	r2, [r4, #0]
 80032fa:	b160      	cbz	r0, 8003316 <I2C_RequestMemoryRead+0xe6>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032fc:	6813      	ldr	r3, [r2, #0]
 80032fe:	e7b3      	b.n	8003268 <I2C_RequestMemoryRead+0x38>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003300:	0a2a      	lsrs	r2, r5, #8
 8003302:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003304:	4639      	mov	r1, r7
 8003306:	4642      	mov	r2, r8
 8003308:	4620      	mov	r0, r4
 800330a:	f7ff ff12 	bl	8003132 <I2C_WaitOnTXEFlagUntilTimeout>
 800330e:	2800      	cmp	r0, #0
 8003310:	d1ce      	bne.n	80032b0 <I2C_RequestMemoryRead+0x80>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003312:	6823      	ldr	r3, [r4, #0]
 8003314:	e7d9      	b.n	80032ca <I2C_RequestMemoryRead+0x9a>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003316:	f049 0301 	orr.w	r3, r9, #1
 800331a:	6113      	str	r3, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800331c:	4904      	ldr	r1, [pc, #16]	; (8003330 <I2C_RequestMemoryRead+0x100>)
 800331e:	4643      	mov	r3, r8
 8003320:	463a      	mov	r2, r7
 8003322:	4620      	mov	r0, r4
 8003324:	f7ff fe75 	bl	8003012 <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_TIMEOUT;
 8003328:	3800      	subs	r0, #0
 800332a:	bf18      	it	ne
 800332c:	2001      	movne	r0, #1
 800332e:	e7a1      	b.n	8003274 <I2C_RequestMemoryRead+0x44>
 8003330:	00010002 	.word	0x00010002

08003334 <HAL_I2C_MspInit>:
}
 8003334:	4770      	bx	lr
	...

08003338 <HAL_I2C_Init>:
{
 8003338:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800333a:	4604      	mov	r4, r0
 800333c:	b908      	cbnz	r0, 8003342 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800333e:	2001      	movs	r0, #1
}
 8003340:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003342:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003346:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800334a:	b91b      	cbnz	r3, 8003354 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800334c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8003350:	f7ff fff0 	bl	8003334 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003354:	2324      	movs	r3, #36	; 0x24
 8003356:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	f022 0201 	bic.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800336a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003372:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003374:	f000 fe24 	bl	8003fc0 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003378:	4b3f      	ldr	r3, [pc, #252]	; (8003478 <HAL_I2C_Init+0x140>)
 800337a:	6865      	ldr	r5, [r4, #4]
 800337c:	429d      	cmp	r5, r3
 800337e:	bf94      	ite	ls
 8003380:	4b3e      	ldrls	r3, [pc, #248]	; (800347c <HAL_I2C_Init+0x144>)
 8003382:	4b3f      	ldrhi	r3, [pc, #252]	; (8003480 <HAL_I2C_Init+0x148>)
 8003384:	4298      	cmp	r0, r3
 8003386:	bf8c      	ite	hi
 8003388:	2300      	movhi	r3, #0
 800338a:	2301      	movls	r3, #1
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1d6      	bne.n	800333e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003390:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003392:	4e39      	ldr	r6, [pc, #228]	; (8003478 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003394:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8003396:	493b      	ldr	r1, [pc, #236]	; (8003484 <HAL_I2C_Init+0x14c>)
 8003398:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800339c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033a0:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033a2:	42b5      	cmp	r5, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033a4:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033a6:	bf88      	it	hi
 80033a8:	f44f 7696 	movhi.w	r6, #300	; 0x12c
 80033ac:	6a13      	ldr	r3, [r2, #32]
 80033ae:	bf88      	it	hi
 80033b0:	4371      	mulhi	r1, r6
 80033b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033b6:	bf84      	itt	hi
 80033b8:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80033bc:	fbb1 f1f6 	udivhi	r1, r1, r6
 80033c0:	3101      	adds	r1, #1
 80033c2:	4319      	orrs	r1, r3
 80033c4:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033c6:	69d1      	ldr	r1, [r2, #28]
 80033c8:	1e43      	subs	r3, r0, #1
 80033ca:	482b      	ldr	r0, [pc, #172]	; (8003478 <HAL_I2C_Init+0x140>)
 80033cc:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80033d0:	4285      	cmp	r5, r0
 80033d2:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80033d6:	d832      	bhi.n	800343e <HAL_I2C_Init+0x106>
 80033d8:	006d      	lsls	r5, r5, #1
 80033da:	f640 70fc 	movw	r0, #4092	; 0xffc
 80033de:	fbb3 f3f5 	udiv	r3, r3, r5
 80033e2:	3301      	adds	r3, #1
 80033e4:	4203      	tst	r3, r0
 80033e6:	d042      	beq.n	800346e <HAL_I2C_Init+0x136>
 80033e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ec:	430b      	orrs	r3, r1
 80033ee:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033f0:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80033f4:	6811      	ldr	r1, [r2, #0]
 80033f6:	4303      	orrs	r3, r0
 80033f8:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80033fc:	430b      	orrs	r3, r1
 80033fe:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003400:	6891      	ldr	r1, [r2, #8]
 8003402:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8003406:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 800340a:	4303      	orrs	r3, r0
 800340c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003410:	430b      	orrs	r3, r1
 8003412:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003414:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8003418:	68d1      	ldr	r1, [r2, #12]
 800341a:	4303      	orrs	r3, r0
 800341c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8003420:	430b      	orrs	r3, r1
 8003422:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8003424:	6813      	ldr	r3, [r2, #0]
 8003426:	f043 0301 	orr.w	r3, r3, #1
 800342a:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800342c:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 800342e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003430:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003432:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003436:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 800343c:	e780      	b.n	8003340 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800343e:	68a0      	ldr	r0, [r4, #8]
 8003440:	b950      	cbnz	r0, 8003458 <HAL_I2C_Init+0x120>
 8003442:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003446:	fbb3 f3f5 	udiv	r3, r3, r5
 800344a:	3301      	adds	r3, #1
 800344c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003450:	b17b      	cbz	r3, 8003472 <HAL_I2C_Init+0x13a>
 8003452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003456:	e7c9      	b.n	80033ec <HAL_I2C_Init+0xb4>
 8003458:	2019      	movs	r0, #25
 800345a:	4345      	muls	r5, r0
 800345c:	fbb3 f3f5 	udiv	r3, r3, r5
 8003460:	3301      	adds	r3, #1
 8003462:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003466:	b123      	cbz	r3, 8003472 <HAL_I2C_Init+0x13a>
 8003468:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800346c:	e7be      	b.n	80033ec <HAL_I2C_Init+0xb4>
 800346e:	2304      	movs	r3, #4
 8003470:	e7bc      	b.n	80033ec <HAL_I2C_Init+0xb4>
 8003472:	2301      	movs	r3, #1
 8003474:	e7ba      	b.n	80033ec <HAL_I2C_Init+0xb4>
 8003476:	bf00      	nop
 8003478:	000186a0 	.word	0x000186a0
 800347c:	001e847f 	.word	0x001e847f
 8003480:	003d08ff 	.word	0x003d08ff
 8003484:	000f4240 	.word	0x000f4240

08003488 <HAL_I2C_MspDeInit>:
 8003488:	4770      	bx	lr

0800348a <HAL_I2C_DeInit>:
{
 800348a:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 800348c:	4604      	mov	r4, r0
 800348e:	b198      	cbz	r0, 80034b8 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8003490:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8003492:	2324      	movs	r3, #36	; 0x24
 8003494:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8003498:	6813      	ldr	r3, [r2, #0]
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80034a0:	f7ff fff2 	bl	8003488 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80034a4:	2000      	movs	r0, #0
 80034a6:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 80034a8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 80034ac:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80034b2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
}
 80034b6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80034b8:	2001      	movs	r0, #1
 80034ba:	e7fc      	b.n	80034b6 <HAL_I2C_DeInit+0x2c>

080034bc <HAL_I2C_Mem_Write>:
{
 80034bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80034c0:	4604      	mov	r4, r0
 80034c2:	4699      	mov	r9, r3
 80034c4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80034c6:	460f      	mov	r7, r1
 80034c8:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80034ca:	f7fe fdb7 	bl	800203c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ce:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80034d2:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80034d4:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d6:	d003      	beq.n	80034e0 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 80034d8:	2002      	movs	r0, #2
}
 80034da:	b003      	add	sp, #12
 80034dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e0:	9000      	str	r0, [sp, #0]
 80034e2:	493c      	ldr	r1, [pc, #240]	; (80035d4 <HAL_I2C_Mem_Write+0x118>)
 80034e4:	2319      	movs	r3, #25
 80034e6:	2201      	movs	r2, #1
 80034e8:	4620      	mov	r0, r4
 80034ea:	f7ff fd60 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 80034ee:	2800      	cmp	r0, #0
 80034f0:	d1f2      	bne.n	80034d8 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80034f2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d0ee      	beq.n	80034d8 <HAL_I2C_Mem_Write+0x1c>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034fa:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80034fc:	2301      	movs	r3, #1
 80034fe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003502:	6803      	ldr	r3, [r0, #0]
 8003504:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8003506:	bf5e      	ittt	pl
 8003508:	6803      	ldrpl	r3, [r0, #0]
 800350a:	f043 0301 	orrpl.w	r3, r3, #1
 800350e:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003510:	6803      	ldr	r3, [r0, #0]
 8003512:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003516:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003518:	2321      	movs	r3, #33	; 0x21
 800351a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800351e:	2340      	movs	r3, #64	; 0x40
 8003520:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003524:	2300      	movs	r3, #0
 8003526:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8003528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800352a:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 800352c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8003530:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003532:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003534:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003536:	4b28      	ldr	r3, [pc, #160]	; (80035d8 <HAL_I2C_Mem_Write+0x11c>)
 8003538:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800353a:	e9cd 6500 	strd	r6, r5, [sp]
 800353e:	464b      	mov	r3, r9
 8003540:	4642      	mov	r2, r8
 8003542:	4639      	mov	r1, r7
 8003544:	4620      	mov	r0, r4
 8003546:	f7ff fe1b 	bl	8003180 <I2C_RequestMemoryWrite>
 800354a:	2800      	cmp	r0, #0
 800354c:	d02a      	beq.n	80035a4 <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 800354e:	2001      	movs	r0, #1
 8003550:	e7c3      	b.n	80034da <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003552:	f7ff fdee 	bl	8003132 <I2C_WaitOnTXEFlagUntilTimeout>
 8003556:	b140      	cbz	r0, 800356a <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003558:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800355a:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800355c:	bf01      	itttt	eq
 800355e:	6822      	ldreq	r2, [r4, #0]
 8003560:	6813      	ldreq	r3, [r2, #0]
 8003562:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8003566:	6013      	streq	r3, [r2, #0]
 8003568:	e7f1      	b.n	800354e <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800356a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800356c:	6827      	ldr	r7, [r4, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003574:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8003576:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003578:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800357a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800357c:	3a01      	subs	r2, #1
 800357e:	b292      	uxth	r2, r2
 8003580:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003582:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8003584:	1e48      	subs	r0, r1, #1
 8003586:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003588:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800358a:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800358c:	d50a      	bpl.n	80035a4 <HAL_I2C_Mem_Write+0xe8>
 800358e:	b148      	cbz	r0, 80035a4 <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003590:	785a      	ldrb	r2, [r3, #1]
 8003592:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8003594:	3302      	adds	r3, #2
 8003596:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8003598:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800359a:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 800359c:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800359e:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 80035a0:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80035a2:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035a4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a6:	462a      	mov	r2, r5
 80035a8:	4631      	mov	r1, r6
 80035aa:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1d0      	bne.n	8003552 <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b0:	f7ff fd99 	bl	80030e6 <I2C_WaitOnBTFFlagUntilTimeout>
 80035b4:	2800      	cmp	r0, #0
 80035b6:	d1cf      	bne.n	8003558 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b8:	6822      	ldr	r2, [r4, #0]
 80035ba:	6813      	ldr	r3, [r2, #0]
 80035bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035c0:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	2320      	movs	r3, #32
 80035c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80035c8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035cc:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 80035d0:	e783      	b.n	80034da <HAL_I2C_Mem_Write+0x1e>
 80035d2:	bf00      	nop
 80035d4:	00100002 	.word	0x00100002
 80035d8:	ffff0000 	.word	0xffff0000

080035dc <HAL_I2C_Mem_Read>:
{
 80035dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035e0:	4604      	mov	r4, r0
 80035e2:	b087      	sub	sp, #28
 80035e4:	4699      	mov	r9, r3
 80035e6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 80035e8:	460d      	mov	r5, r1
 80035ea:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 80035ec:	f7fe fd26 	bl	800203c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80035f4:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 80035f6:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80035f8:	d004      	beq.n	8003604 <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 80035fa:	2502      	movs	r5, #2
}
 80035fc:	4628      	mov	r0, r5
 80035fe:	b007      	add	sp, #28
 8003600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003604:	9000      	str	r0, [sp, #0]
 8003606:	4976      	ldr	r1, [pc, #472]	; (80037e0 <HAL_I2C_Mem_Read+0x204>)
 8003608:	2319      	movs	r3, #25
 800360a:	2201      	movs	r2, #1
 800360c:	4620      	mov	r0, r4
 800360e:	f7ff fcce 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003612:	2800      	cmp	r0, #0
 8003614:	d1f1      	bne.n	80035fa <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8003616:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800361a:	2b01      	cmp	r3, #1
 800361c:	d0ed      	beq.n	80035fa <HAL_I2C_Mem_Read+0x1e>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800361e:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8003620:	2301      	movs	r3, #1
 8003622:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003626:	6803      	ldr	r3, [r0, #0]
 8003628:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800362a:	bf5e      	ittt	pl
 800362c:	6803      	ldrpl	r3, [r0, #0]
 800362e:	f043 0301 	orrpl.w	r3, r3, #1
 8003632:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003634:	6803      	ldr	r3, [r0, #0]
 8003636:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800363a:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800363c:	2322      	movs	r3, #34	; 0x22
 800363e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003642:	2340      	movs	r3, #64	; 0x40
 8003644:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003648:	2300      	movs	r3, #0
 800364a:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 800364c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800364e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003650:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8003654:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003656:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003658:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800365a:	4b62      	ldr	r3, [pc, #392]	; (80037e4 <HAL_I2C_Mem_Read+0x208>)
 800365c:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800365e:	4629      	mov	r1, r5
 8003660:	e9cd 7600 	strd	r7, r6, [sp]
 8003664:	464b      	mov	r3, r9
 8003666:	4642      	mov	r2, r8
 8003668:	4620      	mov	r0, r4
 800366a:	f7ff fde1 	bl	8003230 <I2C_RequestMemoryRead>
 800366e:	4605      	mov	r5, r0
 8003670:	b108      	cbz	r0, 8003676 <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8003672:	2501      	movs	r5, #1
 8003674:	e7c2      	b.n	80035fc <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8003676:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003678:	6823      	ldr	r3, [r4, #0]
    if (hi2c->XferSize == 0U)
 800367a:	b9b2      	cbnz	r2, 80036aa <HAL_I2C_Mem_Read+0xce>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367c:	9002      	str	r0, [sp, #8]
 800367e:	695a      	ldr	r2, [r3, #20]
 8003680:	9202      	str	r2, [sp, #8]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	9202      	str	r2, [sp, #8]
 8003686:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800368e:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003690:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80037e8 <HAL_I2C_Mem_Read+0x20c>
    while (hi2c->XferSize > 0U)
 8003694:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d12c      	bne.n	80036f4 <HAL_I2C_Mem_Read+0x118>
    hi2c->State = HAL_I2C_STATE_READY;
 800369a:	2220      	movs	r2, #32
 800369c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80036a0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80036a8:	e7a8      	b.n	80035fc <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 80036aa:	2a01      	cmp	r2, #1
 80036ac:	d10a      	bne.n	80036c4 <HAL_I2C_Mem_Read+0xe8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036b4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036b6:	9003      	str	r0, [sp, #12]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	9203      	str	r2, [sp, #12]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	9203      	str	r2, [sp, #12]
 80036c0:	9a03      	ldr	r2, [sp, #12]
 80036c2:	e7e1      	b.n	8003688 <HAL_I2C_Mem_Read+0xac>
    else if (hi2c->XferSize == 2U)
 80036c4:	2a02      	cmp	r2, #2
 80036c6:	d10e      	bne.n	80036e6 <HAL_I2C_Mem_Read+0x10a>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036d6:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d8:	9004      	str	r0, [sp, #16]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	9204      	str	r2, [sp, #16]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	9304      	str	r3, [sp, #16]
 80036e2:	9b04      	ldr	r3, [sp, #16]
 80036e4:	e7d4      	b.n	8003690 <HAL_I2C_Mem_Read+0xb4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e6:	9005      	str	r0, [sp, #20]
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	9205      	str	r2, [sp, #20]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	9305      	str	r3, [sp, #20]
 80036f0:	9b05      	ldr	r3, [sp, #20]
 80036f2:	e7cd      	b.n	8003690 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 80036f4:	2b03      	cmp	r3, #3
 80036f6:	d856      	bhi.n	80037a6 <HAL_I2C_Mem_Read+0x1ca>
        if (hi2c->XferSize == 1U)
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d115      	bne.n	8003728 <HAL_I2C_Mem_Read+0x14c>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036fc:	4632      	mov	r2, r6
 80036fe:	4639      	mov	r1, r7
 8003700:	4620      	mov	r0, r4
 8003702:	f7ff fcc1 	bl	8003088 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003706:	2800      	cmp	r0, #0
 8003708:	d1b3      	bne.n	8003672 <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	691a      	ldr	r2, [r3, #16]
 800370e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003710:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003714:	3301      	adds	r3, #1
 8003716:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003718:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800371a:	3b01      	subs	r3, #1
 800371c:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800371e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003720:	3b01      	subs	r3, #1
 8003722:	b29b      	uxth	r3, r3
 8003724:	8563      	strh	r3, [r4, #42]	; 0x2a
 8003726:	e7b5      	b.n	8003694 <HAL_I2C_Mem_Read+0xb8>
        else if (hi2c->XferSize == 2U)
 8003728:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800372a:	9600      	str	r6, [sp, #0]
 800372c:	463b      	mov	r3, r7
 800372e:	f04f 0200 	mov.w	r2, #0
 8003732:	4641      	mov	r1, r8
 8003734:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8003736:	d119      	bne.n	800376c <HAL_I2C_Mem_Read+0x190>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003738:	f7ff fc39 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 800373c:	2800      	cmp	r0, #0
 800373e:	d198      	bne.n	8003672 <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003748:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800374e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003750:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003752:	1c53      	adds	r3, r2, #1
 8003754:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8003756:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003758:	3b01      	subs	r3, #1
 800375a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800375c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800375e:	3b01      	subs	r3, #1
 8003760:	b29b      	uxth	r3, r3
 8003762:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003764:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	7053      	strb	r3, [r2, #1]
 800376a:	e7d2      	b.n	8003712 <HAL_I2C_Mem_Read+0x136>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800376c:	f7ff fc1f 	bl	8002fae <I2C_WaitOnFlagUntilTimeout>
 8003770:	2800      	cmp	r0, #0
 8003772:	f47f af7e 	bne.w	8003672 <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800377e:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003784:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8003786:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003788:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 800378a:	3301      	adds	r3, #1
 800378c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 800378e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8003790:	3b01      	subs	r3, #1
 8003792:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8003794:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003796:	3b01      	subs	r3, #1
 8003798:	b29b      	uxth	r3, r3
 800379a:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800379c:	4602      	mov	r2, r0
 800379e:	463b      	mov	r3, r7
 80037a0:	4641      	mov	r1, r8
 80037a2:	4620      	mov	r0, r4
 80037a4:	e7c8      	b.n	8003738 <HAL_I2C_Mem_Read+0x15c>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a6:	4632      	mov	r2, r6
 80037a8:	4639      	mov	r1, r7
 80037aa:	4620      	mov	r0, r4
 80037ac:	f7ff fc6c 	bl	8003088 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037b0:	2800      	cmp	r0, #0
 80037b2:	f47f af5e 	bne.w	8003672 <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b6:	6823      	ldr	r3, [r4, #0]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037bc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80037be:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80037c0:	1c53      	adds	r3, r2, #1
 80037c2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80037c4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80037c6:	3b01      	subs	r3, #1
 80037c8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80037ca:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037d2:	6823      	ldr	r3, [r4, #0]
 80037d4:	6959      	ldr	r1, [r3, #20]
 80037d6:	0749      	lsls	r1, r1, #29
 80037d8:	f57f af5c 	bpl.w	8003694 <HAL_I2C_Mem_Read+0xb8>
 80037dc:	e7c3      	b.n	8003766 <HAL_I2C_Mem_Read+0x18a>
 80037de:	bf00      	nop
 80037e0:	00100002 	.word	0x00100002
 80037e4:	ffff0000 	.word	0xffff0000
 80037e8:	00010004 	.word	0x00010004

080037ec <HAL_I2C_GetState>:
  return hi2c->State;
 80037ec:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80037f0:	4770      	bx	lr

080037f2 <LTDC_SetConfig>:
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80037f2:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80037f4:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80037f8:	01d2      	lsls	r2, r2, #7
 80037fa:	3284      	adds	r2, #132	; 0x84
 80037fc:	1883      	adds	r3, r0, r2
{
 80037fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003802:	68c6      	ldr	r6, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003804:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003806:	684c      	ldr	r4, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003808:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800380c:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8003810:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003812:	68c5      	ldr	r5, [r0, #12]
 8003814:	f10c 0701 	add.w	r7, ip, #1
 8003818:	f3c5 450b 	ubfx	r5, r5, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800381c:	f3c6 460b 	ubfx	r6, r6, #16, #12
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003820:	443d      	add	r5, r7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003822:	4426      	add	r6, r4
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003824:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003828:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800382a:	68c5      	ldr	r5, [r0, #12]
 800382c:	68ce      	ldr	r6, [r1, #12]
 800382e:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8003832:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003834:	689d      	ldr	r5, [r3, #8]
 8003836:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 800383a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800383c:	68c7      	ldr	r7, [r0, #12]
 800383e:	688d      	ldr	r5, [r1, #8]
 8003840:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8003844:	3501      	adds	r5, #1
 8003846:	443d      	add	r5, r7
 8003848:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
 800384c:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800384e:	691d      	ldr	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003850:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003852:	f025 0507 	bic.w	r5, r5, #7
 8003856:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003858:	f04f 0e00 	mov.w	lr, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800385c:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800385e:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003860:	f891 7032 	ldrb.w	r7, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003864:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003868:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800386c:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8003870:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8003874:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8003878:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800387c:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800387e:	695d      	ldr	r5, [r3, #20]
 8003880:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8003884:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003886:	694d      	ldr	r5, [r1, #20]
 8003888:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800388a:	69dd      	ldr	r5, [r3, #28]
 800388c:	f425 65e0 	bic.w	r5, r5, #1792	; 0x700
 8003890:	f025 0507 	bic.w	r5, r5, #7
 8003894:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003896:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800389a:	433d      	orrs	r5, r7
 800389c:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800389e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80038a0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80038a2:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80038a6:	629d      	str	r5, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80038a8:	b31e      	cbz	r6, 80038f2 <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80038aa:	2e01      	cmp	r6, #1
 80038ac:	d023      	beq.n	80038f6 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80038ae:	1eb5      	subs	r5, r6, #2
 80038b0:	2d02      	cmp	r5, #2
 80038b2:	d922      	bls.n	80038fa <LTDC_SetConfig+0x108>
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80038b4:	2e07      	cmp	r6, #7
 80038b6:	bf0c      	ite	eq
 80038b8:	2502      	moveq	r5, #2
 80038ba:	2501      	movne	r5, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80038bc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80038be:	f006 26e0 	and.w	r6, r6, #3758153728	; 0xe000e000
 80038c2:	62de      	str	r6, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80038c4:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80038c8:	6a8e      	ldr	r6, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80038ca:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80038cc:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80038ce:	436e      	muls	r6, r5
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80038d0:	3403      	adds	r4, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80038d2:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80038d6:	62dc      	str	r4, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80038d8:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80038da:	f424 64ff 	bic.w	r4, r4, #2040	; 0x7f8
 80038de:	f024 0407 	bic.w	r4, r4, #7
 80038e2:	631c      	str	r4, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80038e4:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80038e6:	5883      	ldr	r3, [r0, r2]
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	5083      	str	r3, [r0, r2]
}
 80038ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 80038f2:	2504      	movs	r5, #4
 80038f4:	e7e2      	b.n	80038bc <LTDC_SetConfig+0xca>
    tmp = 3U;
 80038f6:	2503      	movs	r5, #3
 80038f8:	e7e0      	b.n	80038bc <LTDC_SetConfig+0xca>
    tmp = 2U;
 80038fa:	2502      	movs	r5, #2
 80038fc:	e7de      	b.n	80038bc <LTDC_SetConfig+0xca>

080038fe <HAL_LTDC_MspInit>:
}
 80038fe:	4770      	bx	lr

08003900 <HAL_LTDC_Init>:
{
 8003900:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8003902:	4604      	mov	r4, r0
 8003904:	2800      	cmp	r0, #0
 8003906:	d063      	beq.n	80039d0 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003908:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 800390c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003910:	b91b      	cbnz	r3, 800391a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8003912:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8003916:	f7ff fff2 	bl	80038fe <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800391a:	2302      	movs	r3, #2
 800391c:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	699a      	ldr	r2, [r3, #24]
 8003924:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003928:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800392a:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800392e:	4302      	orrs	r2, r0
 8003930:	68e0      	ldr	r0, [r4, #12]
 8003932:	6999      	ldr	r1, [r3, #24]
 8003934:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003936:	6920      	ldr	r0, [r4, #16]
 8003938:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800393a:	430a      	orrs	r2, r1
 800393c:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800393e:	689a      	ldr	r2, [r3, #8]
 8003940:	4924      	ldr	r1, [pc, #144]	; (80039d4 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003942:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003944:	400a      	ands	r2, r1
 8003946:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800394e:	69a0      	ldr	r0, [r4, #24]
 8003950:	4302      	orrs	r2, r0
 8003952:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003954:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003956:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003958:	400a      	ands	r2, r1
 800395a:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800395c:	68da      	ldr	r2, [r3, #12]
 800395e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003962:	6a20      	ldr	r0, [r4, #32]
 8003964:	4302      	orrs	r2, r0
 8003966:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003968:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800396a:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800396c:	400a      	ands	r2, r1
 800396e:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003970:	691a      	ldr	r2, [r3, #16]
 8003972:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8003976:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003978:	4302      	orrs	r2, r0
 800397a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800397c:	695a      	ldr	r2, [r3, #20]
 800397e:	4011      	ands	r1, r2
 8003980:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003982:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003984:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003986:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800398a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800398c:	430a      	orrs	r2, r1
 800398e:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003992:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003996:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800399a:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 800399e:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80039a0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039a2:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80039a6:	430a      	orrs	r2, r1
 80039a8:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80039ac:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80039b0:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80039b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039b4:	f042 0206 	orr.w	r2, r2, #6
 80039b8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80039ba:	699a      	ldr	r2, [r3, #24]
 80039bc:	f042 0201 	orr.w	r2, r2, #1
 80039c0:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80039c2:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80039c4:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80039c6:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80039ca:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
}
 80039ce:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80039d0:	2001      	movs	r0, #1
 80039d2:	e7fc      	b.n	80039ce <HAL_LTDC_Init+0xce>
 80039d4:	f000f800 	.word	0xf000f800

080039d8 <HAL_LTDC_ConfigLayer>:
{
 80039d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80039dc:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80039e0:	2b01      	cmp	r3, #1
{
 80039e2:	4606      	mov	r6, r0
 80039e4:	460f      	mov	r7, r1
 80039e6:	4694      	mov	ip, r2
 80039e8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 80039ec:	d01f      	beq.n	8003a2e <HAL_LTDC_ConfigLayer+0x56>
 80039ee:	f04f 0801 	mov.w	r8, #1
 80039f2:	f886 80a0 	strb.w	r8, [r6, #160]	; 0xa0
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80039f6:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80039fa:	2434      	movs	r4, #52	; 0x34
 80039fc:	460d      	mov	r5, r1
 80039fe:	fb04 6402 	mla	r4, r4, r2, r6
 8003a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a04:	3438      	adds	r4, #56	; 0x38
 8003a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a10:	682b      	ldr	r3, [r5, #0]
 8003a12:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003a14:	4630      	mov	r0, r6
 8003a16:	4662      	mov	r2, ip
 8003a18:	4639      	mov	r1, r7
 8003a1a:	f7ff feea 	bl	80037f2 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a1e:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8003a20:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a22:	f8c3 8024 	str.w	r8, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003a26:	f886 80a1 	strb.w	r8, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003a2a:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8003a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003a32 <HAL_LTDC_ConfigColorKeying>:
{
 8003a32:	b510      	push	{r4, lr}
  __HAL_LOCK(hltdc);
 8003a34:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	f04f 0302 	mov.w	r3, #2
 8003a3e:	d013      	beq.n	8003a68 <HAL_LTDC_ConfigColorKeying+0x36>
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8003a40:	6804      	ldr	r4, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a42:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8003a46:	eb04 12c2 	add.w	r2, r4, r2, lsl #7
 8003a4a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003a4e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003a52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a56:	2301      	movs	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 8003a58:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a5c:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8003a5e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003a62:	2300      	movs	r3, #0
 8003a64:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8003a68:	4618      	mov	r0, r3
}
 8003a6a:	bd10      	pop	{r4, pc}

08003a6c <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 8003a6c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	f04f 0302 	mov.w	r3, #2
 8003a76:	d00f      	beq.n	8003a98 <HAL_LTDC_EnableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8003a78:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003a7a:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8003a7e:	3184      	adds	r1, #132	; 0x84
 8003a80:	6803      	ldr	r3, [r0, #0]
 8003a82:	585a      	ldr	r2, [r3, r1]
 8003a84:	f042 0202 	orr.w	r2, r2, #2
 8003a88:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 8003a8e:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8003a90:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003a94:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8003a98:	4618      	mov	r0, r3
}
 8003a9a:	4770      	bx	lr

08003a9c <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 8003a9c:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	f04f 0302 	mov.w	r3, #2
 8003aa6:	d00c      	beq.n	8003ac2 <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003aa8:	4a07      	ldr	r2, [pc, #28]	; (8003ac8 <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003aaa:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8003aae:	6993      	ldr	r3, [r2, #24]
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ab4:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8003abc:	2300      	movs	r3, #0
 8003abe:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 8003ac2:	4618      	mov	r0, r3
}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	40016800 	.word	0x40016800

08003acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003acc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	b340      	cbz	r0, 8003b26 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad4:	6803      	ldr	r3, [r0, #0]
 8003ad6:	07dd      	lsls	r5, r3, #31
 8003ad8:	d410      	bmi.n	8003afc <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ada:	6823      	ldr	r3, [r4, #0]
 8003adc:	0798      	lsls	r0, r3, #30
 8003ade:	d45e      	bmi.n	8003b9e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ae0:	6823      	ldr	r3, [r4, #0]
 8003ae2:	071a      	lsls	r2, r3, #28
 8003ae4:	f100 80a0 	bmi.w	8003c28 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	075b      	lsls	r3, r3, #29
 8003aec:	f100 80c0 	bmi.w	8003c70 <HAL_RCC_OscConfig+0x1a4>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003af0:	69a0      	ldr	r0, [r4, #24]
 8003af2:	2800      	cmp	r0, #0
 8003af4:	f040 8128 	bne.w	8003d48 <HAL_RCC_OscConfig+0x27c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8003af8:	2000      	movs	r0, #0
 8003afa:	e02b      	b.n	8003b54 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003afc:	4b8f      	ldr	r3, [pc, #572]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003afe:	689a      	ldr	r2, [r3, #8]
 8003b00:	f002 020c 	and.w	r2, r2, #12
 8003b04:	2a04      	cmp	r2, #4
 8003b06:	d007      	beq.n	8003b18 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b0e:	2a08      	cmp	r2, #8
 8003b10:	d10b      	bne.n	8003b2a <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b12:	685a      	ldr	r2, [r3, #4]
 8003b14:	0251      	lsls	r1, r2, #9
 8003b16:	d508      	bpl.n	8003b2a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b18:	4b88      	ldr	r3, [pc, #544]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	039a      	lsls	r2, r3, #14
 8003b1e:	d5dc      	bpl.n	8003ada <HAL_RCC_OscConfig+0xe>
 8003b20:	6863      	ldr	r3, [r4, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1d9      	bne.n	8003ada <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8003b26:	2001      	movs	r0, #1
 8003b28:	e014      	b.n	8003b54 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2a:	6862      	ldr	r2, [r4, #4]
 8003b2c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8003b30:	d113      	bne.n	8003b5a <HAL_RCC_OscConfig+0x8e>
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003b38:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003b3a:	f7fe fa7f 	bl	800203c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	4e7f      	ldr	r6, [pc, #508]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8003b40:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b42:	6833      	ldr	r3, [r6, #0]
 8003b44:	039b      	lsls	r3, r3, #14
 8003b46:	d4c8      	bmi.n	8003ada <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b48:	f7fe fa78 	bl	800203c <HAL_GetTick>
 8003b4c:	1b40      	subs	r0, r0, r5
 8003b4e:	2864      	cmp	r0, #100	; 0x64
 8003b50:	d9f7      	bls.n	8003b42 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8003b52:	2003      	movs	r0, #3
}
 8003b54:	b002      	add	sp, #8
 8003b56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b5a:	4d78      	ldr	r5, [pc, #480]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003b5c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8003b60:	682b      	ldr	r3, [r5, #0]
 8003b62:	d107      	bne.n	8003b74 <HAL_RCC_OscConfig+0xa8>
 8003b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b68:	602b      	str	r3, [r5, #0]
 8003b6a:	682b      	ldr	r3, [r5, #0]
 8003b6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b70:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b72:	e7e2      	b.n	8003b3a <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b78:	602b      	str	r3, [r5, #0]
 8003b7a:	682b      	ldr	r3, [r5, #0]
 8003b7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b80:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b82:	2a00      	cmp	r2, #0
 8003b84:	d1d9      	bne.n	8003b3a <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 8003b86:	f7fe fa59 	bl	800203c <HAL_GetTick>
 8003b8a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8c:	682b      	ldr	r3, [r5, #0]
 8003b8e:	039f      	lsls	r7, r3, #14
 8003b90:	d5a3      	bpl.n	8003ada <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b92:	f7fe fa53 	bl	800203c <HAL_GetTick>
 8003b96:	1b80      	subs	r0, r0, r6
 8003b98:	2864      	cmp	r0, #100	; 0x64
 8003b9a:	d9f7      	bls.n	8003b8c <HAL_RCC_OscConfig+0xc0>
 8003b9c:	e7d9      	b.n	8003b52 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b9e:	4b67      	ldr	r3, [pc, #412]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003ba0:	689a      	ldr	r2, [r3, #8]
 8003ba2:	f012 0f0c 	tst.w	r2, #12
 8003ba6:	d007      	beq.n	8003bb8 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bae:	2a08      	cmp	r2, #8
 8003bb0:	d111      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	025e      	lsls	r6, r3, #9
 8003bb6:	d40e      	bmi.n	8003bd6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb8:	4a60      	ldr	r2, [pc, #384]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003bba:	6813      	ldr	r3, [r2, #0]
 8003bbc:	079d      	lsls	r5, r3, #30
 8003bbe:	d502      	bpl.n	8003bc6 <HAL_RCC_OscConfig+0xfa>
 8003bc0:	68e3      	ldr	r3, [r4, #12]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d1af      	bne.n	8003b26 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bc6:	6813      	ldr	r3, [r2, #0]
 8003bc8:	6921      	ldr	r1, [r4, #16]
 8003bca:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003bce:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003bd2:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd4:	e784      	b.n	8003ae0 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bd6:	68e2      	ldr	r2, [r4, #12]
 8003bd8:	4b59      	ldr	r3, [pc, #356]	; (8003d40 <HAL_RCC_OscConfig+0x274>)
 8003bda:	b1b2      	cbz	r2, 8003c0a <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8003bdc:	2201      	movs	r2, #1
 8003bde:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003be0:	f7fe fa2c 	bl	800203c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be4:	4d55      	ldr	r5, [pc, #340]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8003be6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be8:	682b      	ldr	r3, [r5, #0]
 8003bea:	0798      	lsls	r0, r3, #30
 8003bec:	d507      	bpl.n	8003bfe <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bee:	682b      	ldr	r3, [r5, #0]
 8003bf0:	6922      	ldr	r2, [r4, #16]
 8003bf2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003bf6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8003bfa:	602b      	str	r3, [r5, #0]
 8003bfc:	e770      	b.n	8003ae0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bfe:	f7fe fa1d 	bl	800203c <HAL_GetTick>
 8003c02:	1b80      	subs	r0, r0, r6
 8003c04:	2802      	cmp	r0, #2
 8003c06:	d9ef      	bls.n	8003be8 <HAL_RCC_OscConfig+0x11c>
 8003c08:	e7a3      	b.n	8003b52 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8003c0a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fa16 	bl	800203c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c10:	4e4a      	ldr	r6, [pc, #296]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
        tickstart = HAL_GetTick();
 8003c12:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c14:	6833      	ldr	r3, [r6, #0]
 8003c16:	0799      	lsls	r1, r3, #30
 8003c18:	f57f af62 	bpl.w	8003ae0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c1c:	f7fe fa0e 	bl	800203c <HAL_GetTick>
 8003c20:	1b40      	subs	r0, r0, r5
 8003c22:	2802      	cmp	r0, #2
 8003c24:	d9f6      	bls.n	8003c14 <HAL_RCC_OscConfig+0x148>
 8003c26:	e794      	b.n	8003b52 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c28:	6962      	ldr	r2, [r4, #20]
 8003c2a:	4b45      	ldr	r3, [pc, #276]	; (8003d40 <HAL_RCC_OscConfig+0x274>)
 8003c2c:	b182      	cbz	r2, 8003c50 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003c34:	f7fe fa02 	bl	800203c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c38:	4e40      	ldr	r6, [pc, #256]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8003c3a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c3c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003c3e:	079f      	lsls	r7, r3, #30
 8003c40:	f53f af52 	bmi.w	8003ae8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c44:	f7fe f9fa 	bl	800203c <HAL_GetTick>
 8003c48:	1b40      	subs	r0, r0, r5
 8003c4a:	2802      	cmp	r0, #2
 8003c4c:	d9f6      	bls.n	8003c3c <HAL_RCC_OscConfig+0x170>
 8003c4e:	e780      	b.n	8003b52 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8003c50:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8003c54:	f7fe f9f2 	bl	800203c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c58:	4e38      	ldr	r6, [pc, #224]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8003c5a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c5c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8003c5e:	0798      	lsls	r0, r3, #30
 8003c60:	f57f af42 	bpl.w	8003ae8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c64:	f7fe f9ea 	bl	800203c <HAL_GetTick>
 8003c68:	1b40      	subs	r0, r0, r5
 8003c6a:	2802      	cmp	r0, #2
 8003c6c:	d9f6      	bls.n	8003c5c <HAL_RCC_OscConfig+0x190>
 8003c6e:	e770      	b.n	8003b52 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c70:	4b32      	ldr	r3, [pc, #200]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c74:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8003c78:	d128      	bne.n	8003ccc <HAL_RCC_OscConfig+0x200>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c7a:	9201      	str	r2, [sp, #4]
 8003c7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c7e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	9301      	str	r3, [sp, #4]
 8003c8c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8003c8e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	4d2c      	ldr	r5, [pc, #176]	; (8003d44 <HAL_RCC_OscConfig+0x278>)
 8003c92:	682b      	ldr	r3, [r5, #0]
 8003c94:	05d9      	lsls	r1, r3, #23
 8003c96:	d51b      	bpl.n	8003cd0 <HAL_RCC_OscConfig+0x204>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c98:	68a3      	ldr	r3, [r4, #8]
 8003c9a:	4d28      	ldr	r5, [pc, #160]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d127      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x224>
 8003ca0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003ca2:	f043 0301 	orr.w	r3, r3, #1
 8003ca6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8003ca8:	f7fe f9c8 	bl	800203c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cac:	4e23      	ldr	r6, [pc, #140]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
      tickstart = HAL_GetTick();
 8003cae:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cb0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cb4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8003cb6:	079b      	lsls	r3, r3, #30
 8003cb8:	d539      	bpl.n	8003d2e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8003cba:	2f00      	cmp	r7, #0
 8003cbc:	f43f af18 	beq.w	8003af0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc0:	4a1e      	ldr	r2, [pc, #120]	; (8003d3c <HAL_RCC_OscConfig+0x270>)
 8003cc2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003cc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cca:	e711      	b.n	8003af0 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8003ccc:	2700      	movs	r7, #0
 8003cce:	e7df      	b.n	8003c90 <HAL_RCC_OscConfig+0x1c4>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cd0:	682b      	ldr	r3, [r5, #0]
 8003cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8003cd8:	f7fe f9b0 	bl	800203c <HAL_GetTick>
 8003cdc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cde:	682b      	ldr	r3, [r5, #0]
 8003ce0:	05da      	lsls	r2, r3, #23
 8003ce2:	d4d9      	bmi.n	8003c98 <HAL_RCC_OscConfig+0x1cc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ce4:	f7fe f9aa 	bl	800203c <HAL_GetTick>
 8003ce8:	1b80      	subs	r0, r0, r6
 8003cea:	2802      	cmp	r0, #2
 8003cec:	d9f7      	bls.n	8003cde <HAL_RCC_OscConfig+0x212>
 8003cee:	e730      	b.n	8003b52 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	d104      	bne.n	8003cfe <HAL_RCC_OscConfig+0x232>
 8003cf4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003cf6:	f043 0304 	orr.w	r3, r3, #4
 8003cfa:	672b      	str	r3, [r5, #112]	; 0x70
 8003cfc:	e7d0      	b.n	8003ca0 <HAL_RCC_OscConfig+0x1d4>
 8003cfe:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	672a      	str	r2, [r5, #112]	; 0x70
 8003d06:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8003d08:	f022 0204 	bic.w	r2, r2, #4
 8003d0c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1ca      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x1dc>
      tickstart = HAL_GetTick();
 8003d12:	f7fe f993 	bl	800203c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d16:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8003d1a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8003d1e:	0798      	lsls	r0, r3, #30
 8003d20:	d5cb      	bpl.n	8003cba <HAL_RCC_OscConfig+0x1ee>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d22:	f7fe f98b 	bl	800203c <HAL_GetTick>
 8003d26:	1b80      	subs	r0, r0, r6
 8003d28:	4540      	cmp	r0, r8
 8003d2a:	d9f7      	bls.n	8003d1c <HAL_RCC_OscConfig+0x250>
 8003d2c:	e711      	b.n	8003b52 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2e:	f7fe f985 	bl	800203c <HAL_GetTick>
 8003d32:	1b40      	subs	r0, r0, r5
 8003d34:	4540      	cmp	r0, r8
 8003d36:	d9bd      	bls.n	8003cb4 <HAL_RCC_OscConfig+0x1e8>
 8003d38:	e70b      	b.n	8003b52 <HAL_RCC_OscConfig+0x86>
 8003d3a:	bf00      	nop
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	42470000 	.word	0x42470000
 8003d44:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d48:	4d36      	ldr	r5, [pc, #216]	; (8003e24 <HAL_RCC_OscConfig+0x358>)
 8003d4a:	68ab      	ldr	r3, [r5, #8]
 8003d4c:	f003 030c 	and.w	r3, r3, #12
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d03d      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x304>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d54:	4b34      	ldr	r3, [pc, #208]	; (8003e28 <HAL_RCC_OscConfig+0x35c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8003d5a:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d5c:	d12b      	bne.n	8003db6 <HAL_RCC_OscConfig+0x2ea>
        tickstart = HAL_GetTick();
 8003d5e:	f7fe f96d 	bl	800203c <HAL_GetTick>
 8003d62:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d64:	682b      	ldr	r3, [r5, #0]
 8003d66:	0199      	lsls	r1, r3, #6
 8003d68:	d41f      	bmi.n	8003daa <HAL_RCC_OscConfig+0x2de>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d6a:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003d72:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003d76:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003d78:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8003d7c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003d7e:	0852      	lsrs	r2, r2, #1
 8003d80:	3a01      	subs	r2, #1
 8003d82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d86:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003d88:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <HAL_RCC_OscConfig+0x35c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8a:	4d26      	ldr	r5, [pc, #152]	; (8003e24 <HAL_RCC_OscConfig+0x358>)
        __HAL_RCC_PLL_ENABLE();
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8003d90:	f7fe f954 	bl	800203c <HAL_GetTick>
 8003d94:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d96:	682b      	ldr	r3, [r5, #0]
 8003d98:	019a      	lsls	r2, r3, #6
 8003d9a:	f53f aead 	bmi.w	8003af8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d9e:	f7fe f94d 	bl	800203c <HAL_GetTick>
 8003da2:	1b00      	subs	r0, r0, r4
 8003da4:	2802      	cmp	r0, #2
 8003da6:	d9f6      	bls.n	8003d96 <HAL_RCC_OscConfig+0x2ca>
 8003da8:	e6d3      	b.n	8003b52 <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003daa:	f7fe f947 	bl	800203c <HAL_GetTick>
 8003dae:	1b80      	subs	r0, r0, r6
 8003db0:	2802      	cmp	r0, #2
 8003db2:	d9d7      	bls.n	8003d64 <HAL_RCC_OscConfig+0x298>
 8003db4:	e6cd      	b.n	8003b52 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8003db6:	f7fe f941 	bl	800203c <HAL_GetTick>
 8003dba:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dbc:	682b      	ldr	r3, [r5, #0]
 8003dbe:	019b      	lsls	r3, r3, #6
 8003dc0:	f57f ae9a 	bpl.w	8003af8 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fe f93a 	bl	800203c <HAL_GetTick>
 8003dc8:	1b00      	subs	r0, r0, r4
 8003dca:	2802      	cmp	r0, #2
 8003dcc:	d9f6      	bls.n	8003dbc <HAL_RCC_OscConfig+0x2f0>
 8003dce:	e6c0      	b.n	8003b52 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dd0:	2801      	cmp	r0, #1
 8003dd2:	f43f aebf 	beq.w	8003b54 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8003dd6:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd8:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dda:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dde:	4291      	cmp	r1, r2
 8003de0:	f47f aea1 	bne.w	8003b26 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003de4:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003de6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	428a      	cmp	r2, r1
 8003dec:	f47f ae9b 	bne.w	8003b26 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003df0:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df2:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8003df6:	401a      	ands	r2, r3
 8003df8:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8003dfc:	f47f ae93 	bne.w	8003b26 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003e02:	0852      	lsrs	r2, r2, #1
 8003e04:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8003e08:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e0a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8003e0e:	f47f ae8a 	bne.w	8003b26 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e12:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e14:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e18:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8003e1c:	f43f ae6c 	beq.w	8003af8 <HAL_RCC_OscConfig+0x2c>
 8003e20:	e681      	b.n	8003b26 <HAL_RCC_OscConfig+0x5a>
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	42470000 	.word	0x42470000

08003e2c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e2c:	4913      	ldr	r1, [pc, #76]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x50>)
{
 8003e2e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e30:	688b      	ldr	r3, [r1, #8]
 8003e32:	f003 030c 	and.w	r3, r3, #12
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d01c      	beq.n	8003e74 <HAL_RCC_GetSysClockFreq+0x48>
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d11c      	bne.n	8003e78 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e3e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e40:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e42:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e44:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e48:	bf14      	ite	ne
 8003e4a:	480d      	ldrne	r0, [pc, #52]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4c:	480d      	ldreq	r0, [pc, #52]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e4e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8003e52:	bf18      	it	ne
 8003e54:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e56:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e5a:	fba1 0100 	umull	r0, r1, r1, r0
 8003e5e:	f7fc f9c5 	bl	80001ec <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e62:	4b06      	ldr	r3, [pc, #24]	; (8003e7c <HAL_RCC_GetSysClockFreq+0x50>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8003e6e:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003e72:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e74:	4802      	ldr	r0, [pc, #8]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x54>)
 8003e76:	e7fc      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8003e78:	4802      	ldr	r0, [pc, #8]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8003e7a:	e7fa      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0x46>
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	007a1200 	.word	0x007a1200
 8003e84:	00f42400 	.word	0x00f42400

08003e88 <HAL_RCC_ClockConfig>:
{
 8003e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8003e8e:	4604      	mov	r4, r0
 8003e90:	b910      	cbnz	r0, 8003e98 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8003e92:	2001      	movs	r0, #1
}
 8003e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e98:	4b44      	ldr	r3, [pc, #272]	; (8003fac <HAL_RCC_ClockConfig+0x124>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	f002 020f 	and.w	r2, r2, #15
 8003ea0:	428a      	cmp	r2, r1
 8003ea2:	d328      	bcc.n	8003ef6 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea4:	6822      	ldr	r2, [r4, #0]
 8003ea6:	0797      	lsls	r7, r2, #30
 8003ea8:	d42d      	bmi.n	8003f06 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eaa:	07d0      	lsls	r0, r2, #31
 8003eac:	d441      	bmi.n	8003f32 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eae:	4b3f      	ldr	r3, [pc, #252]	; (8003fac <HAL_RCC_ClockConfig+0x124>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	f002 020f 	and.w	r2, r2, #15
 8003eb6:	42aa      	cmp	r2, r5
 8003eb8:	d866      	bhi.n	8003f88 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eba:	6822      	ldr	r2, [r4, #0]
 8003ebc:	0751      	lsls	r1, r2, #29
 8003ebe:	d46c      	bmi.n	8003f9a <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec0:	0713      	lsls	r3, r2, #28
 8003ec2:	d507      	bpl.n	8003ed4 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ec4:	4a3a      	ldr	r2, [pc, #232]	; (8003fb0 <HAL_RCC_ClockConfig+0x128>)
 8003ec6:	6921      	ldr	r1, [r4, #16]
 8003ec8:	6893      	ldr	r3, [r2, #8]
 8003eca:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003ece:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003ed2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ed4:	f7ff ffaa 	bl	8003e2c <HAL_RCC_GetSysClockFreq>
 8003ed8:	4b35      	ldr	r3, [pc, #212]	; (8003fb0 <HAL_RCC_ClockConfig+0x128>)
 8003eda:	4a36      	ldr	r2, [pc, #216]	; (8003fb4 <HAL_RCC_ClockConfig+0x12c>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003ee2:	5cd3      	ldrb	r3, [r2, r3]
 8003ee4:	40d8      	lsrs	r0, r3
 8003ee6:	4b34      	ldr	r3, [pc, #208]	; (8003fb8 <HAL_RCC_ClockConfig+0x130>)
 8003ee8:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8003eea:	4b34      	ldr	r3, [pc, #208]	; (8003fbc <HAL_RCC_ClockConfig+0x134>)
 8003eec:	6818      	ldr	r0, [r3, #0]
 8003eee:	f7fe f85d 	bl	8001fac <HAL_InitTick>
  return HAL_OK;
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	e7ce      	b.n	8003e94 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef6:	b2ca      	uxtb	r2, r1
 8003ef8:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 030f 	and.w	r3, r3, #15
 8003f00:	428b      	cmp	r3, r1
 8003f02:	d1c6      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xa>
 8003f04:	e7ce      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f06:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <HAL_RCC_ClockConfig+0x128>)
 8003f08:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f0c:	bf1e      	ittt	ne
 8003f0e:	6899      	ldrne	r1, [r3, #8]
 8003f10:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8003f14:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f16:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f18:	bf42      	ittt	mi
 8003f1a:	6899      	ldrmi	r1, [r3, #8]
 8003f1c:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8003f20:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f22:	4923      	ldr	r1, [pc, #140]	; (8003fb0 <HAL_RCC_ClockConfig+0x128>)
 8003f24:	68a0      	ldr	r0, [r4, #8]
 8003f26:	688b      	ldr	r3, [r1, #8]
 8003f28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f2c:	4303      	orrs	r3, r0
 8003f2e:	608b      	str	r3, [r1, #8]
 8003f30:	e7bb      	b.n	8003eaa <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f32:	6862      	ldr	r2, [r4, #4]
 8003f34:	4b1e      	ldr	r3, [pc, #120]	; (8003fb0 <HAL_RCC_ClockConfig+0x128>)
 8003f36:	2a01      	cmp	r2, #1
 8003f38:	d11c      	bne.n	8003f74 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f40:	d0a7      	beq.n	8003e92 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f42:	4e1b      	ldr	r6, [pc, #108]	; (8003fb0 <HAL_RCC_ClockConfig+0x128>)
 8003f44:	68b3      	ldr	r3, [r6, #8]
 8003f46:	f023 0303 	bic.w	r3, r3, #3
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003f4e:	f7fe f875 	bl	800203c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f52:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8003f56:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f58:	68b3      	ldr	r3, [r6, #8]
 8003f5a:	6862      	ldr	r2, [r4, #4]
 8003f5c:	f003 030c 	and.w	r3, r3, #12
 8003f60:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003f64:	d0a3      	beq.n	8003eae <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f66:	f7fe f869 	bl	800203c <HAL_GetTick>
 8003f6a:	1bc0      	subs	r0, r0, r7
 8003f6c:	4540      	cmp	r0, r8
 8003f6e:	d9f3      	bls.n	8003f58 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8003f70:	2003      	movs	r0, #3
 8003f72:	e78f      	b.n	8003e94 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f74:	1e91      	subs	r1, r2, #2
 8003f76:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f78:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f7a:	d802      	bhi.n	8003f82 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f7c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003f80:	e7de      	b.n	8003f40 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f82:	f013 0f02 	tst.w	r3, #2
 8003f86:	e7db      	b.n	8003f40 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f88:	b2ea      	uxtb	r2, r5
 8003f8a:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	42ab      	cmp	r3, r5
 8003f94:	f47f af7d 	bne.w	8003e92 <HAL_RCC_ClockConfig+0xa>
 8003f98:	e78f      	b.n	8003eba <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f9a:	4905      	ldr	r1, [pc, #20]	; (8003fb0 <HAL_RCC_ClockConfig+0x128>)
 8003f9c:	68e0      	ldr	r0, [r4, #12]
 8003f9e:	688b      	ldr	r3, [r1, #8]
 8003fa0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003fa4:	4303      	orrs	r3, r0
 8003fa6:	608b      	str	r3, [r1, #8]
 8003fa8:	e78a      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x38>
 8003faa:	bf00      	nop
 8003fac:	40023c00 	.word	0x40023c00
 8003fb0:	40023800 	.word	0x40023800
 8003fb4:	0800caa8 	.word	0x0800caa8
 8003fb8:	200000cc 	.word	0x200000cc
 8003fbc:	200000d4 	.word	0x200000d4

08003fc0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003fc2:	4a05      	ldr	r2, [pc, #20]	; (8003fd8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8003fca:	5cd3      	ldrb	r3, [r2, r3]
 8003fcc:	4a03      	ldr	r2, [pc, #12]	; (8003fdc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003fce:	6810      	ldr	r0, [r2, #0]
}
 8003fd0:	40d8      	lsrs	r0, r3
 8003fd2:	4770      	bx	lr
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	0800cab8 	.word	0x0800cab8
 8003fdc:	200000cc 	.word	0x200000cc

08003fe0 <HAL_RCCEx_PeriphCLKConfig>:
  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003fe0:	6803      	ldr	r3, [r0, #0]
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fe2:	f013 0f43 	tst.w	r3, #67	; 0x43
{
 8003fe6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fe8:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fea:	f040 808c 	bne.w	8004106 <HAL_RCCEx_PeriphCLKConfig+0x126>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003fee:	6823      	ldr	r3, [r4, #0]
 8003ff0:	f013 0f0c 	tst.w	r3, #12
 8003ff4:	d045      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ff6:	4b8b      	ldr	r3, [pc, #556]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ff8:	4d8b      	ldr	r5, [pc, #556]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLSAI_DISABLE();
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 8003ffe:	f7fe f81d 	bl	800203c <HAL_GetTick>
 8004002:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004004:	682b      	ldr	r3, [r5, #0]
 8004006:	009f      	lsls	r7, r3, #2
 8004008:	f100 80cf 	bmi.w	80041aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800400c:	6821      	ldr	r1, [r4, #0]
 800400e:	074e      	lsls	r6, r1, #29
 8004010:	d515      	bpl.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004012:	e9d4 0304 	ldrd	r0, r3, [r4, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004016:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800401a:	061b      	lsls	r3, r3, #24
 800401c:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 8004020:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004024:	4313      	orrs	r3, r2
 8004026:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800402a:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
 800402e:	6a22      	ldr	r2, [r4, #32]
 8004030:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8004034:	3a01      	subs	r2, #1
 8004036:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800403a:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800403e:	070d      	lsls	r5, r1, #28
 8004040:	d514      	bpl.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004042:	4a79      	ldr	r2, [pc, #484]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x248>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004044:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004046:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800404a:	6920      	ldr	r0, [r4, #16]
 800404c:	071b      	lsls	r3, r3, #28
 800404e:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8004052:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8004056:	430b      	orrs	r3, r1
 8004058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800405c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8004060:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004062:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004066:	430b      	orrs	r3, r1
 8004068:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800406c:	4b6d      	ldr	r3, [pc, #436]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800406e:	4e6e      	ldr	r6, [pc, #440]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLSAI_ENABLE();
 8004070:	2201      	movs	r2, #1
 8004072:	671a      	str	r2, [r3, #112]	; 0x70
    tickstart = HAL_GetTick();
 8004074:	f7fd ffe2 	bl	800203c <HAL_GetTick>
 8004078:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800407a:	6833      	ldr	r3, [r6, #0]
 800407c:	0098      	lsls	r0, r3, #2
 800407e:	f140 809b 	bpl.w	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	069b      	lsls	r3, r3, #26
 8004086:	d533      	bpl.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004088:	2300      	movs	r3, #0
 800408a:	9301      	str	r3, [sp, #4]
 800408c:	4b66      	ldr	r3, [pc, #408]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x248>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800408e:	4d67      	ldr	r5, [pc, #412]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8004090:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004092:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004096:	641a      	str	r2, [r3, #64]	; 0x40
 8004098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80040a2:	682b      	ldr	r3, [r5, #0]
 80040a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040a8:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80040aa:	f7fd ffc7 	bl	800203c <HAL_GetTick>
 80040ae:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	05d9      	lsls	r1, r3, #23
 80040b4:	f140 8087 	bpl.w	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80040b8:	4d5b      	ldr	r5, [pc, #364]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040ba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040bc:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80040c0:	f040 8088 	bne.w	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80040c6:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80040ca:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80040ce:	4a56      	ldr	r2, [pc, #344]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80040d0:	f040 80a4 	bne.w	800421c <HAL_RCCEx_PeriphCLKConfig+0x23c>
 80040d4:	6891      	ldr	r1, [r2, #8]
 80040d6:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80040da:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80040de:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80040e2:	4301      	orrs	r1, r0
 80040e4:	6091      	str	r1, [r2, #8]
 80040e6:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80040e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ec:	430b      	orrs	r3, r1
 80040ee:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80040f0:	6820      	ldr	r0, [r4, #0]
 80040f2:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80040f6:	bf1f      	itttt	ne
 80040f8:	4b4d      	ldrne	r3, [pc, #308]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80040fa:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 80040fe:	f8c3 21e0 	strne.w	r2, [r3, #480]	; 0x1e0
  }
  return HAL_OK;
 8004102:	2000      	movne	r0, #0
 8004104:	e04f      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
    __HAL_RCC_PLLI2S_DISABLE();
 8004106:	4b47      	ldr	r3, [pc, #284]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004108:	4e47      	ldr	r6, [pc, #284]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLI2S_DISABLE();
 800410a:	2200      	movs	r2, #0
 800410c:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 800410e:	f7fd ff95 	bl	800203c <HAL_GetTick>
 8004112:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004114:	6833      	ldr	r3, [r6, #0]
 8004116:	011f      	lsls	r7, r3, #4
 8004118:	d43f      	bmi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800411a:	6821      	ldr	r1, [r4, #0]
 800411c:	07cd      	lsls	r5, r1, #31
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800411e:	bf41      	itttt	mi
 8004120:	e9d4 2301 	ldrdmi	r2, r3, [r4, #4]
 8004124:	071b      	lslmi	r3, r3, #28
 8004126:	ea43 1382 	orrmi.w	r3, r3, r2, lsl #6
 800412a:	f8c6 3084 	strmi.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800412e:	0788      	lsls	r0, r1, #30
 8004130:	d515      	bpl.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x17e>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004132:	4a3d      	ldr	r2, [pc, #244]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x248>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004134:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004136:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800413a:	6865      	ldr	r5, [r4, #4]
 800413c:	061b      	lsls	r3, r3, #24
 800413e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8004142:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 8004146:	4303      	orrs	r3, r0
 8004148:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800414c:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 8004150:	69e3      	ldr	r3, [r4, #28]
 8004152:	f020 001f 	bic.w	r0, r0, #31
 8004156:	3b01      	subs	r3, #1
 8004158:	4303      	orrs	r3, r0
 800415a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800415e:	0649      	lsls	r1, r1, #25
 8004160:	d50a      	bpl.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004162:	68e3      	ldr	r3, [r4, #12]
 8004164:	6862      	ldr	r2, [r4, #4]
 8004166:	061b      	lsls	r3, r3, #24
 8004168:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800416c:	68a2      	ldr	r2, [r4, #8]
 800416e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8004172:	4a2d      	ldr	r2, [pc, #180]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004174:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8004178:	4b2a      	ldr	r3, [pc, #168]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x244>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800417a:	4e2b      	ldr	r6, [pc, #172]	; (8004228 <HAL_RCCEx_PeriphCLKConfig+0x248>)
    __HAL_RCC_PLLI2S_ENABLE();
 800417c:	2201      	movs	r2, #1
 800417e:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8004180:	f7fd ff5c 	bl	800203c <HAL_GetTick>
 8004184:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004186:	6833      	ldr	r3, [r6, #0]
 8004188:	011a      	lsls	r2, r3, #4
 800418a:	f53f af30 	bmi.w	8003fee <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800418e:	f7fd ff55 	bl	800203c <HAL_GetTick>
 8004192:	1b40      	subs	r0, r0, r5
 8004194:	2802      	cmp	r0, #2
 8004196:	d9f6      	bls.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004198:	e004      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800419a:	f7fd ff4f 	bl	800203c <HAL_GetTick>
 800419e:	1b40      	subs	r0, r0, r5
 80041a0:	2802      	cmp	r0, #2
 80041a2:	d9b7      	bls.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x134>
        return HAL_TIMEOUT;
 80041a4:	2003      	movs	r0, #3
}
 80041a6:	b003      	add	sp, #12
 80041a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80041aa:	f7fd ff47 	bl	800203c <HAL_GetTick>
 80041ae:	1b80      	subs	r0, r0, r6
 80041b0:	2802      	cmp	r0, #2
 80041b2:	f67f af27 	bls.w	8004004 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80041b6:	e7f5      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80041b8:	f7fd ff40 	bl	800203c <HAL_GetTick>
 80041bc:	1b40      	subs	r0, r0, r5
 80041be:	2802      	cmp	r0, #2
 80041c0:	f67f af5b 	bls.w	800407a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 80041c4:	e7ee      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80041c6:	f7fd ff39 	bl	800203c <HAL_GetTick>
 80041ca:	1b80      	subs	r0, r0, r6
 80041cc:	2802      	cmp	r0, #2
 80041ce:	f67f af6f 	bls.w	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80041d2:	e7e7      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80041d6:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80041da:	4293      	cmp	r3, r2
 80041dc:	f43f af72 	beq.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041e0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80041e2:	4a10      	ldr	r2, [pc, #64]	; (8004224 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80041e4:	2101      	movs	r1, #1
 80041e6:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041ee:	2100      	movs	r1, #0
 80041f0:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 80041f4:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041f6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80041f8:	07da      	lsls	r2, r3, #31
 80041fa:	f57f af63 	bpl.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
        tickstart = HAL_GetTick();
 80041fe:	f7fd ff1d 	bl	800203c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004202:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8004206:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004208:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800420a:	079b      	lsls	r3, r3, #30
 800420c:	f53f af5a 	bmi.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004210:	f7fd ff14 	bl	800203c <HAL_GetTick>
 8004214:	1b80      	subs	r0, r0, r6
 8004216:	42b8      	cmp	r0, r7
 8004218:	d9f6      	bls.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800421a:	e7c3      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800421c:	6891      	ldr	r1, [r2, #8]
 800421e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8004222:	e75f      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8004224:	42470000 	.word	0x42470000
 8004228:	40023800 	.word	0x40023800
 800422c:	40007000 	.word	0x40007000
 8004230:	42471000 	.word	0x42471000

08004234 <HAL_SDRAM_MspInit>:
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 8004234:	4770      	bx	lr

08004236 <HAL_SDRAM_Init>:
{
 8004236:	b538      	push	{r3, r4, r5, lr}
 8004238:	460d      	mov	r5, r1
  if (hsdram == NULL)
 800423a:	4604      	mov	r4, r0
 800423c:	b1c8      	cbz	r0, 8004272 <HAL_SDRAM_Init+0x3c>
  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800423e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004242:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004246:	b91b      	cbnz	r3, 8004250 <HAL_SDRAM_Init+0x1a>
    hsdram->Lock = HAL_UNLOCKED;
 8004248:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800424c:	f7ff fff2 	bl	8004234 <HAL_SDRAM_MspInit>
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004250:	2302      	movs	r3, #2
 8004252:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004256:	1d21      	adds	r1, r4, #4
 8004258:	6820      	ldr	r0, [r4, #0]
 800425a:	f000 fc75 	bl	8004b48 <FMC_SDRAM_Init>
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800425e:	6862      	ldr	r2, [r4, #4]
 8004260:	6820      	ldr	r0, [r4, #0]
 8004262:	4629      	mov	r1, r5
 8004264:	f000 fcab 	bl	8004bbe <FMC_SDRAM_Timing_Init>
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004268:	2301      	movs	r3, #1
 800426a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800426e:	2000      	movs	r0, #0
}
 8004270:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004272:	2001      	movs	r0, #1
 8004274:	e7fc      	b.n	8004270 <HAL_SDRAM_Init+0x3a>

08004276 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004276:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004278:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800427c:	2b02      	cmp	r3, #2
{
 800427e:	4605      	mov	r5, r0
 8004280:	460e      	mov	r6, r1
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004282:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8004284:	d012      	beq.n	80042ac <HAL_SDRAM_SendCommand+0x36>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004286:	f000 04fb 	and.w	r4, r0, #251	; 0xfb
 800428a:	2c01      	cmp	r4, #1
 800428c:	d10f      	bne.n	80042ae <HAL_SDRAM_SendCommand+0x38>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800428e:	2302      	movs	r3, #2
 8004290:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004294:	6828      	ldr	r0, [r5, #0]
 8004296:	f000 fcc8 	bl	8004c2a <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800429a:	6833      	ldr	r3, [r6, #0]
 800429c:	2b02      	cmp	r3, #2
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800429e:	bf06      	itte	eq
 80042a0:	2305      	moveq	r3, #5
 80042a2:	f885 302c 	strbeq.w	r3, [r5, #44]	; 0x2c
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80042a6:	f885 402c 	strbne.w	r4, [r5, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80042aa:	2000      	movs	r0, #0
}
 80042ac:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80042ae:	2001      	movs	r0, #1
 80042b0:	e7fc      	b.n	80042ac <HAL_SDRAM_SendCommand+0x36>

080042b2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80042b2:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80042b4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80042b8:	2b02      	cmp	r3, #2
{
 80042ba:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80042bc:	b2d8      	uxtb	r0, r3
 80042be:	d00d      	beq.n	80042dc <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80042c0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	b2dd      	uxtb	r5, r3
 80042c8:	d109      	bne.n	80042de <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80042ca:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80042cc:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80042ce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80042d2:	f000 fcd0 	bl	8004c76 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80042d6:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80042da:	2000      	movs	r0, #0
}
 80042dc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80042de:	2001      	movs	r0, #1
 80042e0:	e7fc      	b.n	80042dc <HAL_SDRAM_ProgramRefreshRate+0x2a>
	...

080042e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80042e8:	461f      	mov	r7, r3
 80042ea:	4689      	mov	r9, r1
 80042ec:	4690      	mov	r8, r2
 80042ee:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042f0:	f7fd fea4 	bl	800203c <HAL_GetTick>
 80042f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042f6:	443b      	add	r3, r7
 80042f8:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 80042fa:	f7fd fe9f 	bl	800203c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042fe:	4b26      	ldr	r3, [pc, #152]	; (8004398 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 8004300:	681e      	ldr	r6, [r3, #0]
 8004302:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8004306:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8004308:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800430a:	9601      	str	r6, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800430c:	6822      	ldr	r2, [r4, #0]
 800430e:	6893      	ldr	r3, [r2, #8]
 8004310:	ea39 0303 	bics.w	r3, r9, r3
 8004314:	bf0c      	ite	eq
 8004316:	2301      	moveq	r3, #1
 8004318:	2300      	movne	r3, #0
 800431a:	4543      	cmp	r3, r8
 800431c:	d101      	bne.n	8004322 <SPI_WaitFlagStateUntilTimeout+0x3e>
      }
      count--;
    }
  }

  return HAL_OK;
 800431e:	2000      	movs	r0, #0
 8004320:	e02e      	b.n	8004380 <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 8004322:	1c7b      	adds	r3, r7, #1
 8004324:	d0f3      	beq.n	800430e <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004326:	f7fd fe89 	bl	800203c <HAL_GetTick>
 800432a:	eba0 000a 	sub.w	r0, r0, sl
 800432e:	42a8      	cmp	r0, r5
 8004330:	d329      	bcc.n	8004386 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004332:	6823      	ldr	r3, [r4, #0]
 8004334:	685a      	ldr	r2, [r3, #4]
 8004336:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800433a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800433c:	6862      	ldr	r2, [r4, #4]
 800433e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8004342:	d10a      	bne.n	800435a <SPI_WaitFlagStateUntilTimeout+0x76>
 8004344:	68a2      	ldr	r2, [r4, #8]
 8004346:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800434a:	d002      	beq.n	8004352 <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800434c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8004350:	d103      	bne.n	800435a <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004358:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800435a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800435c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8004360:	d107      	bne.n	8004372 <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004370:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004372:	2301      	movs	r3, #1
 8004374:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8004378:	2300      	movs	r3, #0
 800437a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
        return HAL_TIMEOUT;
 800437e:	2003      	movs	r0, #3
}
 8004380:	b002      	add	sp, #8
 8004382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (count == 0U)
 8004386:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8004388:	2b00      	cmp	r3, #0
      count--;
 800438a:	9b01      	ldr	r3, [sp, #4]
 800438c:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8004390:	bf08      	it	eq
 8004392:	2500      	moveq	r5, #0
      count--;
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	e7b9      	b.n	800430c <SPI_WaitFlagStateUntilTimeout+0x28>
 8004398:	200000cc 	.word	0x200000cc

0800439c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800439c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800439e:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043a0:	6841      	ldr	r1, [r0, #4]
 80043a2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 80043a6:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043a8:	d122      	bne.n	80043f0 <SPI_EndRxTransaction+0x54>
 80043aa:	6881      	ldr	r1, [r0, #8]
 80043ac:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80043b0:	d002      	beq.n	80043b8 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043b2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80043b6:	d107      	bne.n	80043c8 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80043b8:	6825      	ldr	r5, [r4, #0]
 80043ba:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80043bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 80043c0:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80043c4:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80043c6:	d009      	beq.n	80043dc <SPI_EndRxTransaction+0x40>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043c8:	9200      	str	r2, [sp, #0]
 80043ca:	2180      	movs	r1, #128	; 0x80
 80043cc:	2200      	movs	r2, #0
 80043ce:	4620      	mov	r0, r4
 80043d0:	f7ff ff88 	bl	80042e4 <SPI_WaitFlagStateUntilTimeout>
 80043d4:	b930      	cbnz	r0, 80043e4 <SPI_EndRxTransaction+0x48>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 80043d6:	2000      	movs	r0, #0
}
 80043d8:	b003      	add	sp, #12
 80043da:	bd30      	pop	{r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043dc:	9200      	str	r2, [sp, #0]
 80043de:	2101      	movs	r1, #1
 80043e0:	2200      	movs	r2, #0
 80043e2:	e7f4      	b.n	80043ce <SPI_EndRxTransaction+0x32>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043e4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80043e6:	f043 0320 	orr.w	r3, r3, #32
 80043ea:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80043ec:	2003      	movs	r0, #3
 80043ee:	e7f3      	b.n	80043d8 <SPI_EndRxTransaction+0x3c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80043f0:	9200      	str	r2, [sp, #0]
 80043f2:	2101      	movs	r1, #1
 80043f4:	2200      	movs	r2, #0
 80043f6:	e7eb      	b.n	80043d0 <SPI_EndRxTransaction+0x34>

080043f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043f8:	b530      	push	{r4, r5, lr}
 80043fa:	460b      	mov	r3, r1
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80043fc:	4913      	ldr	r1, [pc, #76]	; (800444c <SPI_EndRxTxTransaction+0x54>)
 80043fe:	680d      	ldr	r5, [r1, #0]
 8004400:	4913      	ldr	r1, [pc, #76]	; (8004450 <SPI_EndRxTxTransaction+0x58>)
 8004402:	fbb5 f5f1 	udiv	r5, r5, r1
 8004406:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800440a:	434d      	muls	r5, r1
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800440c:	6841      	ldr	r1, [r0, #4]
{
 800440e:	b085      	sub	sp, #20
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004410:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
{
 8004414:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004416:	9503      	str	r5, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004418:	d10c      	bne.n	8004434 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800441a:	9200      	str	r2, [sp, #0]
 800441c:	2180      	movs	r1, #128	; 0x80
 800441e:	2200      	movs	r2, #0
 8004420:	f7ff ff60 	bl	80042e4 <SPI_WaitFlagStateUntilTimeout>
 8004424:	b178      	cbz	r0, 8004446 <SPI_EndRxTxTransaction+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004426:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004428:	f043 0320 	orr.w	r3, r3, #32
 800442c:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800442e:	2003      	movs	r0, #3
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8004430:	b005      	add	sp, #20
 8004432:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8004434:	9b03      	ldr	r3, [sp, #12]
 8004436:	b133      	cbz	r3, 8004446 <SPI_EndRxTxTransaction+0x4e>
      count--;
 8004438:	9b03      	ldr	r3, [sp, #12]
 800443a:	3b01      	subs	r3, #1
 800443c:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800443e:	6823      	ldr	r3, [r4, #0]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	061b      	lsls	r3, r3, #24
 8004444:	d4f6      	bmi.n	8004434 <SPI_EndRxTxTransaction+0x3c>
  return HAL_OK;
 8004446:	2000      	movs	r0, #0
 8004448:	e7f2      	b.n	8004430 <SPI_EndRxTxTransaction+0x38>
 800444a:	bf00      	nop
 800444c:	200000cc 	.word	0x200000cc
 8004450:	016e3600 	.word	0x016e3600

08004454 <HAL_SPI_MspInit>:
}
 8004454:	4770      	bx	lr

08004456 <HAL_SPI_Init>:
{
 8004456:	b538      	push	{r3, r4, r5, lr}
  if (hspi == NULL)
 8004458:	4604      	mov	r4, r0
 800445a:	2800      	cmp	r0, #0
 800445c:	d05a      	beq.n	8004514 <HAL_SPI_Init+0xbe>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800445e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d153      	bne.n	800450c <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004464:	6842      	ldr	r2, [r0, #4]
 8004466:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800446a:	d000      	beq.n	800446e <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800446c:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 800446e:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8004472:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004476:	b923      	cbnz	r3, 8004482 <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 8004478:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 800447c:	4620      	mov	r0, r4
 800447e:	f7ff ffe9 	bl	8004454 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8004482:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004484:	68a5      	ldr	r5, [r4, #8]
 8004486:	69a2      	ldr	r2, [r4, #24]
 8004488:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  hspi->State = HAL_SPI_STATE_BUSY;
 800448a:	2302      	movs	r3, #2
 800448c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004490:	680b      	ldr	r3, [r1, #0]
 8004492:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004496:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004498:	6863      	ldr	r3, [r4, #4]
 800449a:	f405 4504 	and.w	r5, r5, #33792	; 0x8400
 800449e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 80044a2:	432b      	orrs	r3, r5
 80044a4:	68e5      	ldr	r5, [r4, #12]
 80044a6:	f405 6500 	and.w	r5, r5, #2048	; 0x800
 80044aa:	432b      	orrs	r3, r5
 80044ac:	6925      	ldr	r5, [r4, #16]
 80044ae:	f005 0502 	and.w	r5, r5, #2
 80044b2:	432b      	orrs	r3, r5
 80044b4:	6965      	ldr	r5, [r4, #20]
 80044b6:	f005 0501 	and.w	r5, r5, #1
 80044ba:	432b      	orrs	r3, r5
 80044bc:	f402 7500 	and.w	r5, r2, #512	; 0x200
 80044c0:	432b      	orrs	r3, r5
 80044c2:	69e5      	ldr	r5, [r4, #28]
 80044c4:	f005 0538 	and.w	r5, r5, #56	; 0x38
 80044c8:	432b      	orrs	r3, r5
 80044ca:	6a25      	ldr	r5, [r4, #32]
 80044cc:	f005 0580 	and.w	r5, r5, #128	; 0x80
 80044d0:	432b      	orrs	r3, r5
 80044d2:	f400 5500 	and.w	r5, r0, #8192	; 0x2000
 80044d6:	432b      	orrs	r3, r5
 80044d8:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044dc:	0c12      	lsrs	r2, r2, #16
 80044de:	f003 0310 	and.w	r3, r3, #16
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044e2:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044e6:	f002 0204 	and.w	r2, r2, #4
 80044ea:	ea42 0203 	orr.w	r2, r2, r3
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80044ee:	bf08      	it	eq
 80044f0:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044f2:	604a      	str	r2, [r1, #4]
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 80044f4:	bf08      	it	eq
 80044f6:	610b      	streq	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044f8:	69cb      	ldr	r3, [r1, #28]
 80044fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044fe:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004500:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8004502:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004504:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004506:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 800450a:	bd38      	pop	{r3, r4, r5, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800450c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800450e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004512:	e7ac      	b.n	800446e <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8004514:	2001      	movs	r0, #1
 8004516:	e7f8      	b.n	800450a <HAL_SPI_Init+0xb4>

08004518 <HAL_SPI_MspDeInit>:
 8004518:	4770      	bx	lr

0800451a <HAL_SPI_DeInit>:
{
 800451a:	b510      	push	{r4, lr}
  if (hspi == NULL)
 800451c:	4604      	mov	r4, r0
 800451e:	b180      	cbz	r0, 8004542 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8004520:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8004522:	2302      	movs	r3, #2
 8004524:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8004528:	6813      	ldr	r3, [r2, #0]
 800452a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800452e:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8004530:	f7ff fff2 	bl	8004518 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004534:	2000      	movs	r0, #0
 8004536:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8004538:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 800453c:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
}
 8004540:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004542:	2001      	movs	r0, #1
 8004544:	e7fc      	b.n	8004540 <HAL_SPI_DeInit+0x26>

08004546 <HAL_SPI_Transmit>:
{
 8004546:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800454a:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 800454c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8004550:	2b01      	cmp	r3, #1
{
 8004552:	4604      	mov	r4, r0
 8004554:	460e      	mov	r6, r1
 8004556:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8004558:	f000 80b9 	beq.w	80046ce <HAL_SPI_Transmit+0x188>
 800455c:	2301      	movs	r3, #1
 800455e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8004562:	f7fd fd6b 	bl	800203c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004566:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 800456a:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 800456c:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800456e:	b2d8      	uxtb	r0, r3
 8004570:	f040 80ab 	bne.w	80046ca <HAL_SPI_Transmit+0x184>
  if ((pData == NULL) || (Size == 0U))
 8004574:	2e00      	cmp	r6, #0
 8004576:	d077      	beq.n	8004668 <HAL_SPI_Transmit+0x122>
 8004578:	f1b8 0f00 	cmp.w	r8, #0
 800457c:	d074      	beq.n	8004668 <HAL_SPI_Transmit+0x122>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800457e:	2303      	movs	r3, #3
 8004580:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004584:	2300      	movs	r3, #0
 8004586:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8004588:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800458c:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004590:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004592:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004594:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004596:	68a3      	ldr	r3, [r4, #8]
    __HAL_SPI_DISABLE(hspi);
 8004598:	6825      	ldr	r5, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800459a:	6326      	str	r6, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800459c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 80045a0:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045a4:	d107      	bne.n	80045b6 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 80045a6:	682b      	ldr	r3, [r5, #0]
 80045a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ac:	602b      	str	r3, [r5, #0]
    SPI_1LINE_TX(hspi);
 80045ae:	682b      	ldr	r3, [r5, #0]
 80045b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045b4:	602b      	str	r3, [r5, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045bc:	d107      	bne.n	80045ce <HAL_SPI_Transmit+0x88>
    SPI_RESET_CRC(hspi);
 80045be:	682b      	ldr	r3, [r5, #0]
 80045c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045c4:	602b      	str	r3, [r5, #0]
 80045c6:	682b      	ldr	r3, [r5, #0]
 80045c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80045cc:	602b      	str	r3, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045ce:	682b      	ldr	r3, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045d0:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045d2:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80045d4:	bf5e      	ittt	pl
 80045d6:	682b      	ldrpl	r3, [r5, #0]
 80045d8:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80045dc:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045de:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e2:	6863      	ldr	r3, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80045e4:	d14c      	bne.n	8004680 <HAL_SPI_Transmit+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e6:	b113      	cbz	r3, 80045ee <HAL_SPI_Transmit+0xa8>
 80045e8:	f1b8 0f01 	cmp.w	r8, #1
 80045ec:	d107      	bne.n	80045fe <HAL_SPI_Transmit+0xb8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045ee:	f836 3b02 	ldrh.w	r3, [r6], #2
 80045f2:	60eb      	str	r3, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f4:	6326      	str	r6, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80045f6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80045fe:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004600:	b29b      	uxth	r3, r3
 8004602:	b9f3      	cbnz	r3, 8004642 <HAL_SPI_Transmit+0xfc>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004604:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004606:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800460a:	d104      	bne.n	8004616 <HAL_SPI_Transmit+0xd0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800460c:	6822      	ldr	r2, [r4, #0]
 800460e:	6813      	ldr	r3, [r2, #0]
 8004610:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004614:	6013      	str	r3, [r2, #0]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004616:	464a      	mov	r2, r9
 8004618:	4639      	mov	r1, r7
 800461a:	4620      	mov	r0, r4
 800461c:	f7ff feec 	bl	80043f8 <SPI_EndRxTxTransaction>
 8004620:	b108      	cbz	r0, 8004626 <HAL_SPI_Transmit+0xe0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004622:	2320      	movs	r3, #32
 8004624:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004626:	68a3      	ldr	r3, [r4, #8]
 8004628:	b933      	cbnz	r3, 8004638 <HAL_SPI_Transmit+0xf2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800462a:	9301      	str	r3, [sp, #4]
 800462c:	6823      	ldr	r3, [r4, #0]
 800462e:	68da      	ldr	r2, [r3, #12]
 8004630:	9201      	str	r2, [sp, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	9301      	str	r3, [sp, #4]
 8004636:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004638:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800463a:	3800      	subs	r0, #0
 800463c:	bf18      	it	ne
 800463e:	2001      	movne	r0, #1
error:
 8004640:	e012      	b.n	8004668 <HAL_SPI_Transmit+0x122>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004642:	6822      	ldr	r2, [r4, #0]
 8004644:	6893      	ldr	r3, [r2, #8]
 8004646:	0798      	lsls	r0, r3, #30
 8004648:	d505      	bpl.n	8004656 <HAL_SPI_Transmit+0x110>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800464a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800464c:	f833 1b02 	ldrh.w	r1, [r3], #2
 8004650:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004652:	6323      	str	r3, [r4, #48]	; 0x30
 8004654:	e7cf      	b.n	80045f6 <HAL_SPI_Transmit+0xb0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004656:	f7fd fcf1 	bl	800203c <HAL_GetTick>
 800465a:	eba0 0009 	sub.w	r0, r0, r9
 800465e:	42b8      	cmp	r0, r7
 8004660:	d30b      	bcc.n	800467a <HAL_SPI_Transmit+0x134>
 8004662:	1c79      	adds	r1, r7, #1
 8004664:	d0cb      	beq.n	80045fe <HAL_SPI_Transmit+0xb8>
          errorcode = HAL_TIMEOUT;
 8004666:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004668:	2301      	movs	r3, #1
 800466a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800466e:	2300      	movs	r3, #0
 8004670:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004674:	b003      	add	sp, #12
 8004676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800467a:	2f00      	cmp	r7, #0
 800467c:	d1bf      	bne.n	80045fe <HAL_SPI_Transmit+0xb8>
 800467e:	e7f2      	b.n	8004666 <HAL_SPI_Transmit+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004680:	b113      	cbz	r3, 8004688 <HAL_SPI_Transmit+0x142>
 8004682:	f1b8 0f01 	cmp.w	r8, #1
 8004686:	d108      	bne.n	800469a <HAL_SPI_Transmit+0x154>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004688:	7833      	ldrb	r3, [r6, #0]
 800468a:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800468c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800468e:	3301      	adds	r3, #1
 8004690:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004692:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004694:	3b01      	subs	r3, #1
 8004696:	b29b      	uxth	r3, r3
 8004698:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800469a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800469c:	b29b      	uxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d0b0      	beq.n	8004604 <HAL_SPI_Transmit+0xbe>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80046a2:	6823      	ldr	r3, [r4, #0]
 80046a4:	689a      	ldr	r2, [r3, #8]
 80046a6:	0792      	lsls	r2, r2, #30
 80046a8:	d503      	bpl.n	80046b2 <HAL_SPI_Transmit+0x16c>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046aa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80046ac:	7812      	ldrb	r2, [r2, #0]
 80046ae:	731a      	strb	r2, [r3, #12]
 80046b0:	e7ec      	b.n	800468c <HAL_SPI_Transmit+0x146>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046b2:	f7fd fcc3 	bl	800203c <HAL_GetTick>
 80046b6:	eba0 0009 	sub.w	r0, r0, r9
 80046ba:	42b8      	cmp	r0, r7
 80046bc:	d302      	bcc.n	80046c4 <HAL_SPI_Transmit+0x17e>
 80046be:	1c7b      	adds	r3, r7, #1
 80046c0:	d0eb      	beq.n	800469a <HAL_SPI_Transmit+0x154>
 80046c2:	e7d0      	b.n	8004666 <HAL_SPI_Transmit+0x120>
 80046c4:	2f00      	cmp	r7, #0
 80046c6:	d1e8      	bne.n	800469a <HAL_SPI_Transmit+0x154>
 80046c8:	e7cd      	b.n	8004666 <HAL_SPI_Transmit+0x120>
    errorcode = HAL_BUSY;
 80046ca:	2002      	movs	r0, #2
 80046cc:	e7cc      	b.n	8004668 <HAL_SPI_Transmit+0x122>
  __HAL_LOCK(hspi);
 80046ce:	2002      	movs	r0, #2
 80046d0:	e7d0      	b.n	8004674 <HAL_SPI_Transmit+0x12e>

080046d2 <HAL_SPI_TransmitReceive>:
{
 80046d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046d6:	b085      	sub	sp, #20
 80046d8:	4699      	mov	r9, r3
  __IO uint32_t tmpreg = 0U;
 80046da:	2300      	movs	r3, #0
 80046dc:	9302      	str	r3, [sp, #8]
  __HAL_LOCK(hspi);
 80046de:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80046e2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  __HAL_LOCK(hspi);
 80046e4:	2b01      	cmp	r3, #1
{
 80046e6:	4604      	mov	r4, r0
 80046e8:	4688      	mov	r8, r1
 80046ea:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 80046ec:	f000 813a 	beq.w	8004964 <HAL_SPI_TransmitReceive+0x292>
 80046f0:	2301      	movs	r3, #1
 80046f2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80046f6:	f7fd fca1 	bl	800203c <HAL_GetTick>
  tmp_state           = hspi->State;
 80046fa:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 80046fe:	6863      	ldr	r3, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004700:	2a01      	cmp	r2, #1
  tickstart = HAL_GetTick();
 8004702:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8004704:	b2d1      	uxtb	r1, r2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004706:	d00a      	beq.n	800471e <HAL_SPI_TransmitReceive+0x4c>
 8004708:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470c:	f040 8128 	bne.w	8004960 <HAL_SPI_TransmitReceive+0x28e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004710:	68a2      	ldr	r2, [r4, #8]
 8004712:	2a00      	cmp	r2, #0
 8004714:	f040 8124 	bne.w	8004960 <HAL_SPI_TransmitReceive+0x28e>
 8004718:	2904      	cmp	r1, #4
 800471a:	f040 8121 	bne.w	8004960 <HAL_SPI_TransmitReceive+0x28e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800471e:	f1b8 0f00 	cmp.w	r8, #0
 8004722:	f000 810f 	beq.w	8004944 <HAL_SPI_TransmitReceive+0x272>
 8004726:	2d00      	cmp	r5, #0
 8004728:	f000 810c 	beq.w	8004944 <HAL_SPI_TransmitReceive+0x272>
 800472c:	f1b9 0f00 	cmp.w	r9, #0
 8004730:	f000 8108 	beq.w	8004944 <HAL_SPI_TransmitReceive+0x272>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004734:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004738:	63a5      	str	r5, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800473a:	2a04      	cmp	r2, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800473c:	bf1c      	itt	ne
 800473e:	2205      	movne	r2, #5
 8004740:	f884 2051 	strbne.w	r2, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004744:	2200      	movs	r2, #0
 8004746:	6562      	str	r2, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8004748:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800474c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 800474e:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004752:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    SPI_RESET_CRC(hspi);
 8004756:	6825      	ldr	r5, [r4, #0]
  hspi->RxXferSize  = Size;
 8004758:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800475c:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004760:	f8a4 9036 	strh.w	r9, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004764:	f8a4 9034 	strh.w	r9, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004768:	d107      	bne.n	800477a <HAL_SPI_TransmitReceive+0xa8>
    SPI_RESET_CRC(hspi);
 800476a:	682a      	ldr	r2, [r5, #0]
 800476c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004770:	602a      	str	r2, [r5, #0]
 8004772:	682a      	ldr	r2, [r5, #0]
 8004774:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004778:	602a      	str	r2, [r5, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800477a:	682a      	ldr	r2, [r5, #0]
 800477c:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 800477e:	bf5e      	ittt	pl
 8004780:	682a      	ldrpl	r2, [r5, #0]
 8004782:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8004786:	602a      	strpl	r2, [r5, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004788:	68e2      	ldr	r2, [r4, #12]
 800478a:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800478e:	d169      	bne.n	8004864 <HAL_SPI_TransmitReceive+0x192>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004790:	b113      	cbz	r3, 8004798 <HAL_SPI_TransmitReceive+0xc6>
 8004792:	f1b9 0f01 	cmp.w	r9, #1
 8004796:	d108      	bne.n	80047aa <HAL_SPI_TransmitReceive+0xd8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004798:	4641      	mov	r1, r8
 800479a:	f831 3b02 	ldrh.w	r3, [r1], #2
 800479e:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 80047a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80047a2:	6321      	str	r1, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80047aa:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047ac:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	b9b3      	cbnz	r3, 80047e0 <HAL_SPI_TransmitReceive+0x10e>
 80047b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	b99b      	cbnz	r3, 80047e0 <HAL_SPI_TransmitReceive+0x10e>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80047ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047be:	f040 80ac 	bne.w	800491a <HAL_SPI_TransmitReceive+0x248>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80047c2:	2201      	movs	r2, #1
 80047c4:	9700      	str	r7, [sp, #0]
 80047c6:	4633      	mov	r3, r6
 80047c8:	4611      	mov	r1, r2
 80047ca:	4620      	mov	r0, r4
 80047cc:	f7ff fd8a 	bl	80042e4 <SPI_WaitFlagStateUntilTimeout>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	f000 809e 	beq.w	8004912 <HAL_SPI_TransmitReceive+0x240>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80047d6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80047d8:	f043 0302 	orr.w	r3, r3, #2
 80047dc:	6563      	str	r3, [r4, #84]	; 0x54
 80047de:	e020      	b.n	8004822 <HAL_SPI_TransmitReceive+0x150>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047e0:	6822      	ldr	r2, [r4, #0]
 80047e2:	6893      	ldr	r3, [r2, #8]
 80047e4:	079b      	lsls	r3, r3, #30
 80047e6:	d504      	bpl.n	80047f2 <HAL_SPI_TransmitReceive+0x120>
 80047e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	b10b      	cbz	r3, 80047f2 <HAL_SPI_TransmitReceive+0x120>
 80047ee:	bb1d      	cbnz	r5, 8004838 <HAL_SPI_TransmitReceive+0x166>
{
 80047f0:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047f2:	6891      	ldr	r1, [r2, #8]
 80047f4:	f011 0101 	ands.w	r1, r1, #1
 80047f8:	d00c      	beq.n	8004814 <HAL_SPI_TransmitReceive+0x142>
 80047fa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	b14b      	cbz	r3, 8004814 <HAL_SPI_TransmitReceive+0x142>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004800:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004802:	68d2      	ldr	r2, [r2, #12]
 8004804:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004808:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800480a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800480c:	3b01      	subs	r3, #1
 800480e:	b29b      	uxth	r3, r3
 8004810:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004812:	460d      	mov	r5, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004814:	f7fd fc12 	bl	800203c <HAL_GetTick>
 8004818:	1bc0      	subs	r0, r0, r7
 800481a:	42b0      	cmp	r0, r6
 800481c:	d3c6      	bcc.n	80047ac <HAL_SPI_TransmitReceive+0xda>
 800481e:	1c70      	adds	r0, r6, #1
 8004820:	d0c4      	beq.n	80047ac <HAL_SPI_TransmitReceive+0xda>
      errorcode = HAL_TIMEOUT;
 8004822:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004824:	2301      	movs	r3, #1
 8004826:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800482a:	2300      	movs	r3, #0
 800482c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8004830:	4628      	mov	r0, r5
 8004832:	b005      	add	sp, #20
 8004834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004838:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800483a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800483e:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004840:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8004842:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8004844:	3b01      	subs	r3, #1
 8004846:	b29b      	uxth	r3, r3
 8004848:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800484a:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 800484c:	b2ad      	uxth	r5, r5
 800484e:	2d00      	cmp	r5, #0
 8004850:	d1ce      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x11e>
 8004852:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004858:	d1ca      	bne.n	80047f0 <HAL_SPI_TransmitReceive+0x11e>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800485a:	6813      	ldr	r3, [r2, #0]
 800485c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	e7c6      	b.n	80047f2 <HAL_SPI_TransmitReceive+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004864:	b113      	cbz	r3, 800486c <HAL_SPI_TransmitReceive+0x19a>
 8004866:	f1b9 0f01 	cmp.w	r9, #1
 800486a:	d109      	bne.n	8004880 <HAL_SPI_TransmitReceive+0x1ae>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800486c:	f898 3000 	ldrb.w	r3, [r8]
 8004870:	732b      	strb	r3, [r5, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004872:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004874:	3301      	adds	r3, #1
 8004876:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8004878:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800487a:	3b01      	subs	r3, #1
 800487c:	b29b      	uxth	r3, r3
 800487e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8004880:	2501      	movs	r5, #1
 8004882:	e022      	b.n	80048ca <HAL_SPI_TransmitReceive+0x1f8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004884:	6822      	ldr	r2, [r4, #0]
 8004886:	6893      	ldr	r3, [r2, #8]
 8004888:	0799      	lsls	r1, r3, #30
 800488a:	d504      	bpl.n	8004896 <HAL_SPI_TransmitReceive+0x1c4>
 800488c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800488e:	b29b      	uxth	r3, r3
 8004890:	b10b      	cbz	r3, 8004896 <HAL_SPI_TransmitReceive+0x1c4>
 8004892:	bb1d      	cbnz	r5, 80048dc <HAL_SPI_TransmitReceive+0x20a>
        txallowed = 1U;
 8004894:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004896:	6822      	ldr	r2, [r4, #0]
 8004898:	6891      	ldr	r1, [r2, #8]
 800489a:	f011 0101 	ands.w	r1, r1, #1
 800489e:	d00d      	beq.n	80048bc <HAL_SPI_TransmitReceive+0x1ea>
 80048a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	b153      	cbz	r3, 80048bc <HAL_SPI_TransmitReceive+0x1ea>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048a8:	68d2      	ldr	r2, [r2, #12]
 80048aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80048ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80048ae:	3301      	adds	r3, #1
 80048b0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80048b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80048ba:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80048bc:	f7fd fbbe 	bl	800203c <HAL_GetTick>
 80048c0:	1bc0      	subs	r0, r0, r7
 80048c2:	42b0      	cmp	r0, r6
 80048c4:	d322      	bcc.n	800490c <HAL_SPI_TransmitReceive+0x23a>
 80048c6:	1c73      	adds	r3, r6, #1
 80048c8:	d1ab      	bne.n	8004822 <HAL_SPI_TransmitReceive+0x150>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80048ca:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1d8      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x1b2>
 80048d2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1d4      	bne.n	8004884 <HAL_SPI_TransmitReceive+0x1b2>
 80048da:	e76d      	b.n	80047b8 <HAL_SPI_TransmitReceive+0xe6>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 80048e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80048e4:	3301      	adds	r3, #1
 80048e6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80048e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80048f0:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 80048f2:	b2ad      	uxth	r5, r5
 80048f4:	2d00      	cmp	r5, #0
 80048f6:	d1cd      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x1c2>
 80048f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80048fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fe:	d1c9      	bne.n	8004894 <HAL_SPI_TransmitReceive+0x1c2>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	6813      	ldr	r3, [r2, #0]
 8004904:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e7c4      	b.n	8004896 <HAL_SPI_TransmitReceive+0x1c4>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800490c:	2e00      	cmp	r6, #0
 800490e:	d1dc      	bne.n	80048ca <HAL_SPI_TransmitReceive+0x1f8>
 8004910:	e787      	b.n	8004822 <HAL_SPI_TransmitReceive+0x150>
    tmpreg = READ_REG(hspi->Instance->DR);
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	9302      	str	r3, [sp, #8]
    UNUSED(tmpreg);
 8004918:	9b02      	ldr	r3, [sp, #8]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800491a:	6822      	ldr	r2, [r4, #0]
 800491c:	6895      	ldr	r5, [r2, #8]
 800491e:	f015 0510 	ands.w	r5, r5, #16
 8004922:	d007      	beq.n	8004934 <HAL_SPI_TransmitReceive+0x262>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004924:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004926:	f043 0302 	orr.w	r3, r3, #2
 800492a:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 800492c:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004930:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8004932:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004934:	463a      	mov	r2, r7
 8004936:	4631      	mov	r1, r6
 8004938:	4620      	mov	r0, r4
 800493a:	f7ff fd5d 	bl	80043f8 <SPI_EndRxTxTransaction>
 800493e:	b118      	cbz	r0, 8004948 <HAL_SPI_TransmitReceive+0x276>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004940:	2320      	movs	r3, #32
 8004942:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004944:	2501      	movs	r5, #1
 8004946:	e76d      	b.n	8004824 <HAL_SPI_TransmitReceive+0x152>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004948:	68a3      	ldr	r3, [r4, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	f47f af6a 	bne.w	8004824 <HAL_SPI_TransmitReceive+0x152>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004950:	9303      	str	r3, [sp, #12]
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	9203      	str	r2, [sp, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	9303      	str	r3, [sp, #12]
 800495c:	9b03      	ldr	r3, [sp, #12]
 800495e:	e761      	b.n	8004824 <HAL_SPI_TransmitReceive+0x152>
    errorcode = HAL_BUSY;
 8004960:	2502      	movs	r5, #2
 8004962:	e75f      	b.n	8004824 <HAL_SPI_TransmitReceive+0x152>
  __HAL_LOCK(hspi);
 8004964:	2502      	movs	r5, #2
 8004966:	e763      	b.n	8004830 <HAL_SPI_TransmitReceive+0x15e>

08004968 <HAL_SPI_Receive>:
{
 8004968:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800496c:	461d      	mov	r5, r3
  __IO uint32_t tmpreg = 0U;
 800496e:	2300      	movs	r3, #0
 8004970:	9303      	str	r3, [sp, #12]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004972:	6843      	ldr	r3, [r0, #4]
 8004974:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8004978:	4604      	mov	r4, r0
 800497a:	4688      	mov	r8, r1
 800497c:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800497e:	d10c      	bne.n	800499a <HAL_SPI_Receive+0x32>
 8004980:	6883      	ldr	r3, [r0, #8]
 8004982:	b953      	cbnz	r3, 800499a <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004984:	2304      	movs	r3, #4
 8004986:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800498a:	4613      	mov	r3, r2
 800498c:	9500      	str	r5, [sp, #0]
 800498e:	460a      	mov	r2, r1
 8004990:	f7ff fe9f 	bl	80046d2 <HAL_SPI_TransmitReceive>
}
 8004994:	b004      	add	sp, #16
 8004996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 800499a:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 800499e:	2b01      	cmp	r3, #1
 80049a0:	f000 80cd 	beq.w	8004b3e <HAL_SPI_Receive+0x1d6>
 80049a4:	2301      	movs	r3, #1
 80049a6:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80049aa:	f7fd fb47 	bl	800203c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80049ae:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80049b2:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80049b4:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80049b6:	b2d8      	uxtb	r0, r3
 80049b8:	f040 80bf 	bne.w	8004b3a <HAL_SPI_Receive+0x1d2>
  if ((pData == NULL) || (Size == 0U))
 80049bc:	f1b8 0f00 	cmp.w	r8, #0
 80049c0:	f000 808a 	beq.w	8004ad8 <HAL_SPI_Receive+0x170>
 80049c4:	2f00      	cmp	r7, #0
 80049c6:	f000 8087 	beq.w	8004ad8 <HAL_SPI_Receive+0x170>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80049cc:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049d0:	2000      	movs	r0, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049d2:	2304      	movs	r3, #4
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049d4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80049d8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->TxISR       = NULL;
 80049dc:	e9c4 0010 	strd	r0, r0, [r4, #64]	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049e0:	6560      	str	r0, [r4, #84]	; 0x54
    SPI_RESET_CRC(hspi);
 80049e2:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 80049e4:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80049e6:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80049e8:	6320      	str	r0, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80049ea:	86a0      	strh	r0, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80049ec:	86e0      	strh	r0, [r4, #54]	; 0x36
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049ee:	d10b      	bne.n	8004a08 <HAL_SPI_Receive+0xa0>
    SPI_RESET_CRC(hspi);
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049fe:	601a      	str	r2, [r3, #0]
    hspi->RxXferCount--;
 8004a00:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8004a02:	3a01      	subs	r2, #1
 8004a04:	b292      	uxth	r2, r2
 8004a06:	87e2      	strh	r2, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a08:	68a2      	ldr	r2, [r4, #8]
 8004a0a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8004a0e:	d107      	bne.n	8004a20 <HAL_SPI_Receive+0xb8>
    __HAL_SPI_DISABLE(hspi);
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a1e:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8004a24:	bf5e      	ittt	pl
 8004a26:	681a      	ldrpl	r2, [r3, #0]
 8004a28:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8004a2c:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a2e:	68e3      	ldr	r3, [r4, #12]
 8004a30:	b1f3      	cbz	r3, 8004a70 <HAL_SPI_Receive+0x108>
    while (hspi->RxXferCount > 0U)
 8004a32:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	b1fb      	cbz	r3, 8004a78 <HAL_SPI_Receive+0x110>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	07d1      	lsls	r1, r2, #31
 8004a3e:	d555      	bpl.n	8004aec <HAL_SPI_Receive+0x184>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a44:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a48:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004a4a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8004a52:	e7ee      	b.n	8004a32 <HAL_SPI_Receive+0xca>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a54:	6823      	ldr	r3, [r4, #0]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	07d7      	lsls	r7, r2, #31
 8004a5a:	d535      	bpl.n	8004ac8 <HAL_SPI_Receive+0x160>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a5c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004a5e:	7b1b      	ldrb	r3, [r3, #12]
 8004a60:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004a62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004a64:	3301      	adds	r3, #1
 8004a66:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8004a68:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004a70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1ed      	bne.n	8004a54 <HAL_SPI_Receive+0xec>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a7e:	d144      	bne.n	8004b0a <HAL_SPI_Receive+0x1a2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8004a80:	6822      	ldr	r2, [r4, #0]
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004a88:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	9600      	str	r6, [sp, #0]
 8004a8e:	462b      	mov	r3, r5
 8004a90:	4611      	mov	r1, r2
 8004a92:	4620      	mov	r0, r4
 8004a94:	f7ff fc26 	bl	80042e4 <SPI_WaitFlagStateUntilTimeout>
 8004a98:	b9e8      	cbnz	r0, 8004ad6 <HAL_SPI_Receive+0x16e>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a9a:	68e1      	ldr	r1, [r4, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a9c:	6822      	ldr	r2, [r4, #0]
 8004a9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aa0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aa4:	bf0b      	itete	eq
 8004aa6:	68d2      	ldreq	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004aa8:	7b12      	ldrbne	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004aaa:	801a      	strheq	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004aac:	701a      	strbne	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	9600      	str	r6, [sp, #0]
 8004ab2:	462b      	mov	r3, r5
 8004ab4:	4611      	mov	r1, r2
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f7ff fc14 	bl	80042e4 <SPI_WaitFlagStateUntilTimeout>
 8004abc:	b308      	cbz	r0, 8004b02 <HAL_SPI_Receive+0x19a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004abe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ac0:	f043 0302 	orr.w	r3, r3, #2
 8004ac4:	6563      	str	r3, [r4, #84]	; 0x54
 8004ac6:	e006      	b.n	8004ad6 <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ac8:	f7fd fab8 	bl	800203c <HAL_GetTick>
 8004acc:	1b80      	subs	r0, r0, r6
 8004ace:	42a8      	cmp	r0, r5
 8004ad0:	d309      	bcc.n	8004ae6 <HAL_SPI_Receive+0x17e>
 8004ad2:	1c68      	adds	r0, r5, #1
 8004ad4:	d0cc      	beq.n	8004a70 <HAL_SPI_Receive+0x108>
      errorcode = HAL_TIMEOUT;
 8004ad6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8004ae4:	e756      	b.n	8004994 <HAL_SPI_Receive+0x2c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ae6:	2d00      	cmp	r5, #0
 8004ae8:	d1c2      	bne.n	8004a70 <HAL_SPI_Receive+0x108>
 8004aea:	e7f4      	b.n	8004ad6 <HAL_SPI_Receive+0x16e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004aec:	f7fd faa6 	bl	800203c <HAL_GetTick>
 8004af0:	1b80      	subs	r0, r0, r6
 8004af2:	42a8      	cmp	r0, r5
 8004af4:	d302      	bcc.n	8004afc <HAL_SPI_Receive+0x194>
 8004af6:	1c6a      	adds	r2, r5, #1
 8004af8:	d09b      	beq.n	8004a32 <HAL_SPI_Receive+0xca>
 8004afa:	e7ec      	b.n	8004ad6 <HAL_SPI_Receive+0x16e>
 8004afc:	2d00      	cmp	r5, #0
 8004afe:	d198      	bne.n	8004a32 <HAL_SPI_Receive+0xca>
 8004b00:	e7e9      	b.n	8004ad6 <HAL_SPI_Receive+0x16e>
    tmpreg = READ_REG(hspi->Instance->DR);
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	9303      	str	r3, [sp, #12]
    UNUSED(tmpreg);
 8004b08:	9b03      	ldr	r3, [sp, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b0a:	4632      	mov	r2, r6
 8004b0c:	4629      	mov	r1, r5
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f7ff fc44 	bl	800439c <SPI_EndRxTransaction>
 8004b14:	b108      	cbz	r0, 8004b1a <HAL_SPI_Receive+0x1b2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b16:	2320      	movs	r3, #32
 8004b18:	6563      	str	r3, [r4, #84]	; 0x54
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8004b1a:	6822      	ldr	r2, [r4, #0]
 8004b1c:	6893      	ldr	r3, [r2, #8]
 8004b1e:	06db      	lsls	r3, r3, #27
 8004b20:	d506      	bpl.n	8004b30 <HAL_SPI_Receive+0x1c8>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004b22:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004b24:	f043 0302 	orr.w	r3, r3, #2
 8004b28:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004b2a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8004b2e:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b30:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8004b32:	3800      	subs	r0, #0
 8004b34:	bf18      	it	ne
 8004b36:	2001      	movne	r0, #1
error :
 8004b38:	e7ce      	b.n	8004ad8 <HAL_SPI_Receive+0x170>
    errorcode = HAL_BUSY;
 8004b3a:	2002      	movs	r0, #2
 8004b3c:	e7cc      	b.n	8004ad8 <HAL_SPI_Receive+0x170>
  __HAL_LOCK(hspi);
 8004b3e:	2002      	movs	r0, #2
 8004b40:	e728      	b.n	8004994 <HAL_SPI_Receive+0x2c>

08004b42 <HAL_SPI_GetState>:
  return hspi->State;
 8004b42:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 8004b46:	4770      	bx	lr

08004b48 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8004b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004b4c:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004b50:	680a      	ldr	r2, [r1, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004b52:	f8d1 9024 	ldr.w	r9, [r1, #36]	; 0x24
 8004b56:	e9d1 5801 	ldrd	r5, r8, [r1, #4]
 8004b5a:	e9d1 ec03 	ldrd	lr, ip, [r1, #12]
 8004b5e:	e9d1 7605 	ldrd	r7, r6, [r1, #20]
 8004b62:	4323      	orrs	r3, r4
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8004b64:	b9a2      	cbnz	r2, 8004b90 <FMC_SDRAM_Init+0x48>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004b66:	ea43 0209 	orr.w	r2, r3, r9
 8004b6a:	432a      	orrs	r2, r5
 8004b6c:	ea42 0308 	orr.w	r3, r2, r8
 8004b70:	6801      	ldr	r1, [r0, #0]
 8004b72:	ea43 030e 	orr.w	r3, r3, lr
 8004b76:	ea43 030c 	orr.w	r3, r3, ip
 8004b7a:	433b      	orrs	r3, r7
 8004b7c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8004b80:	4333      	orrs	r3, r6
 8004b82:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8004b86:	430b      	orrs	r3, r1
 8004b88:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8004b90:	6802      	ldr	r2, [r0, #0]
 8004b92:	ea43 0309 	orr.w	r3, r3, r9
 8004b96:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8004b9e:	ea45 0308 	orr.w	r3, r5, r8
 8004ba2:	6842      	ldr	r2, [r0, #4]
 8004ba4:	ea43 030e 	orr.w	r3, r3, lr
 8004ba8:	ea43 030c 	orr.w	r3, r3, ip
 8004bac:	433b      	orrs	r3, r7
 8004bae:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8004bb2:	4333      	orrs	r3, r6
 8004bb4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	6043      	str	r3, [r0, #4]
 8004bbc:	e7e5      	b.n	8004b8a <FMC_SDRAM_Init+0x42>

08004bbe <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004bbe:	68cb      	ldr	r3, [r1, #12]
 8004bc0:	f103 3cff 	add.w	ip, r3, #4294967295
 8004bc4:	694b      	ldr	r3, [r1, #20]
{
 8004bc6:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004bc8:	680f      	ldr	r7, [r1, #0]
 8004bca:	684c      	ldr	r4, [r1, #4]
 8004bcc:	688e      	ldr	r6, [r1, #8]
 8004bce:	690d      	ldr	r5, [r1, #16]
 8004bd0:	6989      	ldr	r1, [r1, #24]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	051b      	lsls	r3, r3, #20
 8004bd6:	3c01      	subs	r4, #1
 8004bd8:	3e01      	subs	r6, #1
 8004bda:	3d01      	subs	r5, #1
 8004bdc:	3901      	subs	r1, #1
 8004bde:	3f01      	subs	r7, #1
 8004be0:	0124      	lsls	r4, r4, #4
 8004be2:	0236      	lsls	r6, r6, #8
 8004be4:	042d      	lsls	r5, r5, #16
 8004be6:	0609      	lsls	r1, r1, #24
 8004be8:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 8004bec:	b95a      	cbnz	r2, 8004c06 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004bee:	433b      	orrs	r3, r7
 8004bf0:	4323      	orrs	r3, r4
 8004bf2:	6882      	ldr	r2, [r0, #8]
 8004bf4:	4333      	orrs	r3, r6
 8004bf6:	432b      	orrs	r3, r5
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
}
 8004c02:	2000      	movs	r0, #0
 8004c04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8004c06:	6882      	ldr	r2, [r0, #8]
 8004c08:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004c0c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8004c10:	431a      	orrs	r2, r3
 8004c12:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8004c14:	ea44 0306 	orr.w	r3, r4, r6
 8004c18:	68c2      	ldr	r2, [r0, #12]
 8004c1a:	433b      	orrs	r3, r7
 8004c1c:	432b      	orrs	r3, r5
 8004c1e:	430b      	orrs	r3, r1
 8004c20:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 8004c24:	4313      	orrs	r3, r2
 8004c26:	60c3      	str	r3, [r0, #12]
 8004c28:	e7eb      	b.n	8004c02 <FMC_SDRAM_Timing_Init+0x44>

08004c2a <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8004c2a:	b570      	push	{r4, r5, r6, lr}
 8004c2c:	4604      	mov	r4, r0
 8004c2e:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8004c30:	6902      	ldr	r2, [r0, #16]
 8004c32:	e9d1 3000 	ldrd	r3, r0, [r1]
 8004c36:	4303      	orrs	r3, r0
 8004c38:	68c8      	ldr	r0, [r1, #12]
 8004c3a:	0d92      	lsrs	r2, r2, #22
 8004c3c:	ea43 2340 	orr.w	r3, r3, r0, lsl #9
 8004c40:	0592      	lsls	r2, r2, #22
 8004c42:	4313      	orrs	r3, r2
 8004c44:	688a      	ldr	r2, [r1, #8]
 8004c46:	3a01      	subs	r2, #1
 8004c48:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8004c4c:	6123      	str	r3, [r4, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8004c4e:	f7fd f9f5 	bl	800203c <HAL_GetTick>
 8004c52:	4606      	mov	r6, r0

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8004c54:	69a3      	ldr	r3, [r4, #24]
 8004c56:	f013 0320 	ands.w	r3, r3, #32
 8004c5a:	d101      	bne.n	8004c60 <FMC_SDRAM_SendCommand+0x36>
      {
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	e003      	b.n	8004c68 <FMC_SDRAM_SendCommand+0x3e>
    if (Timeout != HAL_MAX_DELAY)
 8004c60:	1c6b      	adds	r3, r5, #1
 8004c62:	d0f7      	beq.n	8004c54 <FMC_SDRAM_SendCommand+0x2a>
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004c64:	b90d      	cbnz	r5, 8004c6a <FMC_SDRAM_SendCommand+0x40>
        return HAL_TIMEOUT;
 8004c66:	2003      	movs	r0, #3
}
 8004c68:	bd70      	pop	{r4, r5, r6, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004c6a:	f7fd f9e7 	bl	800203c <HAL_GetTick>
 8004c6e:	1b80      	subs	r0, r0, r6
 8004c70:	42a8      	cmp	r0, r5
 8004c72:	d9ef      	bls.n	8004c54 <FMC_SDRAM_SendCommand+0x2a>
 8004c74:	e7f7      	b.n	8004c66 <FMC_SDRAM_SendCommand+0x3c>

08004c76 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8004c76:	6943      	ldr	r3, [r0, #20]
 8004c78:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004c7c:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8004c80:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8004c84:	6141      	str	r1, [r0, #20]

  return HAL_OK;
}
 8004c86:	2000      	movs	r0, #0
 8004c88:	4770      	bx	lr
	...

08004c8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c8c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004c8e:	2300      	movs	r3, #0
  /* Wait for AHB master IDLE state. */
  do
  {
    count++;

    if (count > 200000U)
 8004c90:	4a10      	ldr	r2, [pc, #64]	; (8004cd4 <USB_CoreReset+0x48>)
  __IO uint32_t count = 0U;
 8004c92:	9301      	str	r3, [sp, #4]
    count++;
 8004c94:	9b01      	ldr	r3, [sp, #4]
 8004c96:	3301      	adds	r3, #1
 8004c98:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004c9a:	9b01      	ldr	r3, [sp, #4]
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d816      	bhi.n	8004cce <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ca0:	6903      	ldr	r3, [r0, #16]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	daf6      	bge.n	8004c94 <USB_CoreReset+0x8>

  /* Core Soft Reset */
  count = 0U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004caa:	6903      	ldr	r3, [r0, #16]

  do
  {
    count++;

    if (count > 200000U)
 8004cac:	4a09      	ldr	r2, [pc, #36]	; (8004cd4 <USB_CoreReset+0x48>)
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	6103      	str	r3, [r0, #16]
    count++;
 8004cb4:	9b01      	ldr	r3, [sp, #4]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004cba:	9b01      	ldr	r3, [sp, #4]
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d806      	bhi.n	8004cce <USB_CoreReset+0x42>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cc0:	6903      	ldr	r3, [r0, #16]
 8004cc2:	f013 0301 	ands.w	r3, r3, #1
 8004cc6:	d1f5      	bne.n	8004cb4 <USB_CoreReset+0x28>

  return HAL_OK;
 8004cc8:	4618      	mov	r0, r3
}
 8004cca:	b002      	add	sp, #8
 8004ccc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004cce:	2003      	movs	r0, #3
 8004cd0:	e7fb      	b.n	8004cca <USB_CoreReset+0x3e>
 8004cd2:	bf00      	nop
 8004cd4:	00030d40 	.word	0x00030d40

08004cd8 <USB_CoreInit>:
{
 8004cd8:	b084      	sub	sp, #16
 8004cda:	b538      	push	{r3, r4, r5, lr}
 8004cdc:	ad05      	add	r5, sp, #20
 8004cde:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ce4:	2b01      	cmp	r3, #1
{
 8004ce6:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ce8:	d125      	bne.n	8004d36 <USB_CoreInit+0x5e>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cea:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004cec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf0:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cf2:	68c3      	ldr	r3, [r0, #12]
 8004cf4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004cf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cfc:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cfe:	68c3      	ldr	r3, [r0, #12]
 8004d00:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004d04:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8004d06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d08:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d0a:	bf02      	ittt	eq
 8004d0c:	68c3      	ldreq	r3, [r0, #12]
 8004d0e:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8004d12:	60c3      	streq	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004d14:	f7ff ffba 	bl	8004c8c <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8004d18:	9b08      	ldr	r3, [sp, #32]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d107      	bne.n	8004d2e <USB_CoreInit+0x56>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d1e:	68a3      	ldr	r3, [r4, #8]
 8004d20:	f043 0306 	orr.w	r3, r3, #6
 8004d24:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d26:	68a3      	ldr	r3, [r4, #8]
 8004d28:	f043 0320 	orr.w	r3, r3, #32
 8004d2c:	60a3      	str	r3, [r4, #8]
}
 8004d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d32:	b004      	add	sp, #16
 8004d34:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d36:	68c3      	ldr	r3, [r0, #12]
 8004d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d3c:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8004d3e:	f7ff ffa5 	bl	8004c8c <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8004d42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d44:	b923      	cbnz	r3, 8004d50 <USB_CoreInit+0x78>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d46:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d4c:	63a3      	str	r3, [r4, #56]	; 0x38
 8004d4e:	e7e3      	b.n	8004d18 <USB_CoreInit+0x40>
 8004d50:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d56:	e7f9      	b.n	8004d4c <USB_CoreInit+0x74>

08004d58 <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004d58:	6883      	ldr	r3, [r0, #8]
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	6083      	str	r3, [r0, #8]
}
 8004d60:	2000      	movs	r0, #0
 8004d62:	4770      	bx	lr

08004d64 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d64:	6883      	ldr	r3, [r0, #8]
 8004d66:	f023 0301 	bic.w	r3, r3, #1
 8004d6a:	6083      	str	r3, [r0, #8]
}
 8004d6c:	2000      	movs	r0, #0
 8004d6e:	4770      	bx	lr

08004d70 <USB_SetCurrentMode>:
{
 8004d70:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d72:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004d74:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d76:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
{
 8004d7a:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d7c:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8004d7e:	d110      	bne.n	8004da2 <USB_SetCurrentMode+0x32>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d80:	68c3      	ldr	r3, [r0, #12]
 8004d82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d86:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004d88:	2400      	movs	r4, #0
      HAL_Delay(1U);
 8004d8a:	2001      	movs	r0, #1
 8004d8c:	f7fd f95c 	bl	8002048 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8004d90:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d92:	07d9      	lsls	r1, r3, #31
      ms++;
 8004d94:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004d98:	d415      	bmi.n	8004dc6 <USB_SetCurrentMode+0x56>
 8004d9a:	2c32      	cmp	r4, #50	; 0x32
 8004d9c:	d1f5      	bne.n	8004d8a <USB_SetCurrentMode+0x1a>
    return HAL_ERROR;
 8004d9e:	2001      	movs	r0, #1
}
 8004da0:	bd38      	pop	{r3, r4, r5, pc}
  else if (mode == USB_DEVICE_MODE)
 8004da2:	2900      	cmp	r1, #0
 8004da4:	d1fb      	bne.n	8004d9e <USB_SetCurrentMode+0x2e>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004da6:	68c3      	ldr	r3, [r0, #12]
 8004da8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dac:	60c3      	str	r3, [r0, #12]
  uint32_t ms = 0U;
 8004dae:	460c      	mov	r4, r1
      HAL_Delay(1U);
 8004db0:	2001      	movs	r0, #1
 8004db2:	f7fd f949 	bl	8002048 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8004db6:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004db8:	07da      	lsls	r2, r3, #31
      ms++;
 8004dba:	f104 0401 	add.w	r4, r4, #1
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004dbe:	d502      	bpl.n	8004dc6 <USB_SetCurrentMode+0x56>
 8004dc0:	2c32      	cmp	r4, #50	; 0x32
 8004dc2:	d1f5      	bne.n	8004db0 <USB_SetCurrentMode+0x40>
 8004dc4:	e7eb      	b.n	8004d9e <USB_SetCurrentMode+0x2e>
    return HAL_ERROR;
 8004dc6:	f1a4 0332 	sub.w	r3, r4, #50	; 0x32
 8004dca:	4258      	negs	r0, r3
 8004dcc:	4158      	adcs	r0, r3
 8004dce:	e7e7      	b.n	8004da0 <USB_SetCurrentMode+0x30>

08004dd0 <USB_FlushTxFifo>:
{
 8004dd0:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004dd2:	2300      	movs	r3, #0
    if (count > 200000U)
 8004dd4:	4a10      	ldr	r2, [pc, #64]	; (8004e18 <USB_FlushTxFifo+0x48>)
  __IO uint32_t count = 0U;
 8004dd6:	9301      	str	r3, [sp, #4]
    count++;
 8004dd8:	9b01      	ldr	r3, [sp, #4]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004dde:	9b01      	ldr	r3, [sp, #4]
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d816      	bhi.n	8004e12 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de4:	6903      	ldr	r3, [r0, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	daf6      	bge.n	8004dd8 <USB_FlushTxFifo+0x8>
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dea:	0189      	lsls	r1, r1, #6
  count = 0U;
 8004dec:	2300      	movs	r3, #0
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004dee:	f041 0120 	orr.w	r1, r1, #32
    if (count > 200000U)
 8004df2:	4a09      	ldr	r2, [pc, #36]	; (8004e18 <USB_FlushTxFifo+0x48>)
  count = 0U;
 8004df4:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004df6:	6101      	str	r1, [r0, #16]
    count++;
 8004df8:	9b01      	ldr	r3, [sp, #4]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004dfe:	9b01      	ldr	r3, [sp, #4]
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d806      	bhi.n	8004e12 <USB_FlushTxFifo+0x42>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e04:	6903      	ldr	r3, [r0, #16]
 8004e06:	f013 0320 	ands.w	r3, r3, #32
 8004e0a:	d1f5      	bne.n	8004df8 <USB_FlushTxFifo+0x28>
  return HAL_OK;
 8004e0c:	4618      	mov	r0, r3
}
 8004e0e:	b002      	add	sp, #8
 8004e10:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004e12:	2003      	movs	r0, #3
 8004e14:	e7fb      	b.n	8004e0e <USB_FlushTxFifo+0x3e>
 8004e16:	bf00      	nop
 8004e18:	00030d40 	.word	0x00030d40

08004e1c <USB_FlushRxFifo>:
{
 8004e1c:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8004e1e:	2300      	movs	r3, #0
    if (count > 200000U)
 8004e20:	4a0f      	ldr	r2, [pc, #60]	; (8004e60 <USB_FlushRxFifo+0x44>)
  __IO uint32_t count = 0U;
 8004e22:	9301      	str	r3, [sp, #4]
    count++;
 8004e24:	9b01      	ldr	r3, [sp, #4]
 8004e26:	3301      	adds	r3, #1
 8004e28:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004e2a:	9b01      	ldr	r3, [sp, #4]
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d814      	bhi.n	8004e5a <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e30:	6903      	ldr	r3, [r0, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	daf6      	bge.n	8004e24 <USB_FlushRxFifo+0x8>
  count = 0U;
 8004e36:	2300      	movs	r3, #0
 8004e38:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004e3a:	4a09      	ldr	r2, [pc, #36]	; (8004e60 <USB_FlushRxFifo+0x44>)
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e3c:	2310      	movs	r3, #16
 8004e3e:	6103      	str	r3, [r0, #16]
    count++;
 8004e40:	9b01      	ldr	r3, [sp, #4]
 8004e42:	3301      	adds	r3, #1
 8004e44:	9301      	str	r3, [sp, #4]
    if (count > 200000U)
 8004e46:	9b01      	ldr	r3, [sp, #4]
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d806      	bhi.n	8004e5a <USB_FlushRxFifo+0x3e>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e4c:	6903      	ldr	r3, [r0, #16]
 8004e4e:	f013 0310 	ands.w	r3, r3, #16
 8004e52:	d1f5      	bne.n	8004e40 <USB_FlushRxFifo+0x24>
  return HAL_OK;
 8004e54:	4618      	mov	r0, r3
}
 8004e56:	b002      	add	sp, #8
 8004e58:	4770      	bx	lr
      return HAL_TIMEOUT;
 8004e5a:	2003      	movs	r0, #3
 8004e5c:	e7fb      	b.n	8004e56 <USB_FlushRxFifo+0x3a>
 8004e5e:	bf00      	nop
 8004e60:	00030d40 	.word	0x00030d40

08004e64 <USB_WritePacket>:
{
 8004e64:	b510      	push	{r4, lr}
 8004e66:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 8004e6a:	b944      	cbnz	r4, 8004e7e <USB_WritePacket+0x1a>
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e6c:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e6e:	3201      	adds	r2, #1
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e70:	089b      	lsrs	r3, r3, #2
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e72:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8004e76:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    for (i = 0U; i < count32b; i++)
 8004e7a:	428b      	cmp	r3, r1
 8004e7c:	d101      	bne.n	8004e82 <USB_WritePacket+0x1e>
}
 8004e7e:	2000      	movs	r0, #0
 8004e80:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e82:	f851 2b04 	ldr.w	r2, [r1], #4
 8004e86:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8004e88:	e7f7      	b.n	8004e7a <USB_WritePacket+0x16>

08004e8a <USB_ReadPacket>:
{
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	b570      	push	{r4, r5, r6, lr}
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e8e:	0890      	lsrs	r0, r2, #2
  for (i = 0U; i < count32b; i++)
 8004e90:	2400      	movs	r4, #0
  uint16_t remaining_bytes = len % 4U;
 8004e92:	f002 0203 	and.w	r2, r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e96:	f503 5580 	add.w	r5, r3, #4096	; 0x1000
  for (i = 0U; i < count32b; i++)
 8004e9a:	4284      	cmp	r4, r0
 8004e9c:	d310      	bcc.n	8004ec0 <USB_ReadPacket+0x36>
 8004e9e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  if (remaining_bytes != 0U)
 8004ea2:	b162      	cbz	r2, 8004ebe <USB_ReadPacket+0x34>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ea4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea8:	681c      	ldr	r4, [r3, #0]
    i = 0U;
 8004eaa:	2300      	movs	r3, #0
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004eac:	00d9      	lsls	r1, r3, #3
 8004eae:	fa24 f101 	lsr.w	r1, r4, r1
 8004eb2:	54c1      	strb	r1, [r0, r3]
      i++;
 8004eb4:	3301      	adds	r3, #1
    } while (remaining_bytes != 0U);
 8004eb6:	b299      	uxth	r1, r3
 8004eb8:	428a      	cmp	r2, r1
 8004eba:	d1f7      	bne.n	8004eac <USB_ReadPacket+0x22>
      pDest++;
 8004ebc:	4410      	add	r0, r2
}
 8004ebe:	bd70      	pop	{r4, r5, r6, pc}
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ec0:	682e      	ldr	r6, [r5, #0]
 8004ec2:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
  for (i = 0U; i < count32b; i++)
 8004ec6:	3401      	adds	r4, #1
 8004ec8:	e7e7      	b.n	8004e9a <USB_ReadPacket+0x10>

08004eca <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8004eca:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8004ecc:	6980      	ldr	r0, [r0, #24]
}
 8004ece:	4010      	ands	r0, r2
 8004ed0:	4770      	bx	lr

08004ed2 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8004ed2:	6940      	ldr	r0, [r0, #20]
}
 8004ed4:	f000 0001 	and.w	r0, r0, #1
 8004ed8:	4770      	bx	lr
	...

08004edc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004edc:	b084      	sub	sp, #16
 8004ede:	b570      	push	{r4, r5, r6, lr}
 8004ee0:	4604      	mov	r4, r0
 8004ee2:	a805      	add	r0, sp, #20
 8004ee4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004eee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ef0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ef4:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ef6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ef8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004efc:	63a3      	str	r3, [r4, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004efe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f04:	63a3      	str	r3, [r4, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f06:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f08:	05da      	lsls	r2, r3, #23
 8004f0a:	d53b      	bpl.n	8004f84 <USB_HostInit+0xa8>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004f0c:	9b07      	ldr	r3, [sp, #28]
 8004f0e:	2b01      	cmp	r3, #1
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004f10:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 8004f14:	d138      	bne.n	8004f88 <USB_HostInit+0xac>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004f16:	f043 0304 	orr.w	r3, r3, #4
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004f1a:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f1e:	2110      	movs	r1, #16
 8004f20:	4620      	mov	r0, r4
 8004f22:	f7ff ff55 	bl	8004dd0 <USB_FlushTxFifo>
 8004f26:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f28:	4620      	mov	r0, r4
 8004f2a:	f7ff ff77 	bl	8004e1c <USB_FlushRxFifo>
 8004f2e:	4308      	orrs	r0, r1
 8004f30:	b2c0      	uxtb	r0, r0
  {
    ret = HAL_ERROR;
 8004f32:	3800      	subs	r0, #0
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	9e06      	ldr	r6, [sp, #24]
    ret = HAL_ERROR;
 8004f3a:	bf18      	it	ne
 8004f3c:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f3e:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
 8004f42:	461d      	mov	r5, r3
 8004f44:	f04f 31ff 	mov.w	r1, #4294967295
 8004f48:	429e      	cmp	r6, r3
 8004f4a:	d120      	bne.n	8004f8e <USB_HostInit+0xb2>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
    USBx_HC(i)->HCINTMSK = 0U;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f4c:	61a5      	str	r5, [r4, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f4e:	6161      	str	r1, [r4, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f52:	05db      	lsls	r3, r3, #23
 8004f54:	d520      	bpl.n	8004f98 <USB_HostInit+0xbc>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004f56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f5a:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004f5c:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8004f60:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004f62:	4b11      	ldr	r3, [pc, #68]	; (8004fa8 <USB_HostInit+0xcc>)
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004f64:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f68:	9b08      	ldr	r3, [sp, #32]
 8004f6a:	b91b      	cbnz	r3, 8004f74 <USB_HostInit+0x98>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f6c:	69a3      	ldr	r3, [r4, #24]
 8004f6e:	f043 0310 	orr.w	r3, r3, #16
 8004f72:	61a3      	str	r3, [r4, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004f74:	69a2      	ldr	r2, [r4, #24]
 8004f76:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <USB_HostInit+0xd0>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	61a3      	str	r3, [r4, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
}
 8004f7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f80:	b004      	add	sp, #16
 8004f82:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004f84:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8004f88:	f023 0304 	bic.w	r3, r3, #4
 8004f8c:	e7c5      	b.n	8004f1a <USB_HostInit+0x3e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004f8e:	6091      	str	r1, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f90:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8004f92:	60d5      	str	r5, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f94:	3220      	adds	r2, #32
 8004f96:	e7d7      	b.n	8004f48 <USB_HostInit+0x6c>
    USBx->GRXFSIZ  = 0x80U;
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004f9c:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8004fa0:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004fa2:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <USB_HostInit+0xd4>)
 8004fa4:	e7de      	b.n	8004f64 <USB_HostInit+0x88>
 8004fa6:	bf00      	nop
 8004fa8:	00e00300 	.word	0x00e00300
 8004fac:	a3200008 	.word	0xa3200008
 8004fb0:	004000e0 	.word	0x004000e0

08004fb4 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004fb4:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
 8004fb8:	f023 0303 	bic.w	r3, r3, #3
{
 8004fbc:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004fbe:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004fc2:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 8004fc6:	f001 0303 	and.w	r3, r1, #3
 8004fca:	4323      	orrs	r3, r4

  if (freq == HCFG_48_MHZ)
 8004fcc:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004fce:	f500 6280 	add.w	r2, r0, #1024	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004fd2:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 8004fd6:	d104      	bne.n	8004fe2 <USB_InitFSLSPClkSel+0x2e>
  {
    USBx_HOST->HFIR = 48000U;
 8004fd8:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 8004fdc:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 8004fde:	2000      	movs	r0, #0
 8004fe0:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 8004fe2:	2902      	cmp	r1, #2
 8004fe4:	d1fb      	bne.n	8004fde <USB_InitFSLSPClkSel+0x2a>
    USBx_HOST->HFIR = 6000U;
 8004fe6:	f241 7370 	movw	r3, #6000	; 0x1770
 8004fea:	e7f7      	b.n	8004fdc <USB_InitFSLSPClkSel+0x28>

08004fec <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004fec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 8004fee:	2500      	movs	r5, #0
 8004ff0:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 8004ff2:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8004ff6:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004ff8:	9b01      	ldr	r3, [sp, #4]
 8004ffa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ffe:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005000:	9b01      	ldr	r3, [sp, #4]
 8005002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8005006:	4604      	mov	r4, r0
  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005008:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 800500c:	2064      	movs	r0, #100	; 0x64
 800500e:	f7fd f81b 	bl	8002048 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005012:	9b01      	ldr	r3, [sp, #4]
 8005014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005018:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 800501c:	200a      	movs	r0, #10
 800501e:	f7fd f813 	bl	8002048 <HAL_Delay>

  return HAL_OK;
}
 8005022:	4628      	mov	r0, r5
 8005024:	b003      	add	sp, #12
 8005026:	bd30      	pop	{r4, r5, pc}

08005028 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005028:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800502a:	2300      	movs	r3, #0
 800502c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800502e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8005032:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005034:	9b01      	ldr	r3, [sp, #4]
 8005036:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800503a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800503c:	9b01      	ldr	r3, [sp, #4]
 800503e:	04da      	lsls	r2, r3, #19
 8005040:	d406      	bmi.n	8005050 <USB_DriveVbus+0x28>
 8005042:	2901      	cmp	r1, #1
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005044:	bf02      	ittt	eq
 8005046:	9b01      	ldreq	r3, [sp, #4]
 8005048:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 800504c:	f8c0 3440 	streq.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005050:	9b01      	ldr	r3, [sp, #4]
 8005052:	04db      	lsls	r3, r3, #19
 8005054:	d505      	bpl.n	8005062 <USB_DriveVbus+0x3a>
 8005056:	b921      	cbnz	r1, 8005062 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005058:	9b01      	ldr	r3, [sp, #4]
 800505a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800505e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8005062:	2000      	movs	r0, #0
 8005064:	b002      	add	sp, #8
 8005066:	4770      	bx	lr

08005068 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005068:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 800506a:	2300      	movs	r3, #0
 800506c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 800506e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8005072:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005074:	9801      	ldr	r0, [sp, #4]
}
 8005076:	f3c0 4041 	ubfx	r0, r0, #17, #2
 800507a:	b002      	add	sp, #8
 800507c:	4770      	bx	lr

0800507e <USB_GetCurrentFrame>:
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800507e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005082:	6880      	ldr	r0, [r0, #8]
}
 8005084:	b280      	uxth	r0, r0
 8005086:	4770      	bx	lr

08005088 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800508c:	eb00 1741 	add.w	r7, r0, r1, lsl #5
 8005090:	f507 6ca0 	add.w	ip, r7, #1280	; 0x500
{
 8005094:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8005098:	461c      	mov	r4, r3
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800509a:	f04f 33ff 	mov.w	r3, #4294967295
 800509e:	f8cc 3008 	str.w	r3, [ip, #8]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80050a2:	fa4f fe82 	sxtb.w	lr, r2
  switch (ep_type)
 80050a6:	2e03      	cmp	r6, #3
 80050a8:	d874      	bhi.n	8005194 <USB_HC_Init+0x10c>
 80050aa:	e8df f006 	tbb	[pc, r6]
 80050ae:	6702      	.short	0x6702
 80050b0:	5f02      	.short	0x5f02
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80050b2:	f240 439d 	movw	r3, #1181	; 0x49d
      if ((epnum & 0x80U) == 0x80U)
 80050b6:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80050ba:	f8cc 300c 	str.w	r3, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 80050be:	da04      	bge.n	80050ca <USB_HC_Init+0x42>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80050c0:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80050c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c8:	e04d      	b.n	8005166 <USB_HC_Init+0xde>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80050ca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80050cc:	05db      	lsls	r3, r3, #23
 80050ce:	d446      	bmi.n	800515e <USB_HC_Init+0xd6>
  HAL_StatusTypeDef ret = HAL_OK;
 80050d0:	2500      	movs	r5, #0
      ret = HAL_ERROR;
      break;
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80050d2:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80050d6:	f043 0302 	orr.w	r3, r3, #2
 80050da:	f8cc 300c 	str.w	r3, [ip, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80050de:	f8d0 8418 	ldr.w	r8, [r0, #1048]	; 0x418
 80050e2:	f001 030f 	and.w	r3, r1, #15
 80050e6:	2101      	movs	r1, #1
 80050e8:	4099      	lsls	r1, r3
 80050ea:	ea41 0108 	orr.w	r1, r1, r8
 80050ee:	f8c0 1418 	str.w	r1, [r0, #1048]	; 0x418

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80050f2:	6983      	ldr	r3, [r0, #24]
 80050f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 80050f8:	f1be 0f00 	cmp.w	lr, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80050fc:	6183      	str	r3, [r0, #24]
    HCcharEpDir = 0U;
 80050fe:	bfb4      	ite	lt
 8005100:	f44f 4100 	movlt.w	r1, #32768	; 0x8000
 8005104:	2100      	movge	r1, #0
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005106:	f7ff ffaf 	bl	8005068 <USB_GetHostSpeed>

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800510a:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d142      	bne.n	8005198 <USB_HC_Init+0x110>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005112:	2802      	cmp	r0, #2
 8005114:	bf0c      	ite	eq
 8005116:	2000      	moveq	r0, #0
 8005118:	f44f 3000 	movne.w	r0, #131072	; 0x20000
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800511c:	05a3      	lsls	r3, r4, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800511e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005122:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005126:	f3c4 040a 	ubfx	r4, r4, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800512a:	02d2      	lsls	r2, r2, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800512c:	4323      	orrs	r3, r4
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800512e:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005132:	4313      	orrs	r3, r2
 8005134:	04b2      	lsls	r2, r6, #18
 8005136:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 800513a:	4313      	orrs	r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800513c:	430b      	orrs	r3, r1
 800513e:	4303      	orrs	r3, r0

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005140:	f006 06fd 	and.w	r6, r6, #253	; 0xfd
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005144:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005148:	2e01      	cmp	r6, #1
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800514a:	bf02      	ittt	eq
 800514c:	f8d7 3500 	ldreq.w	r3, [r7, #1280]	; 0x500
 8005150:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8005154:	f8c7 3500 	streq.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
}
 8005158:	4628      	mov	r0, r5
 800515a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800515e:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8005162:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005166:	f8cc 300c 	str.w	r3, [ip, #12]
 800516a:	e7b1      	b.n	80050d0 <USB_HC_Init+0x48>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800516c:	f240 639d 	movw	r3, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8005170:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005174:	f8cc 300c 	str.w	r3, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8005178:	daaa      	bge.n	80050d0 <USB_HC_Init+0x48>
 800517a:	e7a1      	b.n	80050c0 <USB_HC_Init+0x38>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800517c:	f240 2325 	movw	r3, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8005180:	f1be 0f00 	cmp.w	lr, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005184:	f8cc 300c 	str.w	r3, [ip, #12]
      if ((epnum & 0x80U) == 0x80U)
 8005188:	daa2      	bge.n	80050d0 <USB_HC_Init+0x48>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800518a:	f8dc 300c 	ldr.w	r3, [ip, #12]
 800518e:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005192:	e7e8      	b.n	8005166 <USB_HC_Init+0xde>
  switch (ep_type)
 8005194:	2501      	movs	r5, #1
 8005196:	e79c      	b.n	80050d2 <USB_HC_Init+0x4a>
    HCcharLowSpeed = 0U;
 8005198:	2000      	movs	r0, #0
 800519a:	e7bf      	b.n	800511c <USB_HC_Init+0x94>

0800519c <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800519c:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80051a0:	6940      	ldr	r0, [r0, #20]
}
 80051a2:	b280      	uxth	r0, r0
 80051a4:	4770      	bx	lr

080051a6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80051a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  __IO uint32_t count = 0U;
 80051a8:	2300      	movs	r3, #0
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80051aa:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  __IO uint32_t count = 0U;
 80051ae:	9301      	str	r3, [sp, #4]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80051b0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80051b4:	f8d1 4500 	ldr.w	r4, [r1, #1280]	; 0x500

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80051b8:	6885      	ldr	r5, [r0, #8]
 80051ba:	06ad      	lsls	r5, r5, #26
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80051bc:	f501 62a0 	add.w	r2, r1, #1280	; 0x500
 80051c0:	ea4f 4393 	mov.w	r3, r3, lsr #18
  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80051c4:	d501      	bpl.n	80051ca <USB_HC_Halt+0x24>
 80051c6:	2c00      	cmp	r4, #0
 80051c8:	da25      	bge.n	8005216 <USB_HC_Halt+0x70>
  {
    return HAL_OK;
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80051ca:	f013 0f01 	tst.w	r3, #1
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051ce:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80051d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051d6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80051da:	d11f      	bne.n	800521c <USB_HC_Halt+0x76>

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80051dc:	6883      	ldr	r3, [r0, #8]
 80051de:	069b      	lsls	r3, r3, #26
 80051e0:	d419      	bmi.n	8005216 <USB_HC_Halt+0x70>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051e2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80051e4:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051e8:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051ec:	d132      	bne.n	8005254 <USB_HC_Halt+0xae>
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80051ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051f2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051f6:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 80051fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051fe:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        do
        {
          count++;
 8005202:	9b01      	ldr	r3, [sp, #4]
 8005204:	3301      	adds	r3, #1
 8005206:	9301      	str	r3, [sp, #4]

          if (count > 1000U)
 8005208:	9b01      	ldr	r3, [sp, #4]
 800520a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800520e:	d802      	bhi.n	8005216 <USB_HC_Halt+0x70>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005210:	6813      	ldr	r3, [r2, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	dbf5      	blt.n	8005202 <USB_HC_Halt+0x5c>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8005216:	2000      	movs	r0, #0
 8005218:	b003      	add	sp, #12
 800521a:	bd30      	pop	{r4, r5, pc}
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800521c:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8005220:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005224:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005228:	d114      	bne.n	8005254 <USB_HC_Halt+0xae>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800522a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800522e:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005232:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8005236:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800523a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
        count++;
 800523e:	9b01      	ldr	r3, [sp, #4]
 8005240:	3301      	adds	r3, #1
 8005242:	9301      	str	r3, [sp, #4]
        if (count > 1000U)
 8005244:	9b01      	ldr	r3, [sp, #4]
 8005246:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800524a:	d8e4      	bhi.n	8005216 <USB_HC_Halt+0x70>
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800524c:	6813      	ldr	r3, [r2, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	dbf5      	blt.n	800523e <USB_HC_Halt+0x98>
 8005252:	e7e0      	b.n	8005216 <USB_HC_Halt+0x70>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005254:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005258:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 800525c:	e7db      	b.n	8005216 <USB_HC_Halt+0x70>
	...

08005260 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005260:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8005264:	4a06      	ldr	r2, [pc, #24]	; (8005280 <USB_DoPing+0x20>)
 8005266:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800526a:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800526e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005272:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005276:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500

  return HAL_OK;
}
 800527a:	2000      	movs	r0, #0
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	80080000 	.word	0x80080000

08005284 <USB_HC_StartXfer>:
{
 8005284:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005288:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800528a:	05db      	lsls	r3, r3, #23
{
 800528c:	4615      	mov	r5, r2
 800528e:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005290:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005292:	d50f      	bpl.n	80052b4 <USB_HC_StartXfer+0x30>
 8005294:	790b      	ldrb	r3, [r1, #4]
 8005296:	b96b      	cbnz	r3, 80052b4 <USB_HC_StartXfer+0x30>
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005298:	2d01      	cmp	r5, #1
 800529a:	d168      	bne.n	800536e <USB_HC_StartXfer+0xea>
 800529c:	79cb      	ldrb	r3, [r1, #7]
 800529e:	f013 0ffd 	tst.w	r3, #253	; 0xfd
 80052a2:	d107      	bne.n	80052b4 <USB_HC_StartXfer+0x30>
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80052a4:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 80052a8:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 80052ac:	f020 0070 	bic.w	r0, r0, #112	; 0x70
 80052b0:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
  if (hc->xfer_len > 0U)
 80052b4:	694b      	ldr	r3, [r1, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d065      	beq.n	8005386 <USB_HC_StartXfer+0x102>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80052ba:	890e      	ldrh	r6, [r1, #8]
 80052bc:	1e58      	subs	r0, r3, #1
 80052be:	4430      	add	r0, r6
 80052c0:	fbb0 f0f6 	udiv	r0, r0, r6
 80052c4:	b280      	uxth	r0, r0
 80052c6:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 80052ca:	bf28      	it	cs
 80052cc:	f44f 7080 	movcs.w	r0, #256	; 0x100
  if (hc->ep_is_in != 0U)
 80052d0:	78cf      	ldrb	r7, [r1, #3]
 80052d2:	2f00      	cmp	r7, #0
 80052d4:	d059      	beq.n	800538a <USB_HC_StartXfer+0x106>
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80052d6:	f8b1 8008 	ldrh.w	r8, [r1, #8]
 80052da:	fb00 f808 	mul.w	r8, r0, r8
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80052de:	f891 c00a 	ldrb.w	ip, [r1, #10]
 80052e2:	f8c1 8010 	str.w	r8, [r1, #16]
 80052e6:	ea4f 7c4c 	mov.w	ip, ip, lsl #29
 80052ea:	f00c 4cc0 	and.w	ip, ip, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80052ee:	eb04 1642 	add.w	r6, r4, r2, lsl #5
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052f2:	ea4c 40c0 	orr.w	r0, ip, r0, lsl #19
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80052f6:	f3c8 0812 	ubfx	r8, r8, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052fa:	ea40 0008 	orr.w	r0, r0, r8
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80052fe:	f8c6 0510 	str.w	r0, [r6, #1296]	; 0x510
  if (dma != 0U)
 8005302:	b115      	cbz	r5, 800530a <USB_HC_StartXfer+0x86>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005304:	68c8      	ldr	r0, [r1, #12]
 8005306:	f8c6 0514 	str.w	r0, [r6, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800530a:	f8d4 0408 	ldr.w	r0, [r4, #1032]	; 0x408
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800530e:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
 8005312:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
 8005316:	f8c6 e500 	str.w	lr, [r6, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800531a:	43c0      	mvns	r0, r0
 800531c:	f8d6 e500 	ldr.w	lr, [r6, #1280]	; 0x500
 8005320:	0740      	lsls	r0, r0, #29
 8005322:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8005326:	ea40 000e 	orr.w	r0, r0, lr
 800532a:	f8c6 0500 	str.w	r0, [r6, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800532e:	f8d6 0500 	ldr.w	r0, [r6, #1280]	; 0x500
 8005332:	9003      	str	r0, [sp, #12]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005334:	9803      	ldr	r0, [sp, #12]
 8005336:	f020 4080 	bic.w	r0, r0, #1073741824	; 0x40000000
 800533a:	9003      	str	r0, [sp, #12]
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800533c:	f504 6c80 	add.w	ip, r4, #1024	; 0x400
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005340:	9803      	ldr	r0, [sp, #12]
  if (hc->ep_is_in != 0U)
 8005342:	b327      	cbz	r7, 800538e <USB_HC_StartXfer+0x10a>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005344:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005348:	9003      	str	r0, [sp, #12]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800534a:	9803      	ldr	r0, [sp, #12]
 800534c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005350:	9003      	str	r0, [sp, #12]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005352:	9803      	ldr	r0, [sp, #12]
 8005354:	f8c6 0500 	str.w	r0, [r6, #1280]	; 0x500
  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005358:	ea57 0005 	orrs.w	r0, r7, r5
 800535c:	d10f      	bne.n	800537e <USB_HC_StartXfer+0xfa>
 800535e:	b173      	cbz	r3, 800537e <USB_HC_StartXfer+0xfa>
    switch (hc->ep_type)
 8005360:	79c8      	ldrb	r0, [r1, #7]
 8005362:	2803      	cmp	r0, #3
 8005364:	d821      	bhi.n	80053aa <USB_HC_StartXfer+0x126>
 8005366:	e8df f000 	tbb	[pc, r0]
 800536a:	2815      	.short	0x2815
 800536c:	2815      	.short	0x2815
    if ((dma == 0U) && (hc->do_ping == 1U))
 800536e:	2d00      	cmp	r5, #0
 8005370:	d1a0      	bne.n	80052b4 <USB_HC_StartXfer+0x30>
 8005372:	794b      	ldrb	r3, [r1, #5]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d19d      	bne.n	80052b4 <USB_HC_StartXfer+0x30>
      (void)USB_DoPing(USBx, hc->ch_num);
 8005378:	4611      	mov	r1, r2
 800537a:	f7ff ff71 	bl	8005260 <USB_DoPing>
}
 800537e:	2000      	movs	r0, #0
 8005380:	b004      	add	sp, #16
 8005382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    num_packets = 1U;
 8005386:	2001      	movs	r0, #1
 8005388:	e7a2      	b.n	80052d0 <USB_HC_StartXfer+0x4c>
  if (hc->xfer_len > 0U)
 800538a:	4698      	mov	r8, r3
 800538c:	e7a7      	b.n	80052de <USB_HC_StartXfer+0x5a>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800538e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
 8005392:	e7d9      	b.n	8005348 <USB_HC_StartXfer+0xc4>
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005394:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005396:	1cd8      	adds	r0, r3, #3
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005398:	b2ad      	uxth	r5, r5
 800539a:	f3c0 008f 	ubfx	r0, r0, #2, #16
 800539e:	4285      	cmp	r5, r0
 80053a0:	d203      	bcs.n	80053aa <USB_HC_StartXfer+0x126>
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80053a2:	69a0      	ldr	r0, [r4, #24]
 80053a4:	f040 0020 	orr.w	r0, r0, #32
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80053a8:	61a0      	str	r0, [r4, #24]
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80053aa:	2000      	movs	r0, #0
 80053ac:	9000      	str	r0, [sp, #0]
 80053ae:	68c9      	ldr	r1, [r1, #12]
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	4620      	mov	r0, r4
 80053b4:	f7ff fd56 	bl	8004e64 <USB_WritePacket>
 80053b8:	e7e1      	b.n	800537e <USB_HC_StartXfer+0xfa>
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80053ba:	f8dc 5010 	ldr.w	r5, [ip, #16]
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80053be:	1cd8      	adds	r0, r3, #3
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80053c0:	b2ad      	uxth	r5, r5
 80053c2:	f3c0 008f 	ubfx	r0, r0, #2, #16
 80053c6:	4285      	cmp	r5, r0
 80053c8:	d2ef      	bcs.n	80053aa <USB_HC_StartXfer+0x126>
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80053ca:	69a0      	ldr	r0, [r4, #24]
 80053cc:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 80053d0:	e7ea      	b.n	80053a8 <USB_HC_StartXfer+0x124>

080053d2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80053d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t count = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	9301      	str	r3, [sp, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80053d8:	6883      	ldr	r3, [r0, #8]
 80053da:	f023 0301 	bic.w	r3, r3, #1
 80053de:	6083      	str	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053e0:	2110      	movs	r1, #16
{
 80053e2:	4604      	mov	r4, r0
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053e4:	f7ff fcf4 	bl	8004dd0 <USB_FlushTxFifo>
 80053e8:	4601      	mov	r1, r0
  {
    ret = HAL_ERROR;
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053ea:	4620      	mov	r0, r4
 80053ec:	f7ff fd16 	bl	8004e1c <USB_FlushRxFifo>
 80053f0:	4308      	orrs	r0, r1
 80053f2:	b2c0      	uxtb	r0, r0
  {
    ret = HAL_ERROR;
 80053f4:	3800      	subs	r0, #0
 80053f6:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 80053fa:	bf18      	it	ne
 80053fc:	2001      	movne	r0, #1
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80053fe:	f504 65e0 	add.w	r5, r4, #1792	; 0x700
    ret = HAL_ERROR;
 8005402:	4619      	mov	r1, r3
  {
    value = USBx_HC(i)->HCCHAR;
 8005404:	680a      	ldr	r2, [r1, #0]
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005406:	f022 2280 	bic.w	r2, r2, #2147516416	; 0x80008000
 800540a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 800540e:	f841 2b20 	str.w	r2, [r1], #32
  for (i = 0U; i <= 15U; i++)
 8005412:	42a9      	cmp	r1, r5
 8005414:	d1f6      	bne.n	8005404 <USB_StopHost+0x32>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8005416:	681a      	ldr	r2, [r3, #0]
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005418:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800541c:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8005420:	601a      	str	r2, [r3, #0]

    do
    {
      count++;
 8005422:	9a01      	ldr	r2, [sp, #4]
 8005424:	3201      	adds	r2, #1
 8005426:	9201      	str	r2, [sp, #4]

      if (count > 1000U)
 8005428:	9a01      	ldr	r2, [sp, #4]
 800542a:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 800542e:	d802      	bhi.n	8005436 <USB_StopHost+0x64>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	2a00      	cmp	r2, #0
 8005434:	dbf5      	blt.n	8005422 <USB_StopHost+0x50>
  for (i = 0U; i <= 15U; i++)
 8005436:	3320      	adds	r3, #32
 8005438:	42ab      	cmp	r3, r5
 800543a:	d1ec      	bne.n	8005416 <USB_StopHost+0x44>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800543c:	f04f 33ff 	mov.w	r3, #4294967295
 8005440:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005444:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005446:	68a3      	ldr	r3, [r4, #8]
 8005448:	f043 0301 	orr.w	r3, r3, #1
 800544c:	60a3      	str	r3, [r4, #8]

  (void)USB_EnableGlobalInt(USBx);

  return ret;
}
 800544e:	b003      	add	sp, #12
 8005450:	bd30      	pop	{r4, r5, pc}
	...

08005454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800548c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005458:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800545a:	e003      	b.n	8005464 <LoopCopyDataInit>

0800545c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800545c:	4b0c      	ldr	r3, [pc, #48]	; (8005490 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800545e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005460:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005462:	3104      	adds	r1, #4

08005464 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005464:	480b      	ldr	r0, [pc, #44]	; (8005494 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005466:	4b0c      	ldr	r3, [pc, #48]	; (8005498 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005468:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800546a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800546c:	d3f6      	bcc.n	800545c <CopyDataInit>
  ldr  r2, =_sbss
 800546e:	4a0b      	ldr	r2, [pc, #44]	; (800549c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005470:	e002      	b.n	8005478 <LoopFillZerobss>

08005472 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005472:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005474:	f842 3b04 	str.w	r3, [r2], #4

08005478 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005478:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800547a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800547c:	d3f9      	bcc.n	8005472 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800547e:	f7fc fd6d 	bl	8001f5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005482:	f003 fb3d 	bl	8008b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005486:	f000 f85d 	bl	8005544 <main>
  bx  lr    
 800548a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800548c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8005490:	08014af4 	.word	0x08014af4
  ldr  r0, =_sdata
 8005494:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005498:	20000160 	.word	0x20000160
  ldr  r2, =_sbss
 800549c:	20000160 	.word	0x20000160
  ldr  r3, = _ebss
 80054a0:	200013b0 	.word	0x200013b0

080054a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054a4:	e7fe      	b.n	80054a4 <ADC_IRQHandler>

080054a6 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
 80054a6:	b508      	push	{r3, lr}
  /* Turn LED4 on */
  BSP_LED_On(LED4);
 80054a8:	2001      	movs	r0, #1
 80054aa:	f7fb fd2f 	bl	8000f0c <BSP_LED_On>
  while(1)
 80054ae:	e7fe      	b.n	80054ae <Error_Handler+0x8>

080054b0 <Update_ColorSize>:
  * @brief  Updates the selected Color and Size
  * @param  None
  * @retval None
  */
static void Update_ColorSize(void)
{
 80054b0:	b538      	push	{r3, r4, r5, lr}
  static uint32_t color;
  
  /* Clear the current circle */
  color = BSP_LCD_GetTextColor();
 80054b2:	f7fb ff31 	bl	8001318 <BSP_LCD_GetTextColor>
 80054b6:	4c15      	ldr	r4, [pc, #84]	; (800550c <Update_ColorSize+0x5c>)
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);    
  BSP_LCD_FillCircle(220, (BSP_LCD_GetYSize()-24), 10);  
  BSP_LCD_SetTextColor(color);  
  
  /* Update the selected color icon */
  BSP_LCD_FillCircle(220, (BSP_LCD_GetYSize()-24), radius);  
 80054b8:	4d15      	ldr	r5, [pc, #84]	; (8005510 <Update_ColorSize+0x60>)
  color = BSP_LCD_GetTextColor();
 80054ba:	6020      	str	r0, [r4, #0]
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);    
 80054bc:	f04f 30ff 	mov.w	r0, #4294967295
 80054c0:	f7fb ff36 	bl	8001330 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(220, (BSP_LCD_GetYSize()-24), 10);  
 80054c4:	f7fb feb6 	bl	8001234 <BSP_LCD_GetYSize>
 80054c8:	3818      	subs	r0, #24
 80054ca:	b281      	uxth	r1, r0
 80054cc:	220a      	movs	r2, #10
 80054ce:	20dc      	movs	r0, #220	; 0xdc
 80054d0:	f7fc fb1a 	bl	8001b08 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(color);  
 80054d4:	6820      	ldr	r0, [r4, #0]
 80054d6:	f7fb ff2b 	bl	8001330 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(220, (BSP_LCD_GetYSize()-24), radius);  
 80054da:	f7fb feab 	bl	8001234 <BSP_LCD_GetYSize>
 80054de:	3818      	subs	r0, #24
 80054e0:	882a      	ldrh	r2, [r5, #0]
 80054e2:	b281      	uxth	r1, r0
 80054e4:	20dc      	movs	r0, #220	; 0xdc
 80054e6:	f7fc fb0f 	bl	8001b08 <BSP_LCD_FillCircle>
  
  /* Draw black circle */
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);    
 80054ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80054ee:	f7fb ff1f 	bl	8001330 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(220, (BSP_LCD_GetYSize() - 24), radius);
 80054f2:	f7fb fe9f 	bl	8001234 <BSP_LCD_GetYSize>
 80054f6:	3818      	subs	r0, #24
 80054f8:	882a      	ldrh	r2, [r5, #0]
 80054fa:	b281      	uxth	r1, r0
 80054fc:	20dc      	movs	r0, #220	; 0xdc
 80054fe:	f7fc fa61 	bl	80019c4 <BSP_LCD_DrawCircle>
  BSP_LCD_SetTextColor(color);  
 8005502:	6820      	ldr	r0, [r4, #0]
}
 8005504:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  BSP_LCD_SetTextColor(color);  
 8005508:	f7fb bf12 	b.w	8001330 <BSP_LCD_SetTextColor>
 800550c:	2000049c 	.word	0x2000049c
 8005510:	200000d8 	.word	0x200000d8

08005514 <USBH_UserProcess>:
  switch (id)
 8005514:	2902      	cmp	r1, #2
{  
 8005516:	b508      	push	{r3, lr}
  switch (id)
 8005518:	d00b      	beq.n	8005532 <USBH_UserProcess+0x1e>
 800551a:	2905      	cmp	r1, #5
 800551c:	d10c      	bne.n	8005538 <USBH_UserProcess+0x24>
    Appli_state = APPLICATION_IDLE;
 800551e:	4807      	ldr	r0, [pc, #28]	; (800553c <USBH_UserProcess+0x28>)
    if (f_mount(&USBDISK_FatFs, "", 0) != FR_OK)
 8005520:	4907      	ldr	r1, [pc, #28]	; (8005540 <USBH_UserProcess+0x2c>)
    Appli_state = APPLICATION_IDLE;
 8005522:	2200      	movs	r2, #0
 8005524:	7102      	strb	r2, [r0, #4]
    if (f_mount(&USBDISK_FatFs, "", 0) != FR_OK)
 8005526:	3008      	adds	r0, #8
 8005528:	f001 fcc2 	bl	8006eb0 <f_mount>
 800552c:	b120      	cbz	r0, 8005538 <USBH_UserProcess+0x24>
      Error_Handler();
 800552e:	f7ff ffba 	bl	80054a6 <Error_Handler>
    Appli_state = APPLICATION_START;
 8005532:	4b02      	ldr	r3, [pc, #8]	; (800553c <USBH_UserProcess+0x28>)
 8005534:	2201      	movs	r2, #1
 8005536:	711a      	strb	r2, [r3, #4]
}
 8005538:	bd08      	pop	{r3, pc}
 800553a:	bf00      	nop
 800553c:	2000049c 	.word	0x2000049c
 8005540:	08014a14 	.word	0x08014a14

08005544 <main>:
{
 8005544:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8005548:	b097      	sub	sp, #92	; 0x5c
  HAL_Init();
 800554a:	f7fc fd51 	bl	8001ff0 <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 800554e:	2400      	movs	r4, #0
 8005550:	4bc9      	ldr	r3, [pc, #804]	; (8005878 <main+0x334>)
 8005552:	9403      	str	r4, [sp, #12]
 8005554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005556:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800555a:	641a      	str	r2, [r3, #64]	; 0x40
 800555c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005562:	9303      	str	r3, [sp, #12]
 8005564:	9b03      	ldr	r3, [sp, #12]
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005566:	4bc5      	ldr	r3, [pc, #788]	; (800587c <main+0x338>)
 8005568:	9404      	str	r4, [sp, #16]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005570:	601a      	str	r2, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005578:	9304      	str	r3, [sp, #16]
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800557a:	2501      	movs	r5, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800557c:	9b04      	ldr	r3, [sp, #16]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800557e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005582:	e9cd 530a 	strd	r5, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005586:	2602      	movs	r6, #2
 8005588:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
 800558c:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800558e:	e9cd 6310 	strd	r6, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005592:	2707      	movs	r7, #7
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005594:	f44f 73a8 	mov.w	r3, #336	; 0x150
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005598:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 336;
 800559a:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = 2;
 800559e:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80055a0:	9715      	str	r7, [sp, #84]	; 0x54
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80055a2:	f7fe fa93 	bl	8003acc <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80055a6:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055a8:	e9cd 3605 	strd	r3, r6, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;  
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;  
 80055ac:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
 80055b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055b4:	e9cd 1308 	strd	r1, r3, [sp, #32]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80055b8:	a805      	add	r0, sp, #20
 80055ba:	2105      	movs	r1, #5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055bc:	9407      	str	r4, [sp, #28]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80055be:	f7fe fc63 	bl	8003e88 <HAL_RCC_ClockConfig>
  BSP_LED_Init(LED3);
 80055c2:	4620      	mov	r0, r4
 80055c4:	f7fb fc68 	bl	8000e98 <BSP_LED_Init>
  BSP_LED_Init(LED4);
 80055c8:	4628      	mov	r0, r5
 80055ca:	f7fb fc65 	bl	8000e98 <BSP_LED_Init>
  BSP_LCD_Init();
 80055ce:	f7fc f8d1 	bl	8001774 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 80055d2:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 80055d6:	4628      	mov	r0, r5
 80055d8:	f7fb fe34 	bl	8001244 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 80055dc:	4628      	mov	r0, r5
 80055de:	f7fb fe71 	bl	80012c4 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);  
 80055e2:	f04f 30ff 	mov.w	r0, #4294967295
 80055e6:	f7fb fec7 	bl	8001378 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 80055ea:	4628      	mov	r0, r5
 80055ec:	f04f 31ff 	mov.w	r1, #4294967295
 80055f0:	f7fb fe82 	bl	80012f8 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 80055f4:	4621      	mov	r1, r4
 80055f6:	4628      	mov	r0, r5
 80055f8:	f7fb fe6a 	bl	80012d0 <BSP_LCD_SetLayerVisible>
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 80055fc:	49a0      	ldr	r1, [pc, #640]	; (8005880 <main+0x33c>)
 80055fe:	4620      	mov	r0, r4
 8005600:	f7fb fe20 	bl	8001244 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8005604:	4620      	mov	r0, r4
 8005606:	f7fb fe5d 	bl	80012c4 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 800560a:	f7fc f807 	bl	800161c <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800560e:	f04f 30ff 	mov.w	r0, #4294967295
 8005612:	f7fb feb1 	bl	8001378 <BSP_LCD_Clear>
  Touchscreen_Calibration();
 8005616:	f000 fbd3 	bl	8005dc0 <Touchscreen_Calibration>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800561a:	f7fb fe03 	bl	8001224 <BSP_LCD_GetXSize>
 800561e:	4605      	mov	r5, r0
 8005620:	f7fb fe08 	bl	8001234 <BSP_LCD_GetYSize>
 8005624:	b281      	uxth	r1, r0
 8005626:	b2a8      	uxth	r0, r5
 8005628:	f7fc fc24 	bl	8001e74 <BSP_TS_Init>
  if (USBH_Init(&hUSBHost, USBH_UserProcess, 0) != USBH_OK)
 800562c:	4622      	mov	r2, r4
 800562e:	4995      	ldr	r1, [pc, #596]	; (8005884 <main+0x340>)
 8005630:	4895      	ldr	r0, [pc, #596]	; (8005888 <main+0x344>)
 8005632:	4c96      	ldr	r4, [pc, #600]	; (800588c <main+0x348>)
 8005634:	f002 fcc6 	bl	8007fc4 <USBH_Init>
 8005638:	b108      	cbz	r0, 800563e <main+0xfa>
    Error_Handler();
 800563a:	f7ff ff34 	bl	80054a6 <Error_Handler>
  USBH_RegisterClass(&hUSBHost, USBH_MSC_CLASS);
 800563e:	4994      	ldr	r1, [pc, #592]	; (8005890 <main+0x34c>)
 8005640:	f504 700e 	add.w	r0, r4, #568	; 0x238
 8005644:	f002 fcdd 	bl	8008002 <USBH_RegisterClass>
  if (USBH_Start(&hUSBHost) != USBH_OK)
 8005648:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800564c:	f002 fd0b 	bl	8008066 <USBH_Start>
 8005650:	2800      	cmp	r0, #0
 8005652:	d1f2      	bne.n	800563a <main+0xf6>
  if(FATFS_LinkDriver(&USBH_Driver, USB_Path) != 0) 
 8005654:	488f      	ldr	r0, [pc, #572]	; (8005894 <main+0x350>)
 8005656:	f504 61e2 	add.w	r1, r4, #1808	; 0x710
 800565a:	f001 fe99 	bl	8007390 <FATFS_LinkDriver>
 800565e:	4602      	mov	r2, r0
 8005660:	2800      	cmp	r0, #0
 8005662:	d1ea      	bne.n	800563a <main+0xf6>
  if(f_mount(&USBDISK_FatFs, (TCHAR const*)USB_Path, 0) != FR_OK)
 8005664:	f504 61e2 	add.w	r1, r4, #1808	; 0x710
 8005668:	f104 0008 	add.w	r0, r4, #8
 800566c:	f001 fc20 	bl	8006eb0 <f_mount>
 8005670:	4680      	mov	r8, r0
 8005672:	2800      	cmp	r0, #0
 8005674:	d1e1      	bne.n	800563a <main+0xf6>
  BSP_LCD_SelectLayer(0);
 8005676:	f7fb fe25 	bl	80012c4 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);  
 800567a:	f04f 30ff 	mov.w	r0, #4294967295
 800567e:	f7fb fe7b 	bl	8001378 <BSP_LCD_Clear>
  BSP_LCD_DrawBitmap(0, 0, (uint8_t *)color2);
 8005682:	4a85      	ldr	r2, [pc, #532]	; (8005898 <main+0x354>)
 8005684:	4641      	mov	r1, r8
 8005686:	4640      	mov	r0, r8
 8005688:	f7fb ff04 	bl	8001494 <BSP_LCD_DrawBitmap>
  BSP_LCD_DrawBitmap(150, (BSP_LCD_GetYSize() - 50), (uint8_t *)save);
 800568c:	f7fb fdd2 	bl	8001234 <BSP_LCD_GetYSize>
 8005690:	4a82      	ldr	r2, [pc, #520]	; (800589c <main+0x358>)
 8005692:	f1a0 0132 	sub.w	r1, r0, #50	; 0x32
 8005696:	2096      	movs	r0, #150	; 0x96
 8005698:	f7fb fefc 	bl	8001494 <BSP_LCD_DrawBitmap>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800569c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80056a0:	f7fb fe46 	bl	8001330 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawRect(61, 0, (BSP_LCD_GetXSize()-61), (BSP_LCD_GetYSize()-60));
 80056a4:	f7fb fdbe 	bl	8001224 <BSP_LCD_GetXSize>
 80056a8:	4605      	mov	r5, r0
 80056aa:	f7fb fdc3 	bl	8001234 <BSP_LCD_GetYSize>
 80056ae:	f1a5 023d 	sub.w	r2, r5, #61	; 0x3d
 80056b2:	383c      	subs	r0, #60	; 0x3c
 80056b4:	b283      	uxth	r3, r0
 80056b6:	b292      	uxth	r2, r2
 80056b8:	4641      	mov	r1, r8
 80056ba:	203d      	movs	r0, #61	; 0x3d
 80056bc:	f7fb fed0 	bl	8001460 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(63, 3, (BSP_LCD_GetXSize()-66), (BSP_LCD_GetYSize()-66));
 80056c0:	f7fb fdb0 	bl	8001224 <BSP_LCD_GetXSize>
 80056c4:	4605      	mov	r5, r0
 80056c6:	f7fb fdb5 	bl	8001234 <BSP_LCD_GetYSize>
 80056ca:	f1a5 0242 	sub.w	r2, r5, #66	; 0x42
 80056ce:	3842      	subs	r0, #66	; 0x42
 80056d0:	b283      	uxth	r3, r0
 80056d2:	b292      	uxth	r2, r2
 80056d4:	2103      	movs	r1, #3
 80056d6:	203f      	movs	r0, #63	; 0x3f
 80056d8:	f7fb fec2 	bl	8001460 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(65, 5, (BSP_LCD_GetXSize()-70), (BSP_LCD_GetYSize()-70));
 80056dc:	f7fb fda2 	bl	8001224 <BSP_LCD_GetXSize>
 80056e0:	4605      	mov	r5, r0
 80056e2:	f7fb fda7 	bl	8001234 <BSP_LCD_GetYSize>
 80056e6:	f1a5 0246 	sub.w	r2, r5, #70	; 0x46
 80056ea:	3846      	subs	r0, #70	; 0x46
 80056ec:	b283      	uxth	r3, r0
 80056ee:	b292      	uxth	r2, r2
 80056f0:	2105      	movs	r1, #5
 80056f2:	2041      	movs	r0, #65	; 0x41
 80056f4:	f7fb feb4 	bl	8001460 <BSP_LCD_DrawRect>
  BSP_LCD_DrawRect(67, 7, (BSP_LCD_GetXSize()-74), (BSP_LCD_GetYSize()-74));
 80056f8:	f7fb fd94 	bl	8001224 <BSP_LCD_GetXSize>
 80056fc:	4605      	mov	r5, r0
 80056fe:	f7fb fd99 	bl	8001234 <BSP_LCD_GetYSize>
 8005702:	f1a5 024a 	sub.w	r2, r5, #74	; 0x4a
 8005706:	384a      	subs	r0, #74	; 0x4a
 8005708:	b283      	uxth	r3, r0
 800570a:	b292      	uxth	r2, r2
 800570c:	4639      	mov	r1, r7
 800570e:	2043      	movs	r0, #67	; 0x43
 8005710:	f7fb fea6 	bl	8001460 <BSP_LCD_DrawRect>
  BSP_LCD_FillRect(60, (BSP_LCD_GetYSize()-48), 90, 48);
 8005714:	f7fb fd8e 	bl	8001234 <BSP_LCD_GetYSize>
 8005718:	3830      	subs	r0, #48	; 0x30
 800571a:	2330      	movs	r3, #48	; 0x30
 800571c:	b281      	uxth	r1, r0
 800571e:	225a      	movs	r2, #90	; 0x5a
 8005720:	203c      	movs	r0, #60	; 0x3c
 8005722:	f7fb ff45 	bl	80015b0 <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005726:	f04f 30ff 	mov.w	r0, #4294967295
 800572a:	f7fb fe01 	bl	8001330 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(75, (BSP_LCD_GetYSize()-24), 10);
 800572e:	f7fb fd81 	bl	8001234 <BSP_LCD_GetYSize>
 8005732:	3818      	subs	r0, #24
 8005734:	b281      	uxth	r1, r0
 8005736:	220a      	movs	r2, #10
 8005738:	204b      	movs	r0, #75	; 0x4b
 800573a:	f7fc f9e5 	bl	8001b08 <BSP_LCD_FillCircle>
  BSP_LCD_FillCircle(105, (BSP_LCD_GetYSize()-24), 5);
 800573e:	f7fb fd79 	bl	8001234 <BSP_LCD_GetYSize>
 8005742:	3818      	subs	r0, #24
 8005744:	b281      	uxth	r1, r0
 8005746:	2205      	movs	r2, #5
 8005748:	2069      	movs	r0, #105	; 0x69
 800574a:	f7fc f9dd 	bl	8001b08 <BSP_LCD_FillCircle>
  BSP_LCD_FillCircle(135, (BSP_LCD_GetYSize()-24), 2);  
 800574e:	f7fb fd71 	bl	8001234 <BSP_LCD_GetYSize>
 8005752:	3818      	subs	r0, #24
 8005754:	4632      	mov	r2, r6
 8005756:	b281      	uxth	r1, r0
 8005758:	2087      	movs	r0, #135	; 0x87
 800575a:	f7fc f9d5 	bl	8001b08 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKRED);
 800575e:	4850      	ldr	r0, [pc, #320]	; (80058a0 <main+0x35c>)
 8005760:	f7fb fde6 	bl	8001330 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font8);
 8005764:	484f      	ldr	r0, [pc, #316]	; (80058a4 <main+0x360>)
 8005766:	f7fb fdfb 	bl	8001360 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(210, (BSP_LCD_GetYSize()-55), (uint8_t *)"Color", LEFT_MODE);  
 800576a:	f7fb fd63 	bl	8001234 <BSP_LCD_GetYSize>
 800576e:	3837      	subs	r0, #55	; 0x37
 8005770:	b281      	uxth	r1, r0
 8005772:	4a4d      	ldr	r2, [pc, #308]	; (80058a8 <main+0x364>)
 8005774:	2303      	movs	r3, #3
 8005776:	20d2      	movs	r0, #210	; 0xd2
 8005778:	f7fc f8c6 	bl	8001908 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(210, (BSP_LCD_GetYSize()-45), (uint8_t *)"Size", LEFT_MODE);  
 800577c:	f7fb fd5a 	bl	8001234 <BSP_LCD_GetYSize>
 8005780:	382d      	subs	r0, #45	; 0x2d
 8005782:	b281      	uxth	r1, r0
 8005784:	4a49      	ldr	r2, [pc, #292]	; (80058ac <main+0x368>)
 8005786:	2303      	movs	r3, #3
 8005788:	20d2      	movs	r0, #210	; 0xd2
 800578a:	f7fc f8bd 	bl	8001908 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetTextColor(LCD_COLOR_LIGHTMAGENTA); 
 800578e:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 8005792:	f7fb fdcd 	bl	8001330 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(220, (BSP_LCD_GetYSize()-24), 2);  
 8005796:	f7fb fd4d 	bl	8001234 <BSP_LCD_GetYSize>
 800579a:	3818      	subs	r0, #24
 800579c:	4632      	mov	r2, r6
 800579e:	b281      	uxth	r1, r0
 80057a0:	20dc      	movs	r0, #220	; 0xdc
 80057a2:	f7fc f9b1 	bl	8001b08 <BSP_LCD_FillCircle>
  else if ((TS_State.TouchDetected) & ( x > (67 + radius)) & ( y > (7 + radius) ) & ( x < (BSP_LCD_GetXSize()-(7  + radius )) ) & ( y < (BSP_LCD_GetYSize()-(67 + radius )) ))
 80057a6:	4e42      	ldr	r6, [pc, #264]	; (80058b0 <main+0x36c>)
  BSP_TS_GetState(&TS_State); 
 80057a8:	f504 6be3 	add.w	fp, r4, #1816	; 0x718
  color_heigh = 20;
 80057ac:	2314      	movs	r3, #20
  BSP_TS_GetState(&TS_State); 
 80057ae:	4658      	mov	r0, fp
  color_heigh = 20;
 80057b0:	f8c4 3714 	str.w	r3, [r4, #1812]	; 0x714
  BSP_TS_GetState(&TS_State); 
 80057b4:	f7fc fb7a 	bl	8001eac <BSP_TS_GetState>
  x = Calibration_GetX(TS_State.X);
 80057b8:	f8b4 071a 	ldrh.w	r0, [r4, #1818]	; 0x71a
 80057bc:	f000 fbe8 	bl	8005f90 <Calibration_GetX>
 80057c0:	f8c4 0720 	str.w	r0, [r4, #1824]	; 0x720
  y = Calibration_GetX(TS_State.Y);
 80057c4:	f8b4 071c 	ldrh.w	r0, [r4, #1820]	; 0x71c
 80057c8:	f000 fbe2 	bl	8005f90 <Calibration_GetX>
  if ((TS_State.TouchDetected) & ( x > 0 ) & ( x < 50 ))
 80057cc:	f8d4 8720 	ldr.w	r8, [r4, #1824]	; 0x720
 80057d0:	f8b4 5718 	ldrh.w	r5, [r4, #1816]	; 0x718
  y = Calibration_GetX(TS_State.Y);
 80057d4:	f8c4 0724 	str.w	r0, [r4, #1828]	; 0x724
  if ((TS_State.TouchDetected) & ( x > 0 ) & ( x < 50 ))
 80057d8:	f108 32ff 	add.w	r2, r8, #4294967295
 80057dc:	2a30      	cmp	r2, #48	; 0x30
 80057de:	bf8c      	ite	hi
 80057e0:	2300      	movhi	r3, #0
 80057e2:	f005 0301 	andls.w	r3, r5, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 80ed 	beq.w	80059c6 <main+0x482>
    if ((TS_State.TouchDetected) & ( y > 0 ) & ( y < color_heigh ))
 80057ec:	f8d4 3714 	ldr.w	r3, [r4, #1812]	; 0x714
 80057f0:	2800      	cmp	r0, #0
 80057f2:	bf18      	it	ne
 80057f4:	4298      	cmpne	r0, r3
 80057f6:	bf34      	ite	cc
 80057f8:	2201      	movcc	r2, #1
 80057fa:	2200      	movcs	r2, #0
 80057fc:	422a      	tst	r2, r5
 80057fe:	d009      	beq.n	8005814 <main+0x2d0>
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8005804:	f7fb fd94 	bl	8001330 <BSP_LCD_SetTextColor>
    Update_ColorSize();
 8005808:	f7ff fe52 	bl	80054b0 <Update_ColorSize>
    USBH_Process(&hUSBHost);
 800580c:	481e      	ldr	r0, [pc, #120]	; (8005888 <main+0x344>)
 800580e:	f002 fc34 	bl	800807a <USBH_Process>
  while (1)
 8005812:	e7cb      	b.n	80057ac <main+0x268>
    else if ((TS_State.TouchDetected) & ( y > color_heigh ) & ( y < (2*color_heigh) ))
 8005814:	005a      	lsls	r2, r3, #1
 8005816:	4298      	cmp	r0, r3
 8005818:	bf88      	it	hi
 800581a:	4282      	cmphi	r2, r0
 800581c:	4611      	mov	r1, r2
 800581e:	bf8c      	ite	hi
 8005820:	2101      	movhi	r1, #1
 8005822:	2100      	movls	r1, #0
 8005824:	4229      	tst	r1, r5
 8005826:	d002      	beq.n	800582e <main+0x2ea>
      BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 8005828:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 800582c:	e7ea      	b.n	8005804 <main+0x2c0>
    else if ((TS_State.TouchDetected) & ( y > (2*color_heigh) ) & ( y < (3*color_heigh) ))
 800582e:	18d1      	adds	r1, r2, r3
 8005830:	4290      	cmp	r0, r2
 8005832:	bf94      	ite	ls
 8005834:	2200      	movls	r2, #0
 8005836:	2201      	movhi	r2, #1
 8005838:	4288      	cmp	r0, r1
 800583a:	bf28      	it	cs
 800583c:	2200      	movcs	r2, #0
 800583e:	422a      	tst	r2, r5
 8005840:	d001      	beq.n	8005846 <main+0x302>
      BSP_LCD_SetTextColor(LCD_COLOR_ORANGE);
 8005842:	481c      	ldr	r0, [pc, #112]	; (80058b4 <main+0x370>)
 8005844:	e7de      	b.n	8005804 <main+0x2c0>
    else if ((TS_State.TouchDetected) & ( y > (3*color_heigh) ) & ( y < (4*color_heigh) ))
 8005846:	009a      	lsls	r2, r3, #2
 8005848:	4288      	cmp	r0, r1
 800584a:	bf88      	it	hi
 800584c:	4282      	cmphi	r2, r0
 800584e:	bf8c      	ite	hi
 8005850:	2101      	movhi	r1, #1
 8005852:	2100      	movls	r1, #0
 8005854:	4229      	tst	r1, r5
 8005856:	d002      	beq.n	800585e <main+0x31a>
      BSP_LCD_SetTextColor(LCD_COLOR_LIGHTMAGENTA);
 8005858:	f46f 40fe 	mvn.w	r0, #32512	; 0x7f00
 800585c:	e7d2      	b.n	8005804 <main+0x2c0>
    else if ((TS_State.TouchDetected) & ( y > (4*color_heigh) ) & ( y < (5*color_heigh) ))
 800585e:	18d1      	adds	r1, r2, r3
 8005860:	4290      	cmp	r0, r2
 8005862:	bf94      	ite	ls
 8005864:	2200      	movls	r2, #0
 8005866:	2201      	movhi	r2, #1
 8005868:	4288      	cmp	r0, r1
 800586a:	bf28      	it	cs
 800586c:	2200      	movcs	r2, #0
 800586e:	422a      	tst	r2, r5
 8005870:	d024      	beq.n	80058bc <main+0x378>
      BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 8005872:	4811      	ldr	r0, [pc, #68]	; (80058b8 <main+0x374>)
 8005874:	e7c6      	b.n	8005804 <main+0x2c0>
 8005876:	bf00      	nop
 8005878:	40023800 	.word	0x40023800
 800587c:	40007000 	.word	0x40007000
 8005880:	d0130000 	.word	0xd0130000
 8005884:	08005515 	.word	0x08005515
 8005888:	200006d4 	.word	0x200006d4
 800588c:	2000049c 	.word	0x2000049c
 8005890:	200000dc 	.word	0x200000dc
 8005894:	080149d4 	.word	0x080149d4
 8005898:	0800dec0 	.word	0x0800dec0
 800589c:	0800cb00 	.word	0x0800cb00
 80058a0:	ff800000 	.word	0xff800000
 80058a4:	200000a8 	.word	0x200000a8
 80058a8:	080149e8 	.word	0x080149e8
 80058ac:	080149ee 	.word	0x080149ee
 80058b0:	200000d8 	.word	0x200000d8
 80058b4:	ffffa500 	.word	0xffffa500
 80058b8:	ff008000 	.word	0xff008000
    else if ((TS_State.TouchDetected) & ( y > (5*color_heigh) ) &( y < (6*color_heigh) ))
 80058bc:	2206      	movs	r2, #6
 80058be:	4288      	cmp	r0, r1
 80058c0:	fb03 f202 	mul.w	r2, r3, r2
 80058c4:	bf94      	ite	ls
 80058c6:	2100      	movls	r1, #0
 80058c8:	2101      	movhi	r1, #1
 80058ca:	4290      	cmp	r0, r2
 80058cc:	bf28      	it	cs
 80058ce:	2100      	movcs	r1, #0
 80058d0:	4229      	tst	r1, r5
 80058d2:	d002      	beq.n	80058da <main+0x396>
      BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 80058d4:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 80058d8:	e794      	b.n	8005804 <main+0x2c0>
    else if ((TS_State.TouchDetected) & ( y > (6*color_heigh) ) &( y < (7*color_heigh) ))
 80058da:	4290      	cmp	r0, r2
 80058dc:	ebc3 07c3 	rsb	r7, r3, r3, lsl #3
 80058e0:	bf94      	ite	ls
 80058e2:	2200      	movls	r2, #0
 80058e4:	2201      	movhi	r2, #1
 80058e6:	42b8      	cmp	r0, r7
 80058e8:	bf28      	it	cs
 80058ea:	2200      	movcs	r2, #0
 80058ec:	422a      	tst	r2, r5
 80058ee:	ea4f 01c3 	mov.w	r1, r3, lsl #3
 80058f2:	d001      	beq.n	80058f8 <main+0x3b4>
      BSP_LCD_SetTextColor(LCD_COLOR_BROWN);
 80058f4:	4897      	ldr	r0, [pc, #604]	; (8005b54 <main+0x610>)
 80058f6:	e785      	b.n	8005804 <main+0x2c0>
    else if ((TS_State.TouchDetected) & ( y > (7*color_heigh) ) & ( y < (8*color_heigh) ))
 80058f8:	42b8      	cmp	r0, r7
 80058fa:	bf94      	ite	ls
 80058fc:	2700      	movls	r7, #0
 80058fe:	2701      	movhi	r7, #1
 8005900:	4288      	cmp	r0, r1
 8005902:	bf28      	it	cs
 8005904:	2700      	movcs	r7, #0
 8005906:	422f      	tst	r7, r5
 8005908:	d001      	beq.n	800590e <main+0x3ca>
      BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800590a:	4893      	ldr	r0, [pc, #588]	; (8005b58 <main+0x614>)
 800590c:	e77a      	b.n	8005804 <main+0x2c0>
    else if ((TS_State.TouchDetected) & ( y > (8*color_heigh) ) & ( y < (9*color_heigh) ))
 800590e:	18ca      	adds	r2, r1, r3
 8005910:	4288      	cmp	r0, r1
 8005912:	bf94      	ite	ls
 8005914:	2100      	movls	r1, #0
 8005916:	2101      	movhi	r1, #1
 8005918:	4290      	cmp	r0, r2
 800591a:	bf28      	it	cs
 800591c:	2100      	movcs	r1, #0
 800591e:	4229      	tst	r1, r5
 8005920:	d001      	beq.n	8005926 <main+0x3e2>
      BSP_LCD_SetTextColor(LCD_COLOR_DARKMAGENTA);
 8005922:	488e      	ldr	r0, [pc, #568]	; (8005b5c <main+0x618>)
 8005924:	e76e      	b.n	8005804 <main+0x2c0>
    else if ((TS_State.TouchDetected) & ( y > (9*color_heigh) ) & ( y < (10*color_heigh) ))
 8005926:	210a      	movs	r1, #10
 8005928:	4290      	cmp	r0, r2
 800592a:	fb03 f101 	mul.w	r1, r3, r1
 800592e:	bf94      	ite	ls
 8005930:	2200      	movls	r2, #0
 8005932:	2201      	movhi	r2, #1
 8005934:	4288      	cmp	r0, r1
 8005936:	bf28      	it	cs
 8005938:	2200      	movcs	r2, #0
 800593a:	422a      	tst	r2, r5
 800593c:	d002      	beq.n	8005944 <main+0x400>
      BSP_LCD_SetTextColor(LCD_COLOR_CYAN);
 800593e:	f46f 007f 	mvn.w	r0, #16711680	; 0xff0000
 8005942:	e75f      	b.n	8005804 <main+0x2c0>
    else if ((TS_State.TouchDetected) & ( y > (10*color_heigh) ) & ( y < (11*color_heigh) ))
 8005944:	220b      	movs	r2, #11
 8005946:	4288      	cmp	r0, r1
 8005948:	fb03 f202 	mul.w	r2, r3, r2
 800594c:	bf94      	ite	ls
 800594e:	2100      	movls	r1, #0
 8005950:	2101      	movhi	r1, #1
 8005952:	4290      	cmp	r0, r2
 8005954:	bf28      	it	cs
 8005956:	2100      	movcs	r1, #0
 8005958:	4229      	tst	r1, r5
 800595a:	d001      	beq.n	8005960 <main+0x41c>
      BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 800595c:	4880      	ldr	r0, [pc, #512]	; (8005b60 <main+0x61c>)
 800595e:	e751      	b.n	8005804 <main+0x2c0>
    else if ((TS_State.TouchDetected) & ( y > (11*color_heigh) ) & ( y < (12*color_heigh) ))
 8005960:	210c      	movs	r1, #12
 8005962:	4290      	cmp	r0, r2
 8005964:	fb03 f101 	mul.w	r1, r3, r1
 8005968:	bf94      	ite	ls
 800596a:	2200      	movls	r2, #0
 800596c:	2201      	movhi	r2, #1
 800596e:	4288      	cmp	r0, r1
 8005970:	bf28      	it	cs
 8005972:	2200      	movcs	r2, #0
 8005974:	422a      	tst	r2, r5
 8005976:	d002      	beq.n	800597e <main+0x43a>
      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005978:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800597c:	e742      	b.n	8005804 <main+0x2c0>
    else if ((TS_State.TouchDetected) &  ( y > (12*color_heigh) ) & ( y < (13*color_heigh) ))
 800597e:	220d      	movs	r2, #13
 8005980:	4353      	muls	r3, r2
 8005982:	4298      	cmp	r0, r3
 8005984:	bf2c      	ite	cs
 8005986:	2300      	movcs	r3, #0
 8005988:	2301      	movcc	r3, #1
 800598a:	4288      	cmp	r0, r1
 800598c:	bf98      	it	ls
 800598e:	2300      	movls	r3, #0
 8005990:	402b      	ands	r3, r5
 8005992:	d013      	beq.n	80059bc <main+0x478>
      color = BSP_LCD_GetTextColor();
 8005994:	f7fb fcc0 	bl	8001318 <BSP_LCD_GetTextColor>
 8005998:	f8c4 0728 	str.w	r0, [r4, #1832]	; 0x728
      BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800599c:	f04f 30ff 	mov.w	r0, #4294967295
 80059a0:	f7fb fcc6 	bl	8001330 <BSP_LCD_SetTextColor>
      BSP_LCD_FillRect(68, 8, 164, 245);
 80059a4:	2044      	movs	r0, #68	; 0x44
 80059a6:	23f5      	movs	r3, #245	; 0xf5
 80059a8:	22a4      	movs	r2, #164	; 0xa4
 80059aa:	2108      	movs	r1, #8
 80059ac:	f7fb fe00 	bl	80015b0 <BSP_LCD_FillRect>
      BSP_LCD_SetTextColor(color);
 80059b0:	f8d4 0728 	ldr.w	r0, [r4, #1832]	; 0x728
 80059b4:	f7fb fcbc 	bl	8001330 <BSP_LCD_SetTextColor>
    radius = 2;
 80059b8:	2302      	movs	r3, #2
 80059ba:	e027      	b.n	8005a0c <main+0x4c8>
      x = 0;
 80059bc:	f8c4 3720 	str.w	r3, [r4, #1824]	; 0x720
      y = 0;
 80059c0:	f8c4 3724 	str.w	r3, [r4, #1828]	; 0x724
    Update_ColorSize();    
 80059c4:	e720      	b.n	8005808 <main+0x2c4>
  else if ((TS_State.TouchDetected) & ( x > 65 ) & ( y > (BSP_LCD_GetYSize()-48)) & ( y < (BSP_LCD_GetYSize()) ) & ( x < 85 ))
 80059c6:	f7fb fc35 	bl	8001234 <BSP_LCD_GetYSize>
 80059ca:	f8d4 3724 	ldr.w	r3, [r4, #1828]	; 0x724
 80059ce:	3830      	subs	r0, #48	; 0x30
 80059d0:	4298      	cmp	r0, r3
 80059d2:	bf2c      	ite	cs
 80059d4:	f04f 0900 	movcs.w	r9, #0
 80059d8:	f04f 0901 	movcc.w	r9, #1
 80059dc:	f7fb fc2a 	bl	8001234 <BSP_LCD_GetYSize>
 80059e0:	f8d4 7720 	ldr.w	r7, [r4, #1824]	; 0x720
 80059e4:	f8d4 2724 	ldr.w	r2, [r4, #1828]	; 0x724
 80059e8:	f1b8 0f41 	cmp.w	r8, #65	; 0x41
 80059ec:	bf8c      	ite	hi
 80059ee:	2301      	movhi	r3, #1
 80059f0:	2300      	movls	r3, #0
 80059f2:	2f54      	cmp	r7, #84	; 0x54
 80059f4:	bf88      	it	hi
 80059f6:	2300      	movhi	r3, #0
 80059f8:	402b      	ands	r3, r5
 80059fa:	4290      	cmp	r0, r2
 80059fc:	bf94      	ite	ls
 80059fe:	2300      	movls	r3, #0
 8005a00:	f003 0301 	andhi.w	r3, r3, #1
 8005a04:	ea13 0f09 	tst.w	r3, r9
 8005a08:	d002      	beq.n	8005a10 <main+0x4cc>
    radius = 10;
 8005a0a:	230a      	movs	r3, #10
 8005a0c:	6033      	str	r3, [r6, #0]
 8005a0e:	e6fb      	b.n	8005808 <main+0x2c4>
  else if ((TS_State.TouchDetected) & ( x > 100 ) & ( y > (BSP_LCD_GetYSize()-48) ) & ( y < (BSP_LCD_GetYSize()) ) & ( x < 110 ))
 8005a10:	f8b4 9718 	ldrh.w	r9, [r4, #1816]	; 0x718
 8005a14:	f7fb fc0e 	bl	8001234 <BSP_LCD_GetYSize>
 8005a18:	f8d4 3724 	ldr.w	r3, [r4, #1828]	; 0x724
 8005a1c:	3830      	subs	r0, #48	; 0x30
 8005a1e:	4298      	cmp	r0, r3
 8005a20:	bf2c      	ite	cs
 8005a22:	f04f 0800 	movcs.w	r8, #0
 8005a26:	f04f 0801 	movcc.w	r8, #1
 8005a2a:	f7fb fc03 	bl	8001234 <BSP_LCD_GetYSize>
 8005a2e:	f8d4 5720 	ldr.w	r5, [r4, #1824]	; 0x720
 8005a32:	f8d4 3724 	ldr.w	r3, [r4, #1828]	; 0x724
 8005a36:	2f64      	cmp	r7, #100	; 0x64
 8005a38:	bf8c      	ite	hi
 8005a3a:	2701      	movhi	r7, #1
 8005a3c:	2700      	movls	r7, #0
 8005a3e:	2d6d      	cmp	r5, #109	; 0x6d
 8005a40:	bf88      	it	hi
 8005a42:	2700      	movhi	r7, #0
 8005a44:	ea07 0709 	and.w	r7, r7, r9
 8005a48:	4298      	cmp	r0, r3
 8005a4a:	bf94      	ite	ls
 8005a4c:	2700      	movls	r7, #0
 8005a4e:	f007 0701 	andhi.w	r7, r7, #1
 8005a52:	ea17 0f08 	tst.w	r7, r8
 8005a56:	d001      	beq.n	8005a5c <main+0x518>
    radius = 5;
 8005a58:	2305      	movs	r3, #5
 8005a5a:	e7d7      	b.n	8005a0c <main+0x4c8>
  else if ((TS_State.TouchDetected) & ( x > 133 ) & ( y > (BSP_LCD_GetYSize()-48) ) & ( y < (BSP_LCD_GetYSize()) ) & ( x < 137 ))
 8005a5c:	f8b4 9718 	ldrh.w	r9, [r4, #1816]	; 0x718
 8005a60:	f7fb fbe8 	bl	8001234 <BSP_LCD_GetYSize>
 8005a64:	f8d4 7724 	ldr.w	r7, [r4, #1828]	; 0x724
 8005a68:	3830      	subs	r0, #48	; 0x30
 8005a6a:	42b8      	cmp	r0, r7
 8005a6c:	bf2c      	ite	cs
 8005a6e:	f04f 0800 	movcs.w	r8, #0
 8005a72:	f04f 0801 	movcc.w	r8, #1
 8005a76:	f7fb fbdd 	bl	8001234 <BSP_LCD_GetYSize>
 8005a7a:	f8d4 3720 	ldr.w	r3, [r4, #1824]	; 0x720
 8005a7e:	2b88      	cmp	r3, #136	; 0x88
 8005a80:	bf94      	ite	ls
 8005a82:	2701      	movls	r7, #1
 8005a84:	2700      	movhi	r7, #0
 8005a86:	2d85      	cmp	r5, #133	; 0x85
 8005a88:	bf98      	it	ls
 8005a8a:	2700      	movls	r7, #0
 8005a8c:	f8d4 3724 	ldr.w	r3, [r4, #1828]	; 0x724
 8005a90:	ea07 0709 	and.w	r7, r7, r9
 8005a94:	4298      	cmp	r0, r3
 8005a96:	bf94      	ite	ls
 8005a98:	2700      	movls	r7, #0
 8005a9a:	f007 0701 	andhi.w	r7, r7, #1
 8005a9e:	ea17 0708 	ands.w	r7, r7, r8
 8005aa2:	d189      	bne.n	80059b8 <main+0x474>
  else if (((TS_State.TouchDetected) & ( x > (BSP_LCD_GetXSize()-5) ) & ( y > (12*color_heigh) ) & ( y < (13*color_heigh) )) | (( x < 55 ) & ( y < 5 )))
 8005aa4:	f8b4 8718 	ldrh.w	r8, [r4, #1816]	; 0x718
 8005aa8:	f7fb fbbc 	bl	8001224 <BSP_LCD_GetXSize>
 8005aac:	f8d4 1714 	ldr.w	r1, [r4, #1812]	; 0x714
 8005ab0:	f8d4 2724 	ldr.w	r2, [r4, #1828]	; 0x724
 8005ab4:	f8d4 5720 	ldr.w	r5, [r4, #1824]	; 0x720
 8005ab8:	230c      	movs	r3, #12
 8005aba:	f04f 0c0d 	mov.w	ip, #13
 8005abe:	434b      	muls	r3, r1
 8005ac0:	fb0c f101 	mul.w	r1, ip, r1
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	bf38      	it	cc
 8005ac8:	428a      	cmpcc	r2, r1
 8005aca:	bf34      	ite	cc
 8005acc:	2301      	movcc	r3, #1
 8005ace:	2300      	movcs	r3, #0
 8005ad0:	ea03 0308 	and.w	r3, r3, r8
 8005ad4:	3805      	subs	r0, #5
 8005ad6:	42a8      	cmp	r0, r5
 8005ad8:	bf2c      	ite	cs
 8005ada:	2300      	movcs	r3, #0
 8005adc:	f003 0301 	andcc.w	r3, r3, #1
 8005ae0:	2d36      	cmp	r5, #54	; 0x36
 8005ae2:	bf98      	it	ls
 8005ae4:	2a04      	cmpls	r2, #4
 8005ae6:	bf94      	ite	ls
 8005ae8:	2101      	movls	r1, #1
 8005aea:	2100      	movhi	r1, #0
 8005aec:	430b      	orrs	r3, r1
 8005aee:	d004      	beq.n	8005afa <main+0x5b6>
    x = 0;
 8005af0:	f8c4 7720 	str.w	r7, [r4, #1824]	; 0x720
    y = 0;
 8005af4:	f8c4 7724 	str.w	r7, [r4, #1828]	; 0x724
 8005af8:	e688      	b.n	800580c <main+0x2c8>
  else if ((TS_State.TouchDetected) & ( x > (67 + radius)) & ( y > (7 + radius) ) & ( x < (BSP_LCD_GetXSize()-(7  + radius )) ) & ( y < (BSP_LCD_GetYSize()-(67 + radius )) ))
 8005afa:	6833      	ldr	r3, [r6, #0]
 8005afc:	f103 0143 	add.w	r1, r3, #67	; 0x43
 8005b00:	3307      	adds	r3, #7
 8005b02:	428d      	cmp	r5, r1
 8005b04:	bf88      	it	hi
 8005b06:	429a      	cmphi	r2, r3
 8005b08:	f8b4 3718 	ldrh.w	r3, [r4, #1816]	; 0x718
 8005b0c:	bf8c      	ite	hi
 8005b0e:	2501      	movhi	r5, #1
 8005b10:	2500      	movls	r5, #0
 8005b12:	401d      	ands	r5, r3
 8005b14:	f7fb fb86 	bl	8001224 <BSP_LCD_GetXSize>
 8005b18:	6833      	ldr	r3, [r6, #0]
 8005b1a:	1ac0      	subs	r0, r0, r3
 8005b1c:	f8d4 3720 	ldr.w	r3, [r4, #1824]	; 0x720
 8005b20:	3807      	subs	r0, #7
 8005b22:	4298      	cmp	r0, r3
 8005b24:	bf94      	ite	ls
 8005b26:	2500      	movls	r5, #0
 8005b28:	f005 0501 	andhi.w	r5, r5, #1
 8005b2c:	f7fb fb82 	bl	8001234 <BSP_LCD_GetYSize>
 8005b30:	6832      	ldr	r2, [r6, #0]
 8005b32:	f8d4 1724 	ldr.w	r1, [r4, #1828]	; 0x724
 8005b36:	1a80      	subs	r0, r0, r2
 8005b38:	3843      	subs	r0, #67	; 0x43
 8005b3a:	4288      	cmp	r0, r1
 8005b3c:	bf94      	ite	ls
 8005b3e:	2500      	movls	r5, #0
 8005b40:	f005 0501 	andhi.w	r5, r5, #1
 8005b44:	b175      	cbz	r5, 8005b64 <main+0x620>
    BSP_LCD_FillCircle((x), (y), radius);
 8005b46:	f8b4 0720 	ldrh.w	r0, [r4, #1824]	; 0x720
 8005b4a:	b292      	uxth	r2, r2
 8005b4c:	b289      	uxth	r1, r1
 8005b4e:	f7fb ffdb 	bl	8001b08 <BSP_LCD_FillCircle>
 8005b52:	e65b      	b.n	800580c <main+0x2c8>
 8005b54:	ffa52a2a 	.word	0xffa52a2a
 8005b58:	ffff0000 	.word	0xffff0000
 8005b5c:	ff800080 	.word	0xff800080
 8005b60:	ff000080 	.word	0xff000080
  else if ((TS_State.TouchDetected) & ( (x > 150) & ( y > (BSP_LCD_GetYSize() - 50) )) & ( x < 200 ) & ( y < (BSP_LCD_GetYSize()) ))
 8005b64:	f8d4 3720 	ldr.w	r3, [r4, #1824]	; 0x720
 8005b68:	f8b4 7718 	ldrh.w	r7, [r4, #1816]	; 0x718
 8005b6c:	2b96      	cmp	r3, #150	; 0x96
 8005b6e:	bf94      	ite	ls
 8005b70:	f04f 0800 	movls.w	r8, #0
 8005b74:	f04f 0801 	movhi.w	r8, #1
 8005b78:	f7fb fb5c 	bl	8001234 <BSP_LCD_GetYSize>
 8005b7c:	f8d4 3720 	ldr.w	r3, [r4, #1824]	; 0x720
 8005b80:	f8d4 2724 	ldr.w	r2, [r4, #1828]	; 0x724
 8005b84:	3832      	subs	r0, #50	; 0x32
 8005b86:	2bc7      	cmp	r3, #199	; 0xc7
 8005b88:	bf8c      	ite	hi
 8005b8a:	2700      	movhi	r7, #0
 8005b8c:	f007 0701 	andls.w	r7, r7, #1
 8005b90:	4290      	cmp	r0, r2
 8005b92:	bf2c      	ite	cs
 8005b94:	f04f 0800 	movcs.w	r8, #0
 8005b98:	f008 0801 	andcc.w	r8, r8, #1
 8005b9c:	f7fb fb4a 	bl	8001234 <BSP_LCD_GetYSize>
 8005ba0:	f8d4 3724 	ldr.w	r3, [r4, #1828]	; 0x724
 8005ba4:	4298      	cmp	r0, r3
 8005ba6:	bf94      	ite	ls
 8005ba8:	2700      	movls	r7, #0
 8005baa:	f007 0701 	andhi.w	r7, r7, #1
 8005bae:	ea17 0f08 	tst.w	r7, r8
 8005bb2:	f43f ae2b 	beq.w	800580c <main+0x2c8>
  BSP_LCD_SetLayerVisible(1, ENABLE);
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	4608      	mov	r0, r1
 8005bba:	f7fb fb89 	bl	80012d0 <BSP_LCD_SetLayerVisible>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 8005bbe:	f04f 31ff 	mov.w	r1, #4294967295
 8005bc2:	2001      	movs	r0, #1
 8005bc4:	f7fb fb98 	bl	80012f8 <BSP_LCD_SetColorKeying>
  BSP_LCD_SelectLayer(1);
 8005bc8:	2001      	movs	r0, #1
 8005bca:	f7fb fb7b 	bl	80012c4 <BSP_LCD_SelectLayer>
  BSP_LCD_SetTextColor(LCD_COLOR_DARKRED);
 8005bce:	4857      	ldr	r0, [pc, #348]	; (8005d2c <main+0x7e8>)
 8005bd0:	f7fb fbae 	bl	8001330 <BSP_LCD_SetTextColor>
  BSP_LCD_SetFont(&Font20);
 8005bd4:	4856      	ldr	r0, [pc, #344]	; (8005d30 <main+0x7ec>)
 8005bd6:	f7fb fbc3 	bl	8001360 <BSP_LCD_SetFont>
  if (Appli_state == APPLICATION_START)
 8005bda:	f894 a004 	ldrb.w	sl, [r4, #4]
 8005bde:	f1ba 0f01 	cmp.w	sl, #1
 8005be2:	f040 809c 	bne.w	8005d1e <main+0x7da>
    BSP_LCD_DisplayStringAt(10, (BSP_LCD_GetYSize()-100), (uint8_t *)"Saving ... ", RIGHT_MODE);
 8005be6:	f7fb fb25 	bl	8001234 <BSP_LCD_GetYSize>
 8005bea:	3864      	subs	r0, #100	; 0x64
 8005bec:	b281      	uxth	r1, r0
 8005bee:	4a51      	ldr	r2, [pc, #324]	; (8005d34 <main+0x7f0>)
  uint32_t address1 = CONVERTED_FRAME_BUFFER;
 8005bf0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8005d4c <main+0x808>
    if(HAL_DMA2D_Init(&hdma2d_dk) == HAL_OK) 
 8005bf4:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8005d5c <main+0x818>
    BSP_LCD_DisplayStringAt(10, (BSP_LCD_GetYSize()-100), (uint8_t *)"Saving ... ", RIGHT_MODE);
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	200a      	movs	r0, #10
 8005bfc:	f7fb fe84 	bl	8001908 <BSP_LCD_DisplayStringAt>
  hdma2d_dk.Init.Mode         = DMA2D_M2M_PFC;
 8005c00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c04:	f8c4 3730 	str.w	r3, [r4, #1840]	; 0x730
  hdma2d_dk.LayerCfg[1].InputAlpha = 0xFF;
 8005c08:	23ff      	movs	r3, #255	; 0xff
 8005c0a:	f8c4 3760 	str.w	r3, [r4, #1888]	; 0x760
  hdma2d_dk.LayerCfg[1].InputOffset = 60;
 8005c0e:	233c      	movs	r3, #60	; 0x3c
 8005c10:	f8c4 3754 	str.w	r3, [r4, #1876]	; 0x754
  hdma2d_dk.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8005c14:	f8c4 575c 	str.w	r5, [r4, #1884]	; 0x75c
  hdma2d_dk.Instance = DMA2D; 
 8005c18:	4b47      	ldr	r3, [pc, #284]	; (8005d38 <main+0x7f4>)
  hdma2d_dk.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8005c1a:	f8c4 5758 	str.w	r5, [r4, #1880]	; 0x758
  hdma2d_dk.Instance = DMA2D; 
 8005c1e:	f8c4 372c 	str.w	r3, [r4, #1836]	; 0x72c
  hdma2d_dk.Init.ColorMode    = DMA2D_RGB888;
 8005c22:	f8c4 a734 	str.w	sl, [r4, #1844]	; 0x734
  hdma2d_dk.Init.OutputOffset = 0;     
 8005c26:	f8c4 5738 	str.w	r5, [r4, #1848]	; 0x738
  address2 += ((BSP_LCD_GetXSize() * (BSP_LCD_GetYSize() - 61) + 60) * 4);  
 8005c2a:	f7fb fafb 	bl	8001224 <BSP_LCD_GetXSize>
 8005c2e:	4607      	mov	r7, r0
 8005c30:	f7fb fb00 	bl	8001234 <BSP_LCD_GetYSize>
 8005c34:	f1a0 033d 	sub.w	r3, r0, #61	; 0x3d
 8005c38:	fb07 f003 	mul.w	r0, r7, r3
 8005c3c:	4f3f      	ldr	r7, [pc, #252]	; (8005d3c <main+0x7f8>)
 8005c3e:	0080      	lsls	r0, r0, #2
 8005c40:	4407      	add	r7, r0
  for(index=0; index < (BSP_LCD_GetYSize() - 60); index++)
 8005c42:	f7fb faf7 	bl	8001234 <BSP_LCD_GetYSize>
 8005c46:	383c      	subs	r0, #60	; 0x3c
 8005c48:	4285      	cmp	r5, r0
 8005c4a:	d343      	bcc.n	8005cd4 <main+0x790>
    if(f_open(&MyFile, "image.bmp", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8005c4c:	493c      	ldr	r1, [pc, #240]	; (8005d40 <main+0x7fc>)
 8005c4e:	483d      	ldr	r0, [pc, #244]	; (8005d44 <main+0x800>)
 8005c50:	220a      	movs	r2, #10
 8005c52:	f001 f959 	bl	8006f08 <f_open>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	f47f acef 	bne.w	800563a <main+0xf6>
      res = f_write(&MyFile, (uint32_t *)aBMPHeader, 54, (void *)&bytesWritten);
 8005c5c:	493a      	ldr	r1, [pc, #232]	; (8005d48 <main+0x804>)
 8005c5e:	4839      	ldr	r0, [pc, #228]	; (8005d44 <main+0x800>)
 8005c60:	ab0a      	add	r3, sp, #40	; 0x28
 8005c62:	2236      	movs	r2, #54	; 0x36
 8005c64:	f001 fa50 	bl	8007108 <f_write>
      res = f_write(&MyFile, (uint32_t *)CONVERTED_FRAME_BUFFER, ((BSP_LCD_GetYSize()-60)*(BSP_LCD_GetXSize()-60)*3), (void *)&bytesWritten);
 8005c68:	f7fb fae4 	bl	8001234 <BSP_LCD_GetYSize>
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	f7fb fad9 	bl	8001224 <BSP_LCD_GetXSize>
 8005c72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c76:	3db4      	subs	r5, #180	; 0xb4
 8005c78:	383c      	subs	r0, #60	; 0x3c
 8005c7a:	fb00 f205 	mul.w	r2, r0, r5
 8005c7e:	ab0a      	add	r3, sp, #40	; 0x28
 8005c80:	4932      	ldr	r1, [pc, #200]	; (8005d4c <main+0x808>)
 8005c82:	4830      	ldr	r0, [pc, #192]	; (8005d44 <main+0x800>)
 8005c84:	f001 fa40 	bl	8007108 <f_write>
      if((bytesWritten == 0) || (res != FR_OK))
 8005c88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
      res = f_write(&MyFile, (uint32_t *)CONVERTED_FRAME_BUFFER, ((BSP_LCD_GetYSize()-60)*(BSP_LCD_GetXSize()-60)*3), (void *)&bytesWritten);
 8005c8a:	4605      	mov	r5, r0
      if((bytesWritten == 0) || (res != FR_OK))
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	f43f acd4 	beq.w	800563a <main+0xf6>
 8005c92:	2800      	cmp	r0, #0
 8005c94:	f47f acd1 	bne.w	800563a <main+0xf6>
        f_close(&MyFile);
 8005c98:	482a      	ldr	r0, [pc, #168]	; (8005d44 <main+0x800>)
 8005c9a:	f001 fb45 	bl	8007328 <f_close>
        BSP_LED_On(LED3);
 8005c9e:	4628      	mov	r0, r5
 8005ca0:	f7fb f934 	bl	8000f0c <BSP_LED_On>
        BSP_LCD_SetTextColor(LCD_COLOR_DARKGREEN);
 8005ca4:	482a      	ldr	r0, [pc, #168]	; (8005d50 <main+0x80c>)
 8005ca6:	f7fb fb43 	bl	8001330 <BSP_LCD_SetTextColor>
        BSP_LCD_DisplayStringAt(10, (BSP_LCD_GetYSize()-100), (uint8_t *)"Save       ", RIGHT_MODE);
 8005caa:	f7fb fac3 	bl	8001234 <BSP_LCD_GetYSize>
 8005cae:	4a29      	ldr	r2, [pc, #164]	; (8005d54 <main+0x810>)
 8005cb0:	3864      	subs	r0, #100	; 0x64
 8005cb2:	2302      	movs	r3, #2
    BSP_LCD_DisplayStringAt(10, (BSP_LCD_GetYSize()-100), (uint8_t *)"USB KO... ", RIGHT_MODE);
 8005cb4:	b281      	uxth	r1, r0
 8005cb6:	200a      	movs	r0, #10
 8005cb8:	f7fb fe26 	bl	8001908 <BSP_LCD_DisplayStringAt>
    HAL_Delay(2000);
 8005cbc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005cc0:	f7fc f9c2 	bl	8002048 <HAL_Delay>
    BSP_LCD_SetLayerVisible(1, DISABLE);
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	2001      	movs	r0, #1
 8005cc8:	f7fb fb02 	bl	80012d0 <BSP_LCD_SetLayerVisible>
    BSP_LCD_SelectLayer(0);
 8005ccc:	4628      	mov	r0, r5
 8005cce:	f7fb faf9 	bl	80012c4 <BSP_LCD_SelectLayer>
}
 8005cd2:	e59b      	b.n	800580c <main+0x2c8>
    if(HAL_DMA2D_Init(&hdma2d_dk) == HAL_OK) 
 8005cd4:	4640      	mov	r0, r8
 8005cd6:	f7fc fb34 	bl	8002342 <HAL_DMA2D_Init>
 8005cda:	b9a0      	cbnz	r0, 8005d06 <main+0x7c2>
      if(HAL_DMA2D_ConfigLayer(&hdma2d_dk, 1) == HAL_OK) 
 8005cdc:	2101      	movs	r1, #1
 8005cde:	4640      	mov	r0, r8
 8005ce0:	f7fc fbf6 	bl	80024d0 <HAL_DMA2D_ConfigLayer>
 8005ce4:	b978      	cbnz	r0, 8005d06 <main+0x7c2>
        if (HAL_DMA2D_Start(&hdma2d_dk, address2, address1, (BSP_LCD_GetXSize() - 60), 1) == HAL_OK)
 8005ce6:	f7fb fa9d 	bl	8001224 <BSP_LCD_GetXSize>
 8005cea:	f8cd a000 	str.w	sl, [sp]
 8005cee:	f1a0 033c 	sub.w	r3, r0, #60	; 0x3c
 8005cf2:	464a      	mov	r2, r9
 8005cf4:	4639      	mov	r1, r7
 8005cf6:	4640      	mov	r0, r8
 8005cf8:	f7fc fb4f 	bl	800239a <HAL_DMA2D_Start>
 8005cfc:	b918      	cbnz	r0, 8005d06 <main+0x7c2>
          HAL_DMA2D_PollForTransfer(&hdma2d_dk, 10);
 8005cfe:	210a      	movs	r1, #10
 8005d00:	4640      	mov	r0, r8
 8005d02:	f7fc fb64 	bl	80023ce <HAL_DMA2D_PollForTransfer>
    address1 += ((BSP_LCD_GetXSize() - 60)*3);
 8005d06:	f7fb fa8d 	bl	8001224 <BSP_LCD_GetXSize>
 8005d0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005d0e:	38b4      	subs	r0, #180	; 0xb4
 8005d10:	4481      	add	r9, r0
    address2 -= BSP_LCD_GetXSize()*4;
 8005d12:	f7fb fa87 	bl	8001224 <BSP_LCD_GetXSize>
  for(index=0; index < (BSP_LCD_GetYSize() - 60); index++)
 8005d16:	3501      	adds	r5, #1
    address2 -= BSP_LCD_GetXSize()*4;
 8005d18:	eba7 0780 	sub.w	r7, r7, r0, lsl #2
  for(index=0; index < (BSP_LCD_GetYSize() - 60); index++)
 8005d1c:	e791      	b.n	8005c42 <main+0x6fe>
    BSP_LCD_DisplayStringAt(10, (BSP_LCD_GetYSize()-100), (uint8_t *)"USB KO... ", RIGHT_MODE);
 8005d1e:	f7fb fa89 	bl	8001234 <BSP_LCD_GetYSize>
 8005d22:	4a0d      	ldr	r2, [pc, #52]	; (8005d58 <main+0x814>)
 8005d24:	3864      	subs	r0, #100	; 0x64
 8005d26:	2302      	movs	r3, #2
 8005d28:	e7c4      	b.n	8005cb4 <main+0x770>
 8005d2a:	bf00      	nop
 8005d2c:	ff800000 	.word	0xff800000
 8005d30:	200000c0 	.word	0x200000c0
 8005d34:	080149f3 	.word	0x080149f3
 8005d38:	4002b000 	.word	0x4002b000
 8005d3c:	d01300f0 	.word	0xd01300f0
 8005d40:	080149ff 	.word	0x080149ff
 8005d44:	20000c08 	.word	0x20000c08
 8005d48:	0800cac8 	.word	0x0800cac8
 8005d4c:	d0260000 	.word	0xd0260000
 8005d50:	ff008000 	.word	0xff008000
 8005d54:	08014a09 	.word	0x08014a09
 8005d58:	08014a15 	.word	0x08014a15
 8005d5c:	20000bc8 	.word	0x20000bc8

08005d60 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8005d60:	4770      	bx	lr

08005d62 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8005d62:	e7fe      	b.n	8005d62 <HardFault_Handler>

08005d64 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8005d64:	e7fe      	b.n	8005d64 <MemManage_Handler>

08005d66 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8005d66:	e7fe      	b.n	8005d66 <BusFault_Handler>

08005d68 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005d68:	e7fe      	b.n	8005d68 <UsageFault_Handler>

08005d6a <SVC_Handler>:
 8005d6a:	4770      	bx	lr

08005d6c <DebugMon_Handler>:
 8005d6c:	4770      	bx	lr

08005d6e <PendSV_Handler>:
 8005d6e:	4770      	bx	lr

08005d70 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8005d70:	f7fc b958 	b.w	8002024 <HAL_IncTick>

08005d74 <OTG_HS_IRQHandler>:
void OTG_FS_IRQHandler(void)
#else
void OTG_HS_IRQHandler(void)
#endif
{
  HAL_HCD_IRQHandler(&hhcd);
 8005d74:	4801      	ldr	r0, [pc, #4]	; (8005d7c <OTG_HS_IRQHandler+0x8>)
 8005d76:	f7fc bdd3 	b.w	8002920 <HAL_HCD_IRQHandler>
 8005d7a:	bf00      	nop
 8005d7c:	20000e5c 	.word	0x20000e5c

08005d80 <WaitForPressedState>:
  * @brief  Wait For Pressed State
  * @param  Pressed: Pressed State
  * @retval None
  */
static void WaitForPressedState(uint8_t Pressed) 
{
 8005d80:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  do 
  {
    BSP_TS_GetState(&State);
    HAL_Delay(10);
    if (State.TouchDetected == Pressed) 
 8005d82:	4604      	mov	r4, r0
    BSP_TS_GetState(&State);
 8005d84:	4668      	mov	r0, sp
 8005d86:	f7fc f891 	bl	8001eac <BSP_TS_GetState>
    HAL_Delay(10);
 8005d8a:	200a      	movs	r0, #10
 8005d8c:	f7fc f95c 	bl	8002048 <HAL_Delay>
    if (State.TouchDetected == Pressed) 
 8005d90:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d94:	42a3      	cmp	r3, r4
 8005d96:	d1f5      	bne.n	8005d84 <WaitForPressedState+0x4>
    {
      uint16_t TimeStart = HAL_GetTick();
 8005d98:	f7fc f950 	bl	800203c <HAL_GetTick>
        BSP_TS_GetState(&State);      
        HAL_Delay(10);
        if (State.TouchDetected != Pressed) 
        {
          break;
        } else if ((HAL_GetTick() - 100) > TimeStart) 
 8005d9c:	b285      	uxth	r5, r0
        BSP_TS_GetState(&State);      
 8005d9e:	4668      	mov	r0, sp
 8005da0:	f7fc f884 	bl	8001eac <BSP_TS_GetState>
        HAL_Delay(10);
 8005da4:	200a      	movs	r0, #10
 8005da6:	f7fc f94f 	bl	8002048 <HAL_Delay>
        if (State.TouchDetected != Pressed) 
 8005daa:	f8bd 3000 	ldrh.w	r3, [sp]
 8005dae:	42a3      	cmp	r3, r4
 8005db0:	d1e8      	bne.n	8005d84 <WaitForPressedState+0x4>
        } else if ((HAL_GetTick() - 100) > TimeStart) 
 8005db2:	f7fc f943 	bl	800203c <HAL_GetTick>
 8005db6:	3864      	subs	r0, #100	; 0x64
 8005db8:	42a8      	cmp	r0, r5
 8005dba:	d9f0      	bls.n	8005d9e <WaitForPressedState+0x1e>
          return;
        }
      } while (1);
    }
  } while (1);
}
 8005dbc:	b003      	add	sp, #12
 8005dbe:	bd30      	pop	{r4, r5, pc}

08005dc0 <Touchscreen_Calibration>:
{ 
 8005dc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8005dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dc8:	f7fb fad6 	bl	8001378 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005dcc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005dd0:	f7fb faae 	bl	8001330 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8005dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd8:	f7fb fab6 	bl	8001348 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font12);
 8005ddc:	4864      	ldr	r0, [pc, #400]	; (8005f70 <Touchscreen_Calibration+0x1b0>)
 8005dde:	f7fb fabf 	bl	8001360 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"Before using the Touchscreen", CENTER_MODE);
 8005de2:	f7fb fa27 	bl	8001234 <BSP_LCD_GetYSize>
 8005de6:	0840      	lsrs	r0, r0, #1
 8005de8:	f1a0 011b 	sub.w	r1, r0, #27
 8005dec:	4a61      	ldr	r2, [pc, #388]	; (8005f74 <Touchscreen_Calibration+0x1b4>)
 8005dee:	2301      	movs	r3, #1
 8005df0:	b289      	uxth	r1, r1
 8005df2:	2000      	movs	r0, #0
 8005df4:	f7fb fd88 	bl	8001908 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"you need to calibrate it.", CENTER_MODE);
 8005df8:	f7fb fa1c 	bl	8001234 <BSP_LCD_GetYSize>
 8005dfc:	0840      	lsrs	r0, r0, #1
 8005dfe:	f1a0 010c 	sub.w	r1, r0, #12
 8005e02:	4a5d      	ldr	r2, [pc, #372]	; (8005f78 <Touchscreen_Calibration+0x1b8>)
 8005e04:	2301      	movs	r3, #1
 8005e06:	b289      	uxth	r1, r1
 8005e08:	2000      	movs	r0, #0
 8005e0a:	f7fb fd7d 	bl	8001908 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"Press on the black circles", CENTER_MODE);
 8005e0e:	f7fb fa11 	bl	8001234 <BSP_LCD_GetYSize>
 8005e12:	0840      	lsrs	r0, r0, #1
 8005e14:	1cc1      	adds	r1, r0, #3
 8005e16:	b289      	uxth	r1, r1
 8005e18:	4a58      	ldr	r2, [pc, #352]	; (8005f7c <Touchscreen_Calibration+0x1bc>)
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	2000      	movs	r0, #0
 8005e1e:	f7fb fd73 	bl	8001908 <BSP_LCD_DisplayStringAt>
  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8005e22:	f7fb f9ff 	bl	8001224 <BSP_LCD_GetXSize>
 8005e26:	4604      	mov	r4, r0
 8005e28:	f7fb fa04 	bl	8001234 <BSP_LCD_GetYSize>
 8005e2c:	b281      	uxth	r1, r0
 8005e2e:	b2a0      	uxth	r0, r4
 8005e30:	f7fc f820 	bl	8001e74 <BSP_TS_Init>
  if (status != TS_OK)
 8005e34:	b1e0      	cbz	r0, 8005e70 <Touchscreen_Calibration+0xb0>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 8005e36:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3a:	f7fb fa85 	bl	8001348 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8005e3e:	4850      	ldr	r0, [pc, #320]	; (8005f80 <Touchscreen_Calibration+0x1c0>)
 8005e40:	f7fb fa76 	bl	8001330 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 8005e44:	f7fb f9f6 	bl	8001234 <BSP_LCD_GetYSize>
 8005e48:	385f      	subs	r0, #95	; 0x5f
 8005e4a:	b281      	uxth	r1, r0
 8005e4c:	4a4d      	ldr	r2, [pc, #308]	; (8005f84 <Touchscreen_Calibration+0x1c4>)
 8005e4e:	2301      	movs	r3, #1
 8005e50:	2000      	movs	r0, #0
 8005e52:	f7fb fd59 	bl	8001908 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen cannot be initialized", CENTER_MODE);
 8005e56:	f7fb f9ed 	bl	8001234 <BSP_LCD_GetYSize>
 8005e5a:	3850      	subs	r0, #80	; 0x50
 8005e5c:	b281      	uxth	r1, r0
 8005e5e:	4a4a      	ldr	r2, [pc, #296]	; (8005f88 <Touchscreen_Calibration+0x1c8>)
 8005e60:	2301      	movs	r3, #1
 8005e62:	2000      	movs	r0, #0
 8005e64:	f7fb fd50 	bl	8001908 <BSP_LCD_DisplayStringAt>
    HAL_Delay(5);
 8005e68:	2005      	movs	r0, #5
 8005e6a:	f7fc f8ed 	bl	8002048 <HAL_Delay>
  while (1)
 8005e6e:	e7fb      	b.n	8005e68 <Touchscreen_Calibration+0xa8>
      aLogX[0] = 15;
 8005e70:	4d46      	ldr	r5, [pc, #280]	; (8005f8c <Touchscreen_Calibration+0x1cc>)
 8005e72:	230f      	movs	r3, #15
 8005e74:	802b      	strh	r3, [r5, #0]
      aLogY[0] = 15;
 8005e76:	80ab      	strh	r3, [r5, #4]
      aLogX[1] = BSP_LCD_GetXSize() - 15;
 8005e78:	f7fb f9d4 	bl	8001224 <BSP_LCD_GetXSize>
 8005e7c:	380f      	subs	r0, #15
 8005e7e:	8068      	strh	r0, [r5, #2]
      aLogY[1] = BSP_LCD_GetYSize() - 15;
 8005e80:	f7fb f9d8 	bl	8001234 <BSP_LCD_GetYSize>
 8005e84:	1d2f      	adds	r7, r5, #4
 8005e86:	380f      	subs	r0, #15
 8005e88:	80e8      	strh	r0, [r5, #6]
      for (i = 0; i < 2; i++) 
 8005e8a:	f105 0908 	add.w	r9, r5, #8
 8005e8e:	f105 080c 	add.w	r8, r5, #12
 8005e92:	46bb      	mov	fp, r7
 8005e94:	462c      	mov	r4, r5
  BSP_TS_GetState(&TS_State);
 8005e96:	f105 0a10 	add.w	sl, r5, #16
        GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 8005e9a:	f935 6b02 	ldrsh.w	r6, [r5], #2
 8005e9e:	f937 1b02 	ldrsh.w	r1, [r7], #2
 8005ea2:	9101      	str	r1, [sp, #4]
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8005ea4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8005ea8:	f7fb fa42 	bl	8001330 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8005eac:	9901      	ldr	r1, [sp, #4]
 8005eae:	b2b6      	uxth	r6, r6
 8005eb0:	b289      	uxth	r1, r1
 8005eb2:	2205      	movs	r2, #5
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	9101      	str	r1, [sp, #4]
 8005eb8:	f7fb fe26 	bl	8001b08 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec0:	f7fb fa36 	bl	8001330 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 2);
 8005ec4:	9901      	ldr	r1, [sp, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	4630      	mov	r0, r6
 8005eca:	f7fb fe1d 	bl	8001b08 <BSP_LCD_FillCircle>
  WaitForPressedState(1);
 8005ece:	2001      	movs	r0, #1
 8005ed0:	f7ff ff56 	bl	8005d80 <WaitForPressedState>
  BSP_TS_GetState(&TS_State);
 8005ed4:	4650      	mov	r0, sl
 8005ed6:	f7fb ffe9 	bl	8001eac <BSP_TS_GetState>
  *pPhysX = TS_State.X;
 8005eda:	8a63      	ldrh	r3, [r4, #18]
 8005edc:	f829 3b02 	strh.w	r3, [r9], #2
  *pPhysY = TS_State.Y; 
 8005ee0:	8aa3      	ldrh	r3, [r4, #20]
 8005ee2:	f828 3b02 	strh.w	r3, [r8], #2
  WaitForPressedState(0);
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	f7ff ff4a 	bl	8005d80 <WaitForPressedState>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef0:	f7fb fa1e 	bl	8001330 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 8005ef4:	9901      	ldr	r1, [sp, #4]
 8005ef6:	2205      	movs	r2, #5
 8005ef8:	4630      	mov	r0, r6
 8005efa:	f7fb fe05 	bl	8001b08 <BSP_LCD_FillCircle>
      for (i = 0; i < 2; i++) 
 8005efe:	455d      	cmp	r5, fp
 8005f00:	d1cb      	bne.n	8005e9a <Touchscreen_Calibration+0xda>
      A1 = (1000 * ( aLogX[1] - aLogX[0]))/ ( aPhysX[1] - aPhysX[0]); 
 8005f02:	f9b4 0000 	ldrsh.w	r0, [r4]
 8005f06:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8005f0a:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8005f0e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8005f12:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8005f16:	1a12      	subs	r2, r2, r0
 8005f18:	1a5b      	subs	r3, r3, r1
 8005f1a:	436a      	muls	r2, r5
 8005f1c:	fb92 f2f3 	sdiv	r2, r2, r3
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0]; 
 8005f20:	ebc0 1340 	rsb	r3, r0, r0, lsl #5
 8005f24:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005f28:	fb11 f102 	smulbb	r1, r1, r2
 8005f2c:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 8005f30:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0]; 
 8005f34:	8361      	strh	r1, [r4, #26]
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 8005f36:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8005f3a:	f9b4 000e 	ldrsh.w	r0, [r4, #14]
      A1 = (1000 * ( aLogX[1] - aLogX[0]))/ ( aPhysX[1] - aPhysX[0]); 
 8005f3e:	8322      	strh	r2, [r4, #24]
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 8005f40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f44:	1a5b      	subs	r3, r3, r1
 8005f46:	1a80      	subs	r0, r0, r2
 8005f48:	436b      	muls	r3, r5
 8005f4a:	fb93 f3f0 	sdiv	r3, r3, r0
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 8005f4e:	ebc1 1041 	rsb	r0, r1, r1, lsl #5
 8005f52:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8005f56:	fb12 f203 	smulbb	r2, r2, r3
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 8005f5a:	83a3      	strh	r3, [r4, #28]
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 8005f5c:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
      Calibration_Done = 1;
 8005f60:	2301      	movs	r3, #1
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 8005f62:	83e2      	strh	r2, [r4, #30]
      Calibration_Done = 1;
 8005f64:	f884 3020 	strb.w	r3, [r4, #32]
}
 8005f68:	b003      	add	sp, #12
 8005f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f6e:	bf00      	nop
 8005f70:	200000b0 	.word	0x200000b0
 8005f74:	08014a20 	.word	0x08014a20
 8005f78:	08014a3d 	.word	0x08014a3d
 8005f7c:	08014a57 	.word	0x08014a57
 8005f80:	ffff0000 	.word	0xffff0000
 8005f84:	08014a72 	.word	0x08014a72
 8005f88:	08014a78 	.word	0x08014a78
 8005f8c:	20000e38 	.word	0x20000e38

08005f90 <Calibration_GetX>:
  * @param  x: X position
  * @retval calibrated x
  */
uint16_t Calibration_GetX(uint16_t x)
{
  return (((A1 * x) + B1)/1000);
 8005f90:	4a06      	ldr	r2, [pc, #24]	; (8005fac <Calibration_GetX+0x1c>)
 8005f92:	f9b2 301a 	ldrsh.w	r3, [r2, #26]
 8005f96:	f9b2 1018 	ldrsh.w	r1, [r2, #24]
 8005f9a:	fb00 3001 	mla	r0, r0, r1, r3
 8005f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005fa2:	fb90 f0f3 	sdiv	r0, r0, r3
}
 8005fa6:	b280      	uxth	r0, r0
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	20000e38 	.word	0x20000e38

08005fb0 <HAL_HCD_MspInit>:
  * @brief  Initializes the HCD MSP.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef *hhcd)
{
 8005fb0:	b570      	push	{r4, r5, r6, lr}
 8005fb2:	b088      	sub	sp, #32
  /* On STM32F429I-DISCO, USB OTG HS Core will operate in Full speed mode */
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*EMBEDDED Physical interface*/
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fb4:	4c2a      	ldr	r4, [pc, #168]	; (8006060 <HAL_HCD_MspInit+0xb0>)
  GPIO_InitStruct.Pin = (GPIO_PIN_14 | GPIO_PIN_15);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
 8005fb6:	482b      	ldr	r0, [pc, #172]	; (8006064 <HAL_HCD_MspInit+0xb4>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fb8:	2500      	movs	r5, #0
 8005fba:	9500      	str	r5, [sp, #0]
 8005fbc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005fbe:	f043 0302 	orr.w	r3, r3, #2
 8005fc2:	6323      	str	r3, [r4, #48]	; 0x30
 8005fc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fce:	9501      	str	r5, [sp, #4]
 8005fd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005fd2:	f043 0304 	orr.w	r3, r3, #4
 8005fd6:	6323      	str	r3, [r4, #48]	; 0x30
 8005fd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fda:	9505      	str	r5, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fdc:	f003 0304 	and.w	r3, r3, #4
 8005fe0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005fe6:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8005fee:	230c      	movs	r3, #12
 8005ff0:	2603      	movs	r6, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
 8005ff2:	eb0d 0103 	add.w	r1, sp, r3
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8005ff6:	e9cd 6306 	strd	r6, r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct); 
 8005ffa:	f7fc faad 	bl	8002558 <HAL_GPIO_Init>
  
  /* Configure  VBUS Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005ffe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);    
 8006002:	a903      	add	r1, sp, #12
 8006004:	4817      	ldr	r0, [pc, #92]	; (8006064 <HAL_HCD_MspInit+0xb4>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8006006:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006008:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800600a:	e9cd 5504 	strd	r5, r5, [sp, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);    
 800600e:	f7fc faa3 	bl	8002558 <HAL_GPIO_Init>
  
  /* Enable USB HS Clocks */ 
  __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8006012:	9502      	str	r5, [sp, #8]
 8006014:	6b23      	ldr	r3, [r4, #48]	; 0x30
  /* Configure Power Switch Vbus Pin */
  GPIO_InitStruct.Pin = HOST_POWERSW_VBUS;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HOST_POWERSW_PORT,&GPIO_InitStruct);
 8006016:	4814      	ldr	r0, [pc, #80]	; (8006068 <HAL_HCD_MspInit+0xb8>)
  __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8006018:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800601c:	6323      	str	r3, [r4, #48]	; 0x30
 800601e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8006020:	9606      	str	r6, [sp, #24]
  __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8006022:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006026:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = HOST_POWERSW_VBUS;
 8006028:	2410      	movs	r4, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800602a:	2601      	movs	r6, #1
  HAL_GPIO_Init(HOST_POWERSW_PORT,&GPIO_InitStruct);
 800602c:	a903      	add	r1, sp, #12
  __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800602e:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = HOST_POWERSW_VBUS;
 8006030:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006032:	e9cd 6504 	strd	r6, r5, [sp, #16]
  HAL_GPIO_Init(HOST_POWERSW_PORT,&GPIO_InitStruct);
 8006036:	f7fc fa8f 	bl	8002558 <HAL_GPIO_Init>
  
  /* By Default, DISABLE is needed on output of the Power Switch */
  HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_SET);
 800603a:	4632      	mov	r2, r6
 800603c:	4621      	mov	r1, r4
 800603e:	480a      	ldr	r0, [pc, #40]	; (8006068 <HAL_HCD_MspInit+0xb8>)
 8006040:	f7fc fb70 	bl	8002724 <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void  USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);  
 8006044:	20c8      	movs	r0, #200	; 0xc8
 8006046:	f7fb ffff 	bl	8002048 <HAL_Delay>
  HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800604a:	462a      	mov	r2, r5
 800604c:	2105      	movs	r1, #5
 800604e:	204d      	movs	r0, #77	; 0x4d
 8006050:	f7fc f820 	bl	8002094 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8006054:	204d      	movs	r0, #77	; 0x4d
 8006056:	f7fc f84f 	bl	80020f8 <HAL_NVIC_EnableIRQ>
}
 800605a:	b008      	add	sp, #32
 800605c:	bd70      	pop	{r4, r5, r6, pc}
 800605e:	bf00      	nop
 8006060:	40023800 	.word	0x40023800
 8006064:	40020400 	.word	0x40020400
 8006068:	40020800 	.word	0x40020800

0800606c <HAL_HCD_SOF_Callback>:
  USBH_LL_IncTimer (hhcd->pData);
 800606c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006070:	f002 b9f6 	b.w	8008460 <USBH_LL_IncTimer>

08006074 <HAL_HCD_Connect_Callback>:
  USBH_LL_Connect(hhcd->pData);
 8006074:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006078:	f002 ba08 	b.w	800848c <USBH_LL_Connect>

0800607c <HAL_HCD_Disconnect_Callback>:
  USBH_LL_Disconnect(hhcd->pData);
 800607c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006080:	f002 ba0e 	b.w	80084a0 <USBH_LL_Disconnect>

08006084 <HAL_HCD_PortEnabled_Callback>:
  USBH_LL_PortEnabled(hhcd->pData);
 8006084:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006088:	f002 b9f8 	b.w	800847c <USBH_LL_PortEnabled>

0800608c <HAL_HCD_PortDisabled_Callback>:
  USBH_LL_PortDisabled(hhcd->pData);
 800608c:	f8d0 0300 	ldr.w	r0, [r0, #768]	; 0x300
 8006090:	f002 b9f8 	b.w	8008484 <USBH_LL_PortDisabled>

08006094 <HAL_HCD_HC_NotifyURBChange_Callback>:
}
 8006094:	4770      	bx	lr
	...

08006098 <USBH_LL_Init>:
{  
 8006098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hhcd.Instance = USB_OTG_HS;
 800609a:	4c11      	ldr	r4, [pc, #68]	; (80060e0 <USBH_LL_Init+0x48>)
 800609c:	4b11      	ldr	r3, [pc, #68]	; (80060e4 <USBH_LL_Init+0x4c>)
 800609e:	6023      	str	r3, [r4, #0]
  hhcd.Init.Host_channels = 11; 
 80060a0:	230b      	movs	r3, #11
 80060a2:	60a3      	str	r3, [r4, #8]
  hhcd.Init.phy_itface = HCD_PHY_EMBEDDED; 
 80060a4:	2702      	movs	r7, #2
  hhcd.Init.dma_enable = 0;
 80060a6:	2300      	movs	r3, #0
  hhcd.Init.Sof_enable = 0;
 80060a8:	e9c4 7306 	strd	r7, r3, [r4, #24]
  hhcd.Init.dma_enable = 0;
 80060ac:	6123      	str	r3, [r4, #16]
  hhcd.Init.low_power_enable = 0;
 80060ae:	6223      	str	r3, [r4, #32]
  hhcd.Init.speed = HCD_SPEED_HIGH;
 80060b0:	60e3      	str	r3, [r4, #12]
  hhcd.pData = phost;
 80060b2:	f8c4 0300 	str.w	r0, [r4, #768]	; 0x300
  hhcd.Init.use_external_vbus = 1;  
 80060b6:	2301      	movs	r3, #1
  phost->pData = &hhcd;
 80060b8:	f8c0 44d0 	str.w	r4, [r0, #1232]	; 0x4d0
{  
 80060bc:	4606      	mov	r6, r0
  if (HAL_HCD_Init(&hhcd) != HAL_OK)
 80060be:	4620      	mov	r0, r4
  hhcd.Init.use_external_vbus = 1;  
 80060c0:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd) != HAL_OK)
 80060c2:	f7fc fb7c 	bl	80027be <HAL_HCD_Init>
 80060c6:	4605      	mov	r5, r0
 80060c8:	b940      	cbnz	r0, 80060dc <USBH_LL_Init+0x44>
  USBH_LL_SetTimer (phost, HAL_HCD_GetCurrentFrame(&hhcd));
 80060ca:	4620      	mov	r0, r4
 80060cc:	f7fc ff4f 	bl	8002f6e <HAL_HCD_GetCurrentFrame>
 80060d0:	4601      	mov	r1, r0
 80060d2:	4630      	mov	r0, r6
 80060d4:	f002 f9c1 	bl	800845a <USBH_LL_SetTimer>
}
 80060d8:	4628      	mov	r0, r5
 80060da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return USBH_FAIL;
 80060dc:	463d      	mov	r5, r7
 80060de:	e7fb      	b.n	80060d8 <USBH_LL_Init+0x40>
 80060e0:	20000e5c 	.word	0x20000e5c
 80060e4:	40040000 	.word	0x40040000

080060e8 <USBH_LL_Start>:
{
 80060e8:	b508      	push	{r3, lr}
  HAL_HCD_Start(phost->pData);
 80060ea:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 80060ee:	f7fc ff09 	bl	8002f04 <HAL_HCD_Start>
}
 80060f2:	2000      	movs	r0, #0
 80060f4:	bd08      	pop	{r3, pc}

080060f6 <USBH_LL_Stop>:
{
 80060f6:	b508      	push	{r3, lr}
  HAL_HCD_Stop(phost->pData);
 80060f8:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 80060fc:	f7fc ff17 	bl	8002f2e <HAL_HCD_Stop>
}
 8006100:	2000      	movs	r0, #0
 8006102:	bd08      	pop	{r3, pc}

08006104 <USBH_LL_GetSpeed>:
{
 8006104:	b508      	push	{r3, lr}
  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8006106:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 800610a:	f7fc ff33 	bl	8002f74 <HAL_HCD_GetCurrentSpeed>
 800610e:	2801      	cmp	r0, #1
 8006110:	d003      	beq.n	800611a <USBH_LL_GetSpeed+0x16>
    speed = USBH_SPEED_LOW;    
 8006112:	2802      	cmp	r0, #2
 8006114:	bf14      	ite	ne
 8006116:	2000      	movne	r0, #0
 8006118:	2002      	moveq	r0, #2
}
 800611a:	bd08      	pop	{r3, pc}

0800611c <USBH_LL_ResetPort>:
{
 800611c:	b508      	push	{r3, lr}
  HAL_HCD_ResetPort(phost->pData);
 800611e:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 8006122:	f7fc ff16 	bl	8002f52 <HAL_HCD_ResetPort>
}
 8006126:	2000      	movs	r0, #0
 8006128:	bd08      	pop	{r3, pc}

0800612a <USBH_LL_GetLastXferSize>:
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800612a:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 800612e:	f7fc bf19 	b.w	8002f64 <HAL_HCD_HC_GetXferCount>

08006132 <USBH_LL_OpenPipe>:
{
 8006132:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_Init(phost->pData,
 8006134:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8006138:	9402      	str	r4, [sp, #8]
 800613a:	f89d 401c 	ldrb.w	r4, [sp, #28]
 800613e:	9401      	str	r4, [sp, #4]
 8006140:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8006144:	9400      	str	r4, [sp, #0]
 8006146:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 800614a:	f7fc faf0 	bl	800272e <HAL_HCD_HC_Init>
}
 800614e:	2000      	movs	r0, #0
 8006150:	b004      	add	sp, #16
 8006152:	bd10      	pop	{r4, pc}

08006154 <USBH_LL_ClosePipe>:
{
 8006154:	b508      	push	{r3, lr}
  HAL_HCD_HC_Halt(phost->pData, pipe); 
 8006156:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 800615a:	f7fc fb1e 	bl	800279a <HAL_HCD_HC_Halt>
}
 800615e:	2000      	movs	r0, #0
 8006160:	bd08      	pop	{r3, pc}

08006162 <USBH_LL_SubmitURB>:
{
 8006162:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_HCD_HC_SubmitRequest(phost->pData,pipe, 
 8006164:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 8006168:	9403      	str	r4, [sp, #12]
 800616a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800616e:	9402      	str	r4, [sp, #8]
 8006170:	9c07      	ldr	r4, [sp, #28]
 8006172:	9401      	str	r4, [sp, #4]
 8006174:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8006178:	9400      	str	r4, [sp, #0]
 800617a:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 800617e:	f7fc fb6b 	bl	8002858 <HAL_HCD_HC_SubmitRequest>
}
 8006182:	2000      	movs	r0, #0
 8006184:	b004      	add	sp, #16
 8006186:	bd10      	pop	{r4, pc}

08006188 <USBH_LL_GetURBState>:
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006188:	f8d0 04d0 	ldr.w	r0, [r0, #1232]	; 0x4d0
 800618c:	f7fc bee4 	b.w	8002f58 <HAL_HCD_HC_GetURBState>

08006190 <USBH_LL_DriverVBUS>:
{
 8006190:	b508      	push	{r3, lr}
  if (0 == state)
 8006192:	b949      	cbnz	r1, 80061a8 <USBH_LL_DriverVBUS+0x18>
    HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_SET);
 8006194:	2201      	movs	r2, #1
    HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_RESET);
 8006196:	2110      	movs	r1, #16
 8006198:	4804      	ldr	r0, [pc, #16]	; (80061ac <USBH_LL_DriverVBUS+0x1c>)
 800619a:	f7fc fac3 	bl	8002724 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 800619e:	20c8      	movs	r0, #200	; 0xc8
 80061a0:	f7fb ff52 	bl	8002048 <HAL_Delay>
}
 80061a4:	2000      	movs	r0, #0
 80061a6:	bd08      	pop	{r3, pc}
    HAL_GPIO_WritePin(HOST_POWERSW_PORT, HOST_POWERSW_VBUS, GPIO_PIN_RESET);
 80061a8:	2200      	movs	r2, #0
 80061aa:	e7f4      	b.n	8006196 <USBH_LL_DriverVBUS+0x6>
 80061ac:	40020800 	.word	0x40020800

080061b0 <USBH_LL_SetToggle>:
  if(hhcd.hc[pipe].ep_is_in)
 80061b0:	4b06      	ldr	r3, [pc, #24]	; (80061cc <USBH_LL_SetToggle+0x1c>)
 80061b2:	202c      	movs	r0, #44	; 0x2c
 80061b4:	fb00 3101 	mla	r1, r0, r1, r3
 80061b8:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80061bc:	b11b      	cbz	r3, 80061c6 <USBH_LL_SetToggle+0x16>
    hhcd.hc[pipe].toggle_in = toggle;
 80061be:	f881 2054 	strb.w	r2, [r1, #84]	; 0x54
}
 80061c2:	2000      	movs	r0, #0
 80061c4:	4770      	bx	lr
    hhcd.hc[pipe].toggle_out = toggle;
 80061c6:	f881 2055 	strb.w	r2, [r1, #85]	; 0x55
 80061ca:	e7fa      	b.n	80061c2 <USBH_LL_SetToggle+0x12>
 80061cc:	20000e5c 	.word	0x20000e5c

080061d0 <USBH_LL_GetToggle>:
  if(hhcd.hc[pipe].ep_is_in)
 80061d0:	4b06      	ldr	r3, [pc, #24]	; (80061ec <USBH_LL_GetToggle+0x1c>)
 80061d2:	222c      	movs	r2, #44	; 0x2c
 80061d4:	fb02 3101 	mla	r1, r2, r1, r3
 80061d8:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 80061dc:	b113      	cbz	r3, 80061e4 <USBH_LL_GetToggle+0x14>
    toggle = hhcd.hc[pipe].toggle_in;
 80061de:	f891 0054 	ldrb.w	r0, [r1, #84]	; 0x54
 80061e2:	4770      	bx	lr
    toggle = hhcd.hc[pipe].toggle_out;
 80061e4:	f891 0055 	ldrb.w	r0, [r1, #85]	; 0x55
}
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	20000e5c 	.word	0x20000e5c

080061f0 <USBH_Delay>:
  HAL_Delay(Delay);  
 80061f0:	f7fb bf2a 	b.w	8002048 <HAL_Delay>

080061f4 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80061f4:	4b03      	ldr	r3, [pc, #12]	; (8006204 <disk_status+0x10>)
 80061f6:	181a      	adds	r2, r3, r0
 80061f8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80061fc:	7b10      	ldrb	r0, [r2, #12]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	4718      	bx	r3
 8006204:	2000118c 	.word	0x2000118c

08006208 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 8006208:	4b06      	ldr	r3, [pc, #24]	; (8006224 <disk_initialize+0x1c>)
 800620a:	5c1a      	ldrb	r2, [r3, r0]
 800620c:	b942      	cbnz	r2, 8006220 <disk_initialize+0x18>
  {
    disk.is_initialized[pdrv] = 1;
 800620e:	2201      	movs	r2, #1
 8006210:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006212:	181a      	adds	r2, r3, r0
 8006214:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8006218:	7b10      	ldrb	r0, [r2, #12]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4718      	bx	r3
  }
  return stat;
}
 8006220:	2000      	movs	r0, #0
 8006222:	4770      	bx	lr
 8006224:	2000118c 	.word	0x2000118c

08006228 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006228:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800622a:	4c05      	ldr	r4, [pc, #20]	; (8006240 <disk_read+0x18>)
 800622c:	1825      	adds	r5, r4, r0
 800622e:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8006232:	6860      	ldr	r0, [r4, #4]
 8006234:	6884      	ldr	r4, [r0, #8]
 8006236:	7b28      	ldrb	r0, [r5, #12]
 8006238:	46a4      	mov	ip, r4
  return res;
}
 800623a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800623c:	4760      	bx	ip
 800623e:	bf00      	nop
 8006240:	2000118c 	.word	0x2000118c

08006244 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006244:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006246:	4c05      	ldr	r4, [pc, #20]	; (800625c <disk_write+0x18>)
 8006248:	1825      	adds	r5, r4, r0
 800624a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800624e:	6860      	ldr	r0, [r4, #4]
 8006250:	68c4      	ldr	r4, [r0, #12]
 8006252:	7b28      	ldrb	r0, [r5, #12]
 8006254:	46a4      	mov	ip, r4
  return res;
}
 8006256:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006258:	4760      	bx	ip
 800625a:	bf00      	nop
 800625c:	2000118c 	.word	0x2000118c

08006260 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006260:	4b05      	ldr	r3, [pc, #20]	; (8006278 <disk_ioctl+0x18>)
{
 8006262:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006264:	181c      	adds	r4, r3, r0
 8006266:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800626a:	7b20      	ldrb	r0, [r4, #12]
 800626c:	685b      	ldr	r3, [r3, #4]
  return res;
}
 800626e:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	4718      	bx	r3
 8006276:	bf00      	nop
 8006278:	2000118c 	.word	0x2000118c

0800627c <get_fattime>:
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
  return 0;
}
 800627c:	2000      	movs	r0, #0
 800627e:	4770      	bx	lr

08006280 <ld_dword>:
	rv = ptr[3];
	rv = rv << 8 | ptr[2];
	rv = rv << 8 | ptr[1];
	rv = rv << 8 | ptr[0];
	return rv;
}
 8006280:	6800      	ldr	r0, [r0, #0]
 8006282:	4770      	bx	lr

08006284 <st_dword>:
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
 8006284:	0a0b      	lsrs	r3, r1, #8
 8006286:	7001      	strb	r1, [r0, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006288:	7043      	strb	r3, [r0, #1]
 800628a:	0c0b      	lsrs	r3, r1, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800628c:	0e09      	lsrs	r1, r1, #24
 800628e:	7083      	strb	r3, [r0, #2]
	*ptr++ = (BYTE)val;
 8006290:	70c1      	strb	r1, [r0, #3]
}
 8006292:	4770      	bx	lr

08006294 <mem_set>:
}

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;
 8006294:	4402      	add	r2, r0

	do {
		*d++ = (BYTE)val;
 8006296:	f800 1b01 	strb.w	r1, [r0], #1
	} while (--cnt);
 800629a:	4290      	cmp	r0, r2
 800629c:	d1fb      	bne.n	8006296 <mem_set+0x2>
}
 800629e:	4770      	bx	lr

080062a0 <chk_lock>:
{
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs) {	/* Existing entry */
 80062a0:	4a1b      	ldr	r2, [pc, #108]	; (8006310 <chk_lock+0x70>)
 80062a2:	6813      	ldr	r3, [r2, #0]
{
 80062a4:	b530      	push	{r4, r5, lr}
		if (Files[i].fs) {	/* Existing entry */
 80062a6:	b163      	cbz	r3, 80062c2 <chk_lock+0x22>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80062a8:	6804      	ldr	r4, [r0, #0]
 80062aa:	429c      	cmp	r4, r3
 80062ac:	d107      	bne.n	80062be <chk_lock+0x1e>
 80062ae:	6854      	ldr	r4, [r2, #4]
 80062b0:	6883      	ldr	r3, [r0, #8]
 80062b2:	429c      	cmp	r4, r3
 80062b4:	d103      	bne.n	80062be <chk_lock+0x1e>
				Files[i].clu == dp->obj.sclust &&
 80062b6:	6894      	ldr	r4, [r2, #8]
 80062b8:	6943      	ldr	r3, [r0, #20]
 80062ba:	429c      	cmp	r4, r3
 80062bc:	d020      	beq.n	8006300 <chk_lock+0x60>
	for (i = be = 0; i < _FS_LOCK; i++) {
 80062be:	2400      	movs	r4, #0
 80062c0:	e000      	b.n	80062c4 <chk_lock+0x24>
				Files[i].ofs == dp->dptr) break;
		} else {			/* Blank entry */
			be = 1;
 80062c2:	2401      	movs	r4, #1
		if (Files[i].fs) {	/* Existing entry */
 80062c4:	6913      	ldr	r3, [r2, #16]
 80062c6:	b1cb      	cbz	r3, 80062fc <chk_lock+0x5c>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80062c8:	6805      	ldr	r5, [r0, #0]
 80062ca:	42ab      	cmp	r3, r5
 80062cc:	d107      	bne.n	80062de <chk_lock+0x3e>
 80062ce:	6955      	ldr	r5, [r2, #20]
 80062d0:	6883      	ldr	r3, [r0, #8]
 80062d2:	429d      	cmp	r5, r3
 80062d4:	d103      	bne.n	80062de <chk_lock+0x3e>
				Files[i].clu == dp->obj.sclust &&
 80062d6:	6995      	ldr	r5, [r2, #24]
 80062d8:	6943      	ldr	r3, [r0, #20]
 80062da:	429d      	cmp	r5, r3
 80062dc:	d015      	beq.n	800630a <chk_lock+0x6a>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80062de:	b96c      	cbnz	r4, 80062fc <chk_lock+0x5c>
 80062e0:	2902      	cmp	r1, #2
 80062e2:	bf0c      	ite	eq
 80062e4:	2000      	moveq	r0, #0
 80062e6:	2012      	movne	r0, #18
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
}
 80062e8:	bd30      	pop	{r4, r5, pc}
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80062ea:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80062ee:	899b      	ldrh	r3, [r3, #12]
 80062f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062f4:	bf14      	ite	ne
 80062f6:	2000      	movne	r0, #0
 80062f8:	2010      	moveq	r0, #16
 80062fa:	e7f5      	b.n	80062e8 <chk_lock+0x48>
 80062fc:	2000      	movs	r0, #0
 80062fe:	e7f3      	b.n	80062e8 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006300:	2300      	movs	r3, #0
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006302:	2900      	cmp	r1, #0
 8006304:	d0f1      	beq.n	80062ea <chk_lock+0x4a>
 8006306:	2010      	movs	r0, #16
 8006308:	e7ee      	b.n	80062e8 <chk_lock+0x48>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800630a:	2301      	movs	r3, #1
 800630c:	e7f9      	b.n	8006302 <chk_lock+0x62>
 800630e:	bf00      	nop
 8006310:	20001160 	.word	0x20001160

08006314 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8006314:	4a1f      	ldr	r2, [pc, #124]	; (8006394 <inc_lock+0x80>)
{
 8006316:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->obj.fs &&
 8006318:	6813      	ldr	r3, [r2, #0]
 800631a:	6806      	ldr	r6, [r0, #0]
 800631c:	429e      	cmp	r6, r3
 800631e:	d107      	bne.n	8006330 <inc_lock+0x1c>
 8006320:	6855      	ldr	r5, [r2, #4]
 8006322:	6884      	ldr	r4, [r0, #8]
 8006324:	42a5      	cmp	r5, r4
 8006326:	d103      	bne.n	8006330 <inc_lock+0x1c>
			Files[i].clu == dp->obj.sclust &&
 8006328:	6945      	ldr	r5, [r0, #20]
 800632a:	6894      	ldr	r4, [r2, #8]
 800632c:	42a5      	cmp	r5, r4
 800632e:	d022      	beq.n	8006376 <inc_lock+0x62>
		if (Files[i].fs == dp->obj.fs &&
 8006330:	6914      	ldr	r4, [r2, #16]
 8006332:	42b4      	cmp	r4, r6
 8006334:	d107      	bne.n	8006346 <inc_lock+0x32>
 8006336:	6957      	ldr	r7, [r2, #20]
 8006338:	6885      	ldr	r5, [r0, #8]
 800633a:	42af      	cmp	r7, r5
 800633c:	d103      	bne.n	8006346 <inc_lock+0x32>
			Files[i].clu == dp->obj.sclust &&
 800633e:	6997      	ldr	r7, [r2, #24]
 8006340:	6945      	ldr	r5, [r0, #20]
 8006342:	42af      	cmp	r7, r5
 8006344:	d021      	beq.n	800638a <inc_lock+0x76>
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006346:	b10b      	cbz	r3, 800634c <inc_lock+0x38>
 8006348:	bb0c      	cbnz	r4, 800638e <inc_lock+0x7a>
 800634a:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->obj.fs;
 800634c:	011d      	lsls	r5, r3, #4
 800634e:	eb02 1403 	add.w	r4, r2, r3, lsl #4
 8006352:	5156      	str	r6, [r2, r5]
		Files[i].clu = dp->obj.sclust;
 8006354:	6885      	ldr	r5, [r0, #8]
		Files[i].ofs = dp->dptr;
 8006356:	6940      	ldr	r0, [r0, #20]
 8006358:	60a0      	str	r0, [r4, #8]
		Files[i].ctr = 0;
 800635a:	2000      	movs	r0, #0
		Files[i].clu = dp->obj.sclust;
 800635c:	6065      	str	r5, [r4, #4]
		Files[i].ctr = 0;
 800635e:	81a0      	strh	r0, [r4, #12]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006360:	b981      	cbnz	r1, 8006384 <inc_lock+0x70>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006362:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8006366:	8989      	ldrh	r1, [r1, #12]
 8006368:	3101      	adds	r1, #1
 800636a:	b289      	uxth	r1, r1
 800636c:	eb02 1203 	add.w	r2, r2, r3, lsl #4

	return i + 1;
 8006370:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006372:	8191      	strh	r1, [r2, #12]
}
 8006374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006376:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006378:	2900      	cmp	r1, #0
 800637a:	d0f2      	beq.n	8006362 <inc_lock+0x4e>
 800637c:	eb02 1103 	add.w	r1, r2, r3, lsl #4
 8006380:	8989      	ldrh	r1, [r1, #12]
 8006382:	b921      	cbnz	r1, 800638e <inc_lock+0x7a>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006384:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006388:	e7f0      	b.n	800636c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800638a:	2301      	movs	r3, #1
 800638c:	e7f4      	b.n	8006378 <inc_lock+0x64>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800638e:	2000      	movs	r0, #0
 8006390:	e7f0      	b.n	8006374 <inc_lock+0x60>
 8006392:	bf00      	nop
 8006394:	20001160 	.word	0x20001160

08006398 <dec_lock>:
{
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006398:	3801      	subs	r0, #1
 800639a:	2801      	cmp	r0, #1
 800639c:	d815      	bhi.n	80063ca <dec_lock+0x32>
		n = Files[i].ctr;
 800639e:	4a0c      	ldr	r2, [pc, #48]	; (80063d0 <dec_lock+0x38>)
 80063a0:	0101      	lsls	r1, r0, #4
 80063a2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
 80063a6:	8983      	ldrh	r3, [r0, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80063a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ac:	d104      	bne.n	80063b8 <dec_lock+0x20>
		if (n > 0) n--;				/* Decrement read mode open count */
		Files[i].ctr = n;
 80063ae:	2300      	movs	r3, #0
 80063b0:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80063b2:	2000      	movs	r0, #0
 80063b4:	5050      	str	r0, [r2, r1]
 80063b6:	4770      	bx	lr
		if (n > 0) n--;				/* Decrement read mode open count */
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d0fa      	beq.n	80063b2 <dec_lock+0x1a>
 80063bc:	3b01      	subs	r3, #1
 80063be:	b29b      	uxth	r3, r3
		Files[i].ctr = n;
 80063c0:	8183      	strh	r3, [r0, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0f5      	beq.n	80063b2 <dec_lock+0x1a>
		res = FR_OK;
 80063c6:	2000      	movs	r0, #0
 80063c8:	4770      	bx	lr
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80063ca:	2002      	movs	r0, #2
	}
	return res;
}
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	20001160 	.word	0x20001160

080063d4 <clear_lock>:
)
{
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
		if (Files[i].fs == fs) Files[i].fs = 0;
 80063d4:	4b05      	ldr	r3, [pc, #20]	; (80063ec <clear_lock+0x18>)
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	4290      	cmp	r0, r2
 80063da:	bf04      	itt	eq
 80063dc:	2200      	moveq	r2, #0
 80063de:	601a      	streq	r2, [r3, #0]
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	4290      	cmp	r0, r2
 80063e4:	bf04      	itt	eq
 80063e6:	2200      	moveq	r2, #0
 80063e8:	611a      	streq	r2, [r3, #16]
	}
}
 80063ea:	4770      	bx	lr
 80063ec:	20001160 	.word	0x20001160

080063f0 <clust2sect>:
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
	clst -= 2;
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80063f0:	6943      	ldr	r3, [r0, #20]
	clst -= 2;
 80063f2:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80063f4:	3b02      	subs	r3, #2
 80063f6:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 80063f8:	bf83      	ittte	hi
 80063fa:	8943      	ldrhhi	r3, [r0, #10]
 80063fc:	6a80      	ldrhi	r0, [r0, #40]	; 0x28
 80063fe:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006402:	2000      	movls	r0, #0
}
 8006404:	4770      	bx	lr

08006406 <clmt_clust>:
{
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006406:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006408:	6802      	ldr	r2, [r0, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800640a:	3304      	adds	r3, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800640c:	8952      	ldrh	r2, [r2, #10]
 800640e:	0a49      	lsrs	r1, r1, #9
 8006410:	fbb1 f1f2 	udiv	r1, r1, r2
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006414:	6818      	ldr	r0, [r3, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006416:	b130      	cbz	r0, 8006426 <clmt_clust+0x20>
		if (cl < ncl) break;	/* In this fragment? */
 8006418:	4281      	cmp	r1, r0
 800641a:	d302      	bcc.n	8006422 <clmt_clust+0x1c>
		cl -= ncl; tbl++;		/* Next fragment */
 800641c:	1a09      	subs	r1, r1, r0
 800641e:	3308      	adds	r3, #8
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006420:	e7f8      	b.n	8006414 <clmt_clust+0xe>
	}
	return cl + *tbl;	/* Return the cluster number */
 8006422:	6858      	ldr	r0, [r3, #4]
 8006424:	4408      	add	r0, r1
}
 8006426:	4770      	bx	lr

08006428 <st_clust>:
	*ptr++ = (BYTE)val; val >>= 8;
 8006428:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800642c:	768a      	strb	r2, [r1, #26]
	*ptr++ = (BYTE)val;
 800642e:	76cb      	strb	r3, [r1, #27]
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
	st_word(dir + DIR_FstClusLO, (WORD)cl);
	if (fs->fs_type == FS_FAT32) {
 8006430:	7803      	ldrb	r3, [r0, #0]
 8006432:	2b03      	cmp	r3, #3
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006434:	bf01      	itttt	eq
 8006436:	0c12      	lsreq	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8006438:	750a      	strbeq	r2, [r1, #20]
 800643a:	0a12      	lsreq	r2, r2, #8
	*ptr++ = (BYTE)val;
 800643c:	754a      	strbeq	r2, [r1, #21]
	}
}
 800643e:	4770      	bx	lr

08006440 <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006440:	6803      	ldr	r3, [r0, #0]
{
 8006442:	b510      	push	{r4, lr}
 8006444:	4601      	mov	r1, r0
	if (*path) {	/* If the pointer is not a null */
 8006446:	b153      	cbz	r3, 800645e <get_ldnumber+0x1e>
 8006448:	4618      	mov	r0, r3
 800644a:	4602      	mov	r2, r0
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800644c:	f810 4b01 	ldrb.w	r4, [r0], #1
 8006450:	2c20      	cmp	r4, #32
 8006452:	d910      	bls.n	8006476 <get_ldnumber+0x36>
 8006454:	2c3a      	cmp	r4, #58	; 0x3a
 8006456:	d1f8      	bne.n	800644a <get_ldnumber+0xa>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0';
 8006458:	1c58      	adds	r0, r3, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800645a:	4282      	cmp	r2, r0
 800645c:	d002      	beq.n	8006464 <get_ldnumber+0x24>
	int vol = -1;
 800645e:	f04f 30ff 	mov.w	r0, #4294967295
 8006462:	e007      	b.n	8006474 <get_ldnumber+0x34>
			i = *tp++ - '0';
 8006464:	781b      	ldrb	r3, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006466:	3b30      	subs	r3, #48	; 0x30
 8006468:	b2d8      	uxtb	r0, r3
 800646a:	2801      	cmp	r0, #1
 800646c:	d8f7      	bhi.n	800645e <get_ldnumber+0x1e>
					vol = (int)i;
					*path = ++tt;
 800646e:	3201      	adds	r2, #1
			i = *tp++ - '0';
 8006470:	4618      	mov	r0, r3
					*path = ++tt;
 8006472:	600a      	str	r2, [r1, #0]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
}
 8006474:	bd10      	pop	{r4, pc}
		vol = 0;		/* Drive 0 */
 8006476:	2000      	movs	r0, #0
 8006478:	e7fc      	b.n	8006474 <get_ldnumber+0x34>

0800647a <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800647a:	b538      	push	{r3, r4, r5, lr}
 800647c:	460d      	mov	r5, r1
	FRESULT res = FR_INVALID_OBJECT;


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800647e:	4604      	mov	r4, r0
 8006480:	b918      	cbnz	r0, 800648a <validate+0x10>
	FRESULT res = FR_INVALID_OBJECT;
 8006482:	2009      	movs	r0, #9
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006484:	2300      	movs	r3, #0
 8006486:	602b      	str	r3, [r5, #0]
	return res;
}
 8006488:	bd38      	pop	{r3, r4, r5, pc}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800648a:	6803      	ldr	r3, [r0, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d0f8      	beq.n	8006482 <validate+0x8>
 8006490:	781a      	ldrb	r2, [r3, #0]
 8006492:	2a00      	cmp	r2, #0
 8006494:	d0f5      	beq.n	8006482 <validate+0x8>
 8006496:	8881      	ldrh	r1, [r0, #4]
 8006498:	88da      	ldrh	r2, [r3, #6]
 800649a:	4291      	cmp	r1, r2
 800649c:	d1f1      	bne.n	8006482 <validate+0x8>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800649e:	7858      	ldrb	r0, [r3, #1]
 80064a0:	f7ff fea8 	bl	80061f4 <disk_status>
 80064a4:	f010 0001 	ands.w	r0, r0, #1
 80064a8:	d1eb      	bne.n	8006482 <validate+0x8>
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80064aa:	6823      	ldr	r3, [r4, #0]
 80064ac:	e7eb      	b.n	8006486 <validate+0xc>

080064ae <mem_cpy.part.0>:
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80064ae:	3801      	subs	r0, #1
 80064b0:	440a      	add	r2, r1
			*d++ = *s++;
 80064b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064b6:	f800 3f01 	strb.w	r3, [r0, #1]!
		} while (--cnt);
 80064ba:	4291      	cmp	r1, r2
 80064bc:	d1f9      	bne.n	80064b2 <mem_cpy.part.0+0x4>
}
 80064be:	4770      	bx	lr

080064c0 <sync_window.part.0>:
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80064c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		wsect = fs->winsect;	/* Current sector number */
 80064c4:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80064c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80064ca:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80064cc:	2301      	movs	r3, #1
 80064ce:	7840      	ldrb	r0, [r0, #1]
 80064d0:	4632      	mov	r2, r6
 80064d2:	4641      	mov	r1, r8
 80064d4:	f7ff feb6 	bl	8006244 <disk_write>
 80064d8:	4605      	mov	r5, r0
 80064da:	b9a8      	cbnz	r0, 8006508 <sync_window.part.0+0x48>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80064dc:	6a23      	ldr	r3, [r4, #32]
 80064de:	69a2      	ldr	r2, [r4, #24]
			fs->wflag = 0;
 80064e0:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80064e2:	1af3      	subs	r3, r6, r3
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d202      	bcs.n	80064ee <sync_window.part.0+0x2e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80064e8:	78a7      	ldrb	r7, [r4, #2]
 80064ea:	2f01      	cmp	r7, #1
 80064ec:	d802      	bhi.n	80064f4 <sync_window.part.0+0x34>
}
 80064ee:	4628      	mov	r0, r5
 80064f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					wsect += fs->fsize;
 80064f4:	69a3      	ldr	r3, [r4, #24]
					disk_write(fs->drv, fs->win, wsect, 1);
 80064f6:	7860      	ldrb	r0, [r4, #1]
					wsect += fs->fsize;
 80064f8:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win, wsect, 1);
 80064fa:	4632      	mov	r2, r6
 80064fc:	2301      	movs	r3, #1
 80064fe:	4641      	mov	r1, r8
 8006500:	f7ff fea0 	bl	8006244 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006504:	3f01      	subs	r7, #1
 8006506:	e7f0      	b.n	80064ea <sync_window.part.0+0x2a>
			res = FR_DISK_ERR;
 8006508:	2501      	movs	r5, #1
 800650a:	e7f0      	b.n	80064ee <sync_window.part.0+0x2e>

0800650c <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800650c:	78c3      	ldrb	r3, [r0, #3]
 800650e:	b10b      	cbz	r3, 8006514 <sync_window+0x8>
 8006510:	f7ff bfd6 	b.w	80064c0 <sync_window.part.0>
}
 8006514:	4618      	mov	r0, r3
 8006516:	4770      	bx	lr

08006518 <move_window>:
{
 8006518:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800651a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800651c:	428b      	cmp	r3, r1
{
 800651e:	4605      	mov	r5, r0
 8006520:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8006522:	d010      	beq.n	8006546 <move_window+0x2e>
		res = sync_window(fs);		/* Write-back changes */
 8006524:	f7ff fff2 	bl	800650c <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006528:	b960      	cbnz	r0, 8006544 <move_window+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800652a:	4622      	mov	r2, r4
 800652c:	7868      	ldrb	r0, [r5, #1]
 800652e:	2301      	movs	r3, #1
 8006530:	f105 0130 	add.w	r1, r5, #48	; 0x30
 8006534:	f7ff fe78 	bl	8006228 <disk_read>
				res = FR_DISK_ERR;
 8006538:	2800      	cmp	r0, #0
 800653a:	bf1c      	itt	ne
 800653c:	f04f 34ff 	movne.w	r4, #4294967295
 8006540:	2001      	movne	r0, #1
			fs->winsect = sector;
 8006542:	62ec      	str	r4, [r5, #44]	; 0x2c
}
 8006544:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8006546:	2000      	movs	r0, #0
 8006548:	e7fc      	b.n	8006544 <move_window+0x2c>
	...

0800654c <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800654c:	2300      	movs	r3, #0
{
 800654e:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006550:	70c3      	strb	r3, [r0, #3]
 8006552:	f04f 33ff 	mov.w	r3, #4294967295
 8006556:	62c3      	str	r3, [r0, #44]	; 0x2c
{
 8006558:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800655a:	f7ff ffdd 	bl	8006518 <move_window>
 800655e:	4603      	mov	r3, r0
 8006560:	bb18      	cbnz	r0, 80065aa <check_fs+0x5e>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006562:	f8b4 122e 	ldrh.w	r1, [r4, #558]	; 0x22e
 8006566:	f64a 2255 	movw	r2, #43605	; 0xaa55
 800656a:	4291      	cmp	r1, r2
 800656c:	d11f      	bne.n	80065ae <check_fs+0x62>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800656e:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8006572:	2ae9      	cmp	r2, #233	; 0xe9
 8006574:	d005      	beq.n	8006582 <check_fs+0x36>
 8006576:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006578:	490f      	ldr	r1, [pc, #60]	; (80065b8 <check_fs+0x6c>)
 800657a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 800657e:	428a      	cmp	r2, r1
 8006580:	d117      	bne.n	80065b2 <check_fs+0x66>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006582:	f104 0066 	add.w	r0, r4, #102	; 0x66
 8006586:	f7ff fe7b 	bl	8006280 <ld_dword>
 800658a:	4a0c      	ldr	r2, [pc, #48]	; (80065bc <check_fs+0x70>)
 800658c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8006590:	4290      	cmp	r0, r2
 8006592:	d008      	beq.n	80065a6 <check_fs+0x5a>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006594:	f104 0082 	add.w	r0, r4, #130	; 0x82
 8006598:	f7ff fe72 	bl	8006280 <ld_dword>
	return 2;
 800659c:	f102 524c 	add.w	r2, r2, #855638016	; 0x33000000
 80065a0:	4290      	cmp	r0, r2
 80065a2:	bf18      	it	ne
 80065a4:	2302      	movne	r3, #2
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	bd10      	pop	{r4, pc}
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80065aa:	2304      	movs	r3, #4
 80065ac:	e7fb      	b.n	80065a6 <check_fs+0x5a>
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80065ae:	2303      	movs	r3, #3
 80065b0:	e7f9      	b.n	80065a6 <check_fs+0x5a>
	return 2;
 80065b2:	2302      	movs	r3, #2
 80065b4:	e7f7      	b.n	80065a6 <check_fs+0x5a>
 80065b6:	bf00      	nop
 80065b8:	009000eb 	.word	0x009000eb
 80065bc:	00544146 	.word	0x00544146

080065c0 <find_volume>:
{
 80065c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	600b      	str	r3, [r1, #0]
{
 80065c8:	4688      	mov	r8, r1
 80065ca:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 80065cc:	f7ff ff38 	bl	8006440 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80065d0:	1e07      	subs	r7, r0, #0
 80065d2:	f2c0 8115 	blt.w	8006800 <find_volume+0x240>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80065d6:	4e8d      	ldr	r6, [pc, #564]	; (800680c <find_volume+0x24c>)
 80065d8:	eb06 0387 	add.w	r3, r6, r7, lsl #2
 80065dc:	6a1c      	ldr	r4, [r3, #32]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80065de:	2c00      	cmp	r4, #0
 80065e0:	f000 8110 	beq.w	8006804 <find_volume+0x244>
	*rfs = fs;							/* Return pointer to the file system object */
 80065e4:	f8c8 4000 	str.w	r4, [r8]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80065e8:	7823      	ldrb	r3, [r4, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80065ea:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 80065ee:	b16b      	cbz	r3, 800660c <find_volume+0x4c>
		stat = disk_status(fs->drv);
 80065f0:	7860      	ldrb	r0, [r4, #1]
 80065f2:	f7ff fdff 	bl	80061f4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80065f6:	07c1      	lsls	r1, r0, #31
 80065f8:	d408      	bmi.n	800660c <find_volume+0x4c>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80065fa:	b11d      	cbz	r5, 8006604 <find_volume+0x44>
 80065fc:	f010 0504 	ands.w	r5, r0, #4
 8006600:	d000      	beq.n	8006604 <find_volume+0x44>
				return FR_WRITE_PROTECTED;
 8006602:	250a      	movs	r5, #10
}
 8006604:	4628      	mov	r0, r5
 8006606:	b004      	add	sp, #16
 8006608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800660c:	2300      	movs	r3, #0
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800660e:	b2f8      	uxtb	r0, r7
	fs->fs_type = 0;					/* Clear the file system object */
 8006610:	7023      	strb	r3, [r4, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006612:	7060      	strb	r0, [r4, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006614:	f7ff fdf8 	bl	8006208 <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006618:	07c2      	lsls	r2, r0, #31
 800661a:	f100 80f5 	bmi.w	8006808 <find_volume+0x248>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800661e:	b10d      	cbz	r5, 8006624 <find_volume+0x64>
 8006620:	0743      	lsls	r3, r0, #29
 8006622:	d4ee      	bmi.n	8006602 <find_volume+0x42>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006624:	2100      	movs	r1, #0
 8006626:	4620      	mov	r0, r4
 8006628:	f7ff ff90 	bl	800654c <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800662c:	2802      	cmp	r0, #2
 800662e:	f040 80cd 	bne.w	80067cc <find_volume+0x20c>
 8006632:	466d      	mov	r5, sp
 8006634:	f504 73fb 	add.w	r3, r4, #502	; 0x1f6
 8006638:	f204 2136 	addw	r1, r4, #566	; 0x236
 800663c:	462a      	mov	r2, r5
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800663e:	f813 0c04 	ldrb.w	r0, [r3, #-4]
 8006642:	b110      	cbz	r0, 800664a <find_volume+0x8a>
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff fe1b 	bl	8006280 <ld_dword>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800664a:	3310      	adds	r3, #16
 800664c:	428b      	cmp	r3, r1
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800664e:	f842 0b04 	str.w	r0, [r2], #4
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006652:	d1f4      	bne.n	800663e <find_volume+0x7e>
 8006654:	f04f 0800 	mov.w	r8, #0
			bsect = br[i];
 8006658:	f855 7b04 	ldr.w	r7, [r5], #4
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800665c:	2f00      	cmp	r7, #0
 800665e:	f000 80aa 	beq.w	80067b6 <find_volume+0x1f6>
 8006662:	4639      	mov	r1, r7
 8006664:	4620      	mov	r0, r4
 8006666:	f7ff ff71 	bl	800654c <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800666a:	2801      	cmp	r0, #1
 800666c:	f200 80a4 	bhi.w	80067b8 <find_volume+0x1f8>
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006670:	f8b4 303b 	ldrh.w	r3, [r4, #59]	; 0x3b
 8006674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006678:	f040 80ac 	bne.w	80067d4 <find_volume+0x214>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800667c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006680:	b921      	cbnz	r1, 800668c <find_volume+0xcc>
 8006682:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8006686:	f7ff fdfb 	bl	8006280 <ld_dword>
 800668a:	4601      	mov	r1, r0
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800668c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
		fs->fsize = fasize;
 8006690:	61a1      	str	r1, [r4, #24]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006692:	1e5a      	subs	r2, r3, #1
 8006694:	2a01      	cmp	r2, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006696:	70a3      	strb	r3, [r4, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006698:	f200 809c 	bhi.w	80067d4 <find_volume+0x214>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800669c:	f894 503d 	ldrb.w	r5, [r4, #61]	; 0x3d
 80066a0:	8165      	strh	r5, [r4, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80066a2:	2d00      	cmp	r5, #0
 80066a4:	f000 8096 	beq.w	80067d4 <find_volume+0x214>
 80066a8:	1e6a      	subs	r2, r5, #1
 80066aa:	422a      	tst	r2, r5
 80066ac:	f040 8092 	bne.w	80067d4 <find_volume+0x214>
	rv = ptr[1];
 80066b0:	f8b4 8041 	ldrh.w	r8, [r4, #65]	; 0x41
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80066b4:	f8a4 8008 	strh.w	r8, [r4, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80066b8:	f018 0f0f 	tst.w	r8, #15
 80066bc:	f040 808a 	bne.w	80067d4 <find_volume+0x214>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80066c0:	f8b4 0043 	ldrh.w	r0, [r4, #67]	; 0x43
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80066c4:	b918      	cbnz	r0, 80066ce <find_volume+0x10e>
 80066c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80066ca:	f7ff fdd9 	bl	8006280 <ld_dword>
	rv = ptr[1];
 80066ce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	d07f      	beq.n	80067d4 <find_volume+0x214>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80066d4:	fb01 fe03 	mul.w	lr, r1, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80066d8:	eb02 1c18 	add.w	ip, r2, r8, lsr #4
 80066dc:	44f4      	add	ip, lr
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80066de:	4560      	cmp	r0, ip
 80066e0:	d378      	bcc.n	80067d4 <find_volume+0x214>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80066e2:	eba0 000c 	sub.w	r0, r0, ip
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80066e6:	42a8      	cmp	r0, r5
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80066e8:	fbb0 f3f5 	udiv	r3, r0, r5
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80066ec:	d372      	bcc.n	80067d4 <find_volume+0x214>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80066ee:	f64f 70f5 	movw	r0, #65525	; 0xfff5
 80066f2:	4283      	cmp	r3, r0
 80066f4:	d872      	bhi.n	80067dc <find_volume+0x21c>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80066f6:	f640 75f5 	movw	r5, #4085	; 0xff5
 80066fa:	42ab      	cmp	r3, r5
 80066fc:	bf8c      	ite	hi
 80066fe:	2502      	movhi	r5, #2
 8006700:	2501      	movls	r5, #1
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006702:	3302      	adds	r3, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006704:	443a      	add	r2, r7
		fs->database = bsect + sysect;					/* Data start sector */
 8006706:	eb0c 0007 	add.w	r0, ip, r7
		if (fmt == FS_FAT32) {
 800670a:	2d03      	cmp	r5, #3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800670c:	6163      	str	r3, [r4, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800670e:	61e7      	str	r7, [r4, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006710:	6222      	str	r2, [r4, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006712:	62a0      	str	r0, [r4, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006714:	d164      	bne.n	80067e0 <find_volume+0x220>
	rv = rv << 8 | ptr[0];
 8006716:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800671a:	ea52 0208 	orrs.w	r2, r2, r8
 800671e:	d159      	bne.n	80067d4 <find_volume+0x214>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006720:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006724:	f7ff fdac 	bl	8006280 <ld_dword>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006728:	009b      	lsls	r3, r3, #2
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800672a:	6260      	str	r0, [r4, #36]	; 0x24
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800672c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006730:	ebb1 2f53 	cmp.w	r1, r3, lsr #9
 8006734:	d34e      	bcc.n	80067d4 <find_volume+0x214>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006736:	f04f 33ff 	mov.w	r3, #4294967295
 800673a:	e9c4 3303 	strd	r3, r3, [r4, #12]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800673e:	2d03      	cmp	r5, #3
		fs->fsi_flag = 0x80;
 8006740:	f04f 0380 	mov.w	r3, #128	; 0x80
 8006744:	7123      	strb	r3, [r4, #4]
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006746:	d12b      	bne.n	80067a0 <find_volume+0x1e0>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006748:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800674c:	2b01      	cmp	r3, #1
 800674e:	d127      	bne.n	80067a0 <find_volume+0x1e0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006750:	1c79      	adds	r1, r7, #1
 8006752:	4620      	mov	r0, r4
 8006754:	f7ff fee0 	bl	8006518 <move_window>
 8006758:	bb10      	cbnz	r0, 80067a0 <find_volume+0x1e0>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800675a:	f8b4 222e 	ldrh.w	r2, [r4, #558]	; 0x22e
			fs->fsi_flag = 0;
 800675e:	7120      	strb	r0, [r4, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006760:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006764:	429a      	cmp	r2, r3
 8006766:	d11b      	bne.n	80067a0 <find_volume+0x1e0>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006768:	f104 0030 	add.w	r0, r4, #48	; 0x30
 800676c:	f7ff fd88 	bl	8006280 <ld_dword>
 8006770:	4b27      	ldr	r3, [pc, #156]	; (8006810 <find_volume+0x250>)
 8006772:	4298      	cmp	r0, r3
 8006774:	d114      	bne.n	80067a0 <find_volume+0x1e0>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006776:	f504 7005 	add.w	r0, r4, #532	; 0x214
 800677a:	f7ff fd81 	bl	8006280 <ld_dword>
 800677e:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8006782:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006786:	3320      	adds	r3, #32
 8006788:	4298      	cmp	r0, r3
 800678a:	d109      	bne.n	80067a0 <find_volume+0x1e0>
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800678c:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8006790:	f7ff fd76 	bl	8006280 <ld_dword>
 8006794:	6120      	str	r0, [r4, #16]
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006796:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800679a:	f7ff fd71 	bl	8006280 <ld_dword>
 800679e:	60e0      	str	r0, [r4, #12]
	fs->id = ++Fsid;		/* File system mount ID */
 80067a0:	8d33      	ldrh	r3, [r6, #40]	; 0x28
	fs->fs_type = fmt;		/* FAT sub-type */
 80067a2:	7025      	strb	r5, [r4, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80067a4:	3301      	adds	r3, #1
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	80e3      	strh	r3, [r4, #6]
	clear_lock(fs);
 80067aa:	4620      	mov	r0, r4
	fs->id = ++Fsid;		/* File system mount ID */
 80067ac:	8533      	strh	r3, [r6, #40]	; 0x28
	return FR_OK;
 80067ae:	2500      	movs	r5, #0
	clear_lock(fs);
 80067b0:	f7ff fe10 	bl	80063d4 <clear_lock>
	return FR_OK;
 80067b4:	e726      	b.n	8006604 <find_volume+0x44>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80067b6:	2003      	movs	r0, #3
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80067b8:	f108 0801 	add.w	r8, r8, #1
 80067bc:	f1b8 0f04 	cmp.w	r8, #4
 80067c0:	f47f af4a 	bne.w	8006658 <find_volume+0x98>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80067c4:	2804      	cmp	r0, #4
 80067c6:	d105      	bne.n	80067d4 <find_volume+0x214>
 80067c8:	2501      	movs	r5, #1
 80067ca:	e71b      	b.n	8006604 <find_volume+0x44>
 80067cc:	2804      	cmp	r0, #4
 80067ce:	d0fb      	beq.n	80067c8 <find_volume+0x208>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80067d0:	2801      	cmp	r0, #1
 80067d2:	d901      	bls.n	80067d8 <find_volume+0x218>
 80067d4:	250d      	movs	r5, #13
 80067d6:	e715      	b.n	8006604 <find_volume+0x44>
	bsect = 0;
 80067d8:	2700      	movs	r7, #0
 80067da:	e749      	b.n	8006670 <find_volume+0xb0>
		fmt = FS_FAT32;
 80067dc:	2503      	movs	r5, #3
 80067de:	e790      	b.n	8006702 <find_volume+0x142>
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80067e0:	f1b8 0f00 	cmp.w	r8, #0
 80067e4:	d0f6      	beq.n	80067d4 <find_volume+0x214>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80067e6:	4472      	add	r2, lr
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80067e8:	2d02      	cmp	r5, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80067ea:	6262      	str	r2, [r4, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80067ec:	ea4f 0243 	mov.w	r2, r3, lsl #1
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80067f0:	bf1b      	ittet	ne
 80067f2:	18d2      	addne	r2, r2, r3
 80067f4:	f003 0301 	andne.w	r3, r3, #1
 80067f8:	4613      	moveq	r3, r2
 80067fa:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 80067fe:	e795      	b.n	800672c <find_volume+0x16c>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006800:	250b      	movs	r5, #11
 8006802:	e6ff      	b.n	8006604 <find_volume+0x44>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006804:	250c      	movs	r5, #12
 8006806:	e6fd      	b.n	8006604 <find_volume+0x44>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006808:	2503      	movs	r5, #3
 800680a:	e6fb      	b.n	8006604 <find_volume+0x44>
 800680c:	20001160 	.word	0x20001160
 8006810:	41615252 	.word	0x41615252

08006814 <put_fat>:
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006814:	2901      	cmp	r1, #1
{
 8006816:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800681a:	4606      	mov	r6, r0
 800681c:	460c      	mov	r4, r1
 800681e:	4617      	mov	r7, r2
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006820:	d973      	bls.n	800690a <put_fat+0xf6>
 8006822:	6943      	ldr	r3, [r0, #20]
 8006824:	428b      	cmp	r3, r1
 8006826:	d970      	bls.n	800690a <put_fat+0xf6>
		switch (fs->fs_type) {
 8006828:	7803      	ldrb	r3, [r0, #0]
 800682a:	2b02      	cmp	r3, #2
 800682c:	d03f      	beq.n	80068ae <put_fat+0x9a>
 800682e:	2b03      	cmp	r3, #3
 8006830:	d050      	beq.n	80068d4 <put_fat+0xc0>
 8006832:	2b01      	cmp	r3, #1
 8006834:	d169      	bne.n	800690a <put_fat+0xf6>
			bc = (UINT)clst; bc += bc / 2;
 8006836:	eb01 0851 	add.w	r8, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800683a:	6a01      	ldr	r1, [r0, #32]
 800683c:	eb01 2158 	add.w	r1, r1, r8, lsr #9
 8006840:	f7ff fe6a 	bl	8006518 <move_window>
 8006844:	4605      	mov	r5, r0
			if (res != FR_OK) break;
 8006846:	bb38      	cbnz	r0, 8006898 <put_fat+0x84>
			p = fs->win + bc++ % SS(fs);
 8006848:	f106 0930 	add.w	r9, r6, #48	; 0x30
 800684c:	f108 0a01 	add.w	sl, r8, #1
 8006850:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006854:	f014 0401 	ands.w	r4, r4, #1
 8006858:	bf1f      	itttt	ne
 800685a:	f819 3008 	ldrbne.w	r3, [r9, r8]
 800685e:	f003 020f 	andne.w	r2, r3, #15
 8006862:	013b      	lslne	r3, r7, #4
 8006864:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8006868:	bf14      	ite	ne
 800686a:	4313      	orrne	r3, r2
 800686c:	b2fb      	uxtbeq	r3, r7
 800686e:	f809 3008 	strb.w	r3, [r9, r8]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006872:	6a31      	ldr	r1, [r6, #32]
			fs->wflag = 1;
 8006874:	2301      	movs	r3, #1
 8006876:	70f3      	strb	r3, [r6, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006878:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800687c:	4630      	mov	r0, r6
 800687e:	f7ff fe4b 	bl	8006518 <move_window>
			if (res != FR_OK) break;
 8006882:	4605      	mov	r5, r0
 8006884:	b940      	cbnz	r0, 8006898 <put_fat+0x84>
			p = fs->win + bc % SS(fs);
 8006886:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800688a:	b144      	cbz	r4, 800689e <put_fat+0x8a>
 800688c:	f3c7 1707 	ubfx	r7, r7, #4, #8
 8006890:	f809 700a 	strb.w	r7, [r9, sl]
			fs->wflag = 1;
 8006894:	2301      	movs	r3, #1
 8006896:	70f3      	strb	r3, [r6, #3]
}
 8006898:	4628      	mov	r0, r5
 800689a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800689e:	f819 300a 	ldrb.w	r3, [r9, sl]
 80068a2:	f3c7 2703 	ubfx	r7, r7, #8, #4
 80068a6:	f023 030f 	bic.w	r3, r3, #15
 80068aa:	431f      	orrs	r7, r3
 80068ac:	e7f0      	b.n	8006890 <put_fat+0x7c>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80068ae:	6a01      	ldr	r1, [r0, #32]
 80068b0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 80068b4:	f7ff fe30 	bl	8006518 <move_window>
			if (res != FR_OK) break;
 80068b8:	4605      	mov	r5, r0
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d1ec      	bne.n	8006898 <put_fat+0x84>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80068be:	0064      	lsls	r4, r4, #1
 80068c0:	f106 0330 	add.w	r3, r6, #48	; 0x30
 80068c4:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 80068c8:	1918      	adds	r0, r3, r4
	*ptr++ = (BYTE)val; val >>= 8;
 80068ca:	551f      	strb	r7, [r3, r4]
 80068cc:	f3c7 2707 	ubfx	r7, r7, #8, #8
	*ptr++ = (BYTE)val;
 80068d0:	7047      	strb	r7, [r0, #1]
			fs->wflag = 1;
 80068d2:	e7df      	b.n	8006894 <put_fat+0x80>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80068d4:	6a01      	ldr	r1, [r0, #32]
 80068d6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80068da:	f7ff fe1d 	bl	8006518 <move_window>
			if (res != FR_OK) break;
 80068de:	4605      	mov	r5, r0
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d1d9      	bne.n	8006898 <put_fat+0x84>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80068e4:	00a4      	lsls	r4, r4, #2
 80068e6:	f106 0330 	add.w	r3, r6, #48	; 0x30
 80068ea:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 80068ee:	441c      	add	r4, r3
 80068f0:	4620      	mov	r0, r4
 80068f2:	f7ff fcc5 	bl	8006280 <ld_dword>
 80068f6:	f027 4770 	bic.w	r7, r7, #4026531840	; 0xf0000000
 80068fa:	f000 4070 	and.w	r0, r0, #4026531840	; 0xf0000000
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80068fe:	ea47 0100 	orr.w	r1, r7, r0
 8006902:	4620      	mov	r0, r4
 8006904:	f7ff fcbe 	bl	8006284 <st_dword>
 8006908:	e7c4      	b.n	8006894 <put_fat+0x80>
		switch (fs->fs_type) {
 800690a:	2502      	movs	r5, #2
 800690c:	e7c4      	b.n	8006898 <put_fat+0x84>

0800690e <sync_fs>:
{
 800690e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006910:	4604      	mov	r4, r0
	res = sync_window(fs);
 8006912:	f7ff fdfb 	bl	800650c <sync_window>
 8006916:	4605      	mov	r5, r0
	if (res == FR_OK) {
 8006918:	2800      	cmp	r0, #0
 800691a:	d142      	bne.n	80069a2 <sync_fs+0x94>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800691c:	7823      	ldrb	r3, [r4, #0]
 800691e:	2b03      	cmp	r3, #3
 8006920:	d137      	bne.n	8006992 <sync_fs+0x84>
 8006922:	7927      	ldrb	r7, [r4, #4]
 8006924:	2f01      	cmp	r7, #1
 8006926:	d134      	bne.n	8006992 <sync_fs+0x84>
			mem_set(fs->win, 0, SS(fs));
 8006928:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800692c:	4601      	mov	r1, r0
 800692e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006932:	4630      	mov	r0, r6
	*ptr++ = (BYTE)val; val >>= 8;
 8006934:	2355      	movs	r3, #85	; 0x55
			mem_set(fs->win, 0, SS(fs));
 8006936:	f7ff fcad 	bl	8006294 <mem_set>
	*ptr++ = (BYTE)val; val >>= 8;
 800693a:	f884 322e 	strb.w	r3, [r4, #558]	; 0x22e
	*ptr++ = (BYTE)val;
 800693e:	23aa      	movs	r3, #170	; 0xaa
 8006940:	f884 322f 	strb.w	r3, [r4, #559]	; 0x22f
	*ptr++ = (BYTE)val; val >>= 8;
 8006944:	2352      	movs	r3, #82	; 0x52
	*ptr++ = (BYTE)val;
 8006946:	2241      	movs	r2, #65	; 0x41
	*ptr++ = (BYTE)val; val >>= 8;
 8006948:	2172      	movs	r1, #114	; 0x72
 800694a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800694e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
	*ptr++ = (BYTE)val; val >>= 8;
 8006952:	2361      	movs	r3, #97	; 0x61
 8006954:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
	*ptr++ = (BYTE)val;
 8006958:	f884 3217 	strb.w	r3, [r4, #535]	; 0x217
 800695c:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	*ptr++ = (BYTE)val; val >>= 8;
 8006960:	f884 1214 	strb.w	r1, [r4, #532]	; 0x214
	*ptr++ = (BYTE)val; val >>= 8;
 8006964:	f884 1215 	strb.w	r1, [r4, #533]	; 0x215
	*ptr++ = (BYTE)val; val >>= 8;
 8006968:	f884 2216 	strb.w	r2, [r4, #534]	; 0x216
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800696c:	6921      	ldr	r1, [r4, #16]
 800696e:	f504 7006 	add.w	r0, r4, #536	; 0x218
 8006972:	f7ff fc87 	bl	8006284 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006976:	68e1      	ldr	r1, [r4, #12]
 8006978:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 800697c:	f7ff fc82 	bl	8006284 <st_dword>
			fs->winsect = fs->volbase + 1;
 8006980:	69e2      	ldr	r2, [r4, #28]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006982:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 8006984:	3201      	adds	r2, #1
 8006986:	62e2      	str	r2, [r4, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006988:	463b      	mov	r3, r7
 800698a:	4631      	mov	r1, r6
 800698c:	f7ff fc5a 	bl	8006244 <disk_write>
			fs->fsi_flag = 0;
 8006990:	7125      	strb	r5, [r4, #4]
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006992:	2200      	movs	r2, #0
 8006994:	7860      	ldrb	r0, [r4, #1]
 8006996:	4611      	mov	r1, r2
 8006998:	f7ff fc62 	bl	8006260 <disk_ioctl>
	res = sync_window(fs);
 800699c:	3800      	subs	r0, #0
 800699e:	bf18      	it	ne
 80069a0:	2001      	movne	r0, #1
}
 80069a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080069a4 <ld_clust.isra.0>:
	if (fs->fs_type == FS_FAT32) {
 80069a4:	2803      	cmp	r0, #3
	cl = ld_word(dir + DIR_FstClusLO);
 80069a6:	8b4b      	ldrh	r3, [r1, #26]
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80069a8:	bf04      	itt	eq
 80069aa:	8a8a      	ldrheq	r2, [r1, #20]
 80069ac:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	4770      	bx	lr

080069b4 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80069b4:	2901      	cmp	r1, #1
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 80069b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b8:	4606      	mov	r6, r0
 80069ba:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80069bc:	d94e      	bls.n	8006a5c <get_fat.isra.0+0xa8>
 80069be:	6943      	ldr	r3, [r0, #20]
 80069c0:	4299      	cmp	r1, r3
 80069c2:	d24b      	bcs.n	8006a5c <get_fat.isra.0+0xa8>
		switch (fs->fs_type) {
 80069c4:	7803      	ldrb	r3, [r0, #0]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d029      	beq.n	8006a1e <get_fat.isra.0+0x6a>
 80069ca:	2b03      	cmp	r3, #3
 80069cc:	d034      	beq.n	8006a38 <get_fat.isra.0+0x84>
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d144      	bne.n	8006a5c <get_fat.isra.0+0xa8>
			bc = (UINT)clst; bc += bc / 2;
 80069d2:	eb01 0551 	add.w	r5, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069d6:	6a01      	ldr	r1, [r0, #32]
 80069d8:	eb01 2155 	add.w	r1, r1, r5, lsr #9
 80069dc:	f7ff fd9c 	bl	8006518 <move_window>
 80069e0:	b110      	cbz	r0, 80069e8 <get_fat.isra.0+0x34>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80069e2:	f04f 30ff 	mov.w	r0, #4294967295
}
 80069e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 80069e8:	1c6f      	adds	r7, r5, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069ea:	6a31      	ldr	r1, [r6, #32]
			wc = fs->win[bc++ % SS(fs)];
 80069ec:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80069f0:	4435      	add	r5, r6
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069f2:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 80069f6:	4630      	mov	r0, r6
			wc = fs->win[bc++ % SS(fs)];
 80069f8:	f895 5030 	ldrb.w	r5, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069fc:	f7ff fd8c 	bl	8006518 <move_window>
 8006a00:	2800      	cmp	r0, #0
 8006a02:	d1ee      	bne.n	80069e2 <get_fat.isra.0+0x2e>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006a04:	f3c7 0708 	ubfx	r7, r7, #0, #9
 8006a08:	443e      	add	r6, r7
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006a0a:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8006a0c:	f896 0030 	ldrb.w	r0, [r6, #48]	; 0x30
 8006a10:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006a14:	bf4c      	ite	mi
 8006a16:	0900      	lsrmi	r0, r0, #4
 8006a18:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8006a1c:	e7e3      	b.n	80069e6 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006a1e:	6a01      	ldr	r1, [r0, #32]
 8006a20:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 8006a24:	f7ff fd78 	bl	8006518 <move_window>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d1da      	bne.n	80069e2 <get_fat.isra.0+0x2e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006a2c:	0064      	lsls	r4, r4, #1
 8006a2e:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8006a32:	4426      	add	r6, r4
 8006a34:	8e30      	ldrh	r0, [r6, #48]	; 0x30
			break;
 8006a36:	e7d6      	b.n	80069e6 <get_fat.isra.0+0x32>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a38:	6a01      	ldr	r1, [r0, #32]
 8006a3a:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8006a3e:	f7ff fd6b 	bl	8006518 <move_window>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	d1cd      	bne.n	80069e2 <get_fat.isra.0+0x2e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006a46:	00a4      	lsls	r4, r4, #2
 8006a48:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8006a4c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
 8006a50:	4420      	add	r0, r4
 8006a52:	f7ff fc15 	bl	8006280 <ld_dword>
 8006a56:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8006a5a:	e7c4      	b.n	80069e6 <get_fat.isra.0+0x32>
		switch (fs->fs_type) {
 8006a5c:	2001      	movs	r0, #1
	return val;
 8006a5e:	e7c2      	b.n	80069e6 <get_fat.isra.0+0x32>

08006a60 <dir_sdi.constprop.0>:
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006a60:	6882      	ldr	r2, [r0, #8]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8006a62:	b538      	push	{r3, r4, r5, lr}
	dp->dptr = ofs;				/* Set current offset */
 8006a64:	2300      	movs	r3, #0
	FATFS *fs = dp->obj.fs;
 8006a66:	6805      	ldr	r5, [r0, #0]
	dp->dptr = ofs;				/* Set current offset */
 8006a68:	6143      	str	r3, [r0, #20]
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
 8006a6a:	4604      	mov	r4, r0
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006a6c:	b99a      	cbnz	r2, 8006a96 <dir_sdi.constprop.0+0x36>
 8006a6e:	782b      	ldrb	r3, [r5, #0]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d901      	bls.n	8006a78 <dir_sdi.constprop.0+0x18>
		clst = fs->dirbase;
 8006a74:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006a76:	b96b      	cbnz	r3, 8006a94 <dir_sdi.constprop.0+0x34>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006a78:	892b      	ldrh	r3, [r5, #8]
 8006a7a:	b90b      	cbnz	r3, 8006a80 <dir_sdi.constprop.0+0x20>
 8006a7c:	2002      	movs	r0, #2
}
 8006a7e:	bd38      	pop	{r3, r4, r5, pc}
		dp->sect = fs->dirbase;
 8006a80:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006a82:	61e3      	str	r3, [r4, #28]
	if (!dp->sect) return FR_INT_ERR;
 8006a84:	69e3      	ldr	r3, [r4, #28]
	dp->clust = clst;					/* Current cluster# */
 8006a86:	61a2      	str	r2, [r4, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0f7      	beq.n	8006a7c <dir_sdi.constprop.0+0x1c>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006a8c:	3530      	adds	r5, #48	; 0x30
 8006a8e:	6225      	str	r5, [r4, #32]
	return FR_OK;
 8006a90:	2000      	movs	r0, #0
 8006a92:	e7f4      	b.n	8006a7e <dir_sdi.constprop.0+0x1e>
 8006a94:	461a      	mov	r2, r3
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006a96:	896b      	ldrh	r3, [r5, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a98:	b963      	cbnz	r3, 8006ab4 <dir_sdi.constprop.0+0x54>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006a9a:	4611      	mov	r1, r2
 8006a9c:	6820      	ldr	r0, [r4, #0]
 8006a9e:	f7ff ff89 	bl	80069b4 <get_fat.isra.0>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006aa2:	1c43      	adds	r3, r0, #1
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006aa4:	4602      	mov	r2, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006aa6:	d00b      	beq.n	8006ac0 <dir_sdi.constprop.0+0x60>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006aa8:	2801      	cmp	r0, #1
 8006aaa:	d9e7      	bls.n	8006a7c <dir_sdi.constprop.0+0x1c>
 8006aac:	696b      	ldr	r3, [r5, #20]
 8006aae:	4298      	cmp	r0, r3
 8006ab0:	d3f3      	bcc.n	8006a9a <dir_sdi.constprop.0+0x3a>
 8006ab2:	e7e3      	b.n	8006a7c <dir_sdi.constprop.0+0x1c>
		dp->sect = clust2sect(fs, clst);
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f7ff fc9a 	bl	80063f0 <clust2sect>
 8006abc:	61e0      	str	r0, [r4, #28]
 8006abe:	e7e1      	b.n	8006a84 <dir_sdi.constprop.0+0x24>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006ac0:	2001      	movs	r0, #1
 8006ac2:	e7dc      	b.n	8006a7e <dir_sdi.constprop.0+0x1e>

08006ac4 <remove_chain>:
{
 8006ac4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ac6:	460c      	mov	r4, r1
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006ac8:	2c01      	cmp	r4, #1
	FATFS *fs = obj->fs;
 8006aca:	6805      	ldr	r5, [r0, #0]
{
 8006acc:	4606      	mov	r6, r0
 8006ace:	4611      	mov	r1, r2
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006ad0:	d92c      	bls.n	8006b2c <remove_chain+0x68>
 8006ad2:	696b      	ldr	r3, [r5, #20]
 8006ad4:	42a3      	cmp	r3, r4
 8006ad6:	d929      	bls.n	8006b2c <remove_chain+0x68>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006ad8:	b12a      	cbz	r2, 8006ae6 <remove_chain+0x22>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006ada:	f04f 32ff 	mov.w	r2, #4294967295
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f7ff fe98 	bl	8006814 <put_fat>
		if (res != FR_OK) return res;
 8006ae4:	b940      	cbnz	r0, 8006af8 <remove_chain+0x34>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	6830      	ldr	r0, [r6, #0]
 8006aea:	9401      	str	r4, [sp, #4]
 8006aec:	f7ff ff62 	bl	80069b4 <get_fat.isra.0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006af0:	9901      	ldr	r1, [sp, #4]
 8006af2:	4604      	mov	r4, r0
 8006af4:	b910      	cbnz	r0, 8006afc <remove_chain+0x38>
	return FR_OK;
 8006af6:	2000      	movs	r0, #0
}
 8006af8:	b002      	add	sp, #8
 8006afa:	bd70      	pop	{r4, r5, r6, pc}
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006afc:	2801      	cmp	r0, #1
 8006afe:	d015      	beq.n	8006b2c <remove_chain+0x68>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	d015      	beq.n	8006b30 <remove_chain+0x6c>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006b04:	2200      	movs	r2, #0
 8006b06:	4628      	mov	r0, r5
 8006b08:	f7ff fe84 	bl	8006814 <put_fat>
			if (res != FR_OK) return res;
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	d1f3      	bne.n	8006af8 <remove_chain+0x34>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006b10:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8006b14:	1e91      	subs	r1, r2, #2
 8006b16:	428b      	cmp	r3, r1
 8006b18:	d205      	bcs.n	8006b26 <remove_chain+0x62>
			fs->free_clst++;
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	612b      	str	r3, [r5, #16]
			fs->fsi_flag |= 1;
 8006b1e:	792b      	ldrb	r3, [r5, #4]
 8006b20:	f043 0301 	orr.w	r3, r3, #1
 8006b24:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006b26:	42a2      	cmp	r2, r4
 8006b28:	d8dd      	bhi.n	8006ae6 <remove_chain+0x22>
 8006b2a:	e7e4      	b.n	8006af6 <remove_chain+0x32>
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006b2c:	2002      	movs	r0, #2
 8006b2e:	e7e3      	b.n	8006af8 <remove_chain+0x34>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006b30:	2001      	movs	r0, #1
 8006b32:	e7e1      	b.n	8006af8 <remove_chain+0x34>

08006b34 <create_chain>:
{
 8006b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = obj->fs;
 8006b38:	6805      	ldr	r5, [r0, #0]
{
 8006b3a:	4680      	mov	r8, r0
	if (clst == 0) {	/* Create a new chain */
 8006b3c:	460f      	mov	r7, r1
 8006b3e:	b971      	cbnz	r1, 8006b5e <create_chain+0x2a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006b40:	68ee      	ldr	r6, [r5, #12]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006b42:	b1ee      	cbz	r6, 8006b80 <create_chain+0x4c>
 8006b44:	696b      	ldr	r3, [r5, #20]
 8006b46:	42b3      	cmp	r3, r6
 8006b48:	bf98      	it	ls
 8006b4a:	2601      	movls	r6, #1
		ncl = scl;	/* Start cluster */
 8006b4c:	4634      	mov	r4, r6
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006b4e:	696b      	ldr	r3, [r5, #20]
			ncl++;							/* Next cluster */
 8006b50:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006b52:	42a3      	cmp	r3, r4
 8006b54:	d817      	bhi.n	8006b86 <create_chain+0x52>
				if (ncl > scl) return 0;	/* No free cluster */
 8006b56:	2e01      	cmp	r6, #1
 8006b58:	d814      	bhi.n	8006b84 <create_chain+0x50>
 8006b5a:	2400      	movs	r4, #0
 8006b5c:	e006      	b.n	8006b6c <create_chain+0x38>
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006b5e:	4628      	mov	r0, r5
 8006b60:	f7ff ff28 	bl	80069b4 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006b64:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006b66:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006b68:	d803      	bhi.n	8006b72 <create_chain+0x3e>
 8006b6a:	2401      	movs	r4, #1
}
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006b72:	1c43      	adds	r3, r0, #1
 8006b74:	d030      	beq.n	8006bd8 <create_chain+0xa4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006b76:	696b      	ldr	r3, [r5, #20]
 8006b78:	4283      	cmp	r3, r0
 8006b7a:	d8f7      	bhi.n	8006b6c <create_chain+0x38>
 8006b7c:	463e      	mov	r6, r7
 8006b7e:	e7e5      	b.n	8006b4c <create_chain+0x18>
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006b80:	2601      	movs	r6, #1
 8006b82:	e7e3      	b.n	8006b4c <create_chain+0x18>
				ncl = 2;
 8006b84:	2402      	movs	r4, #2
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006b86:	f8d8 0000 	ldr.w	r0, [r8]
 8006b8a:	4621      	mov	r1, r4
 8006b8c:	f7ff ff12 	bl	80069b4 <get_fat.isra.0>
			if (cs == 0) break;				/* Found a free cluster */
 8006b90:	b130      	cbz	r0, 8006ba0 <create_chain+0x6c>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006b92:	2801      	cmp	r0, #1
 8006b94:	d0e9      	beq.n	8006b6a <create_chain+0x36>
 8006b96:	3001      	adds	r0, #1
 8006b98:	d01e      	beq.n	8006bd8 <create_chain+0xa4>
			if (ncl == scl) return 0;		/* No free cluster */
 8006b9a:	42b4      	cmp	r4, r6
 8006b9c:	d1d7      	bne.n	8006b4e <create_chain+0x1a>
 8006b9e:	e7dc      	b.n	8006b5a <create_chain+0x26>
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba4:	4621      	mov	r1, r4
 8006ba6:	4628      	mov	r0, r5
 8006ba8:	f7ff fe34 	bl	8006814 <put_fat>
		if (res == FR_OK && clst != 0) {
 8006bac:	b990      	cbnz	r0, 8006bd4 <create_chain+0xa0>
 8006bae:	b957      	cbnz	r7, 8006bc6 <create_chain+0x92>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006bb0:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
 8006bb4:	3a02      	subs	r2, #2
 8006bb6:	4293      	cmp	r3, r2
		fs->last_clst = ncl;
 8006bb8:	60ec      	str	r4, [r5, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006bba:	d910      	bls.n	8006bde <create_chain+0xaa>
		fs->fsi_flag |= 1;
 8006bbc:	792b      	ldrb	r3, [r5, #4]
 8006bbe:	f043 0301 	orr.w	r3, r3, #1
 8006bc2:	712b      	strb	r3, [r5, #4]
 8006bc4:	e7d2      	b.n	8006b6c <create_chain+0x38>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006bc6:	4622      	mov	r2, r4
 8006bc8:	4639      	mov	r1, r7
 8006bca:	4628      	mov	r0, r5
 8006bcc:	f7ff fe22 	bl	8006814 <put_fat>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d0ed      	beq.n	8006bb0 <create_chain+0x7c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006bd4:	2801      	cmp	r0, #1
 8006bd6:	d1c8      	bne.n	8006b6a <create_chain+0x36>
 8006bd8:	f04f 34ff 	mov.w	r4, #4294967295
 8006bdc:	e7c6      	b.n	8006b6c <create_chain+0x38>
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006bde:	3b01      	subs	r3, #1
 8006be0:	612b      	str	r3, [r5, #16]
 8006be2:	e7eb      	b.n	8006bbc <create_chain+0x88>

08006be4 <dir_next>:
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006be4:	6943      	ldr	r3, [r0, #20]
{
 8006be6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006bea:	f103 0820 	add.w	r8, r3, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006bee:	69c3      	ldr	r3, [r0, #28]
{
 8006bf0:	4605      	mov	r5, r0
 8006bf2:	468a      	mov	sl, r1
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006bf4:	b193      	cbz	r3, 8006c1c <dir_next+0x38>
 8006bf6:	f5b8 1f00 	cmp.w	r8, #2097152	; 0x200000
 8006bfa:	d20f      	bcs.n	8006c1c <dir_next+0x38>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006bfc:	f3c8 0908 	ubfx	r9, r8, #0, #9
	FATFS *fs = dp->obj.fs;
 8006c00:	6804      	ldr	r4, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006c02:	f1b9 0f00 	cmp.w	r9, #0
 8006c06:	d14d      	bne.n	8006ca4 <dir_next+0xc0>
		if (!dp->clust) {		/* Static table */
 8006c08:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8006c0e:	b939      	cbnz	r1, 8006c20 <dir_next+0x3c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006c10:	8923      	ldrh	r3, [r4, #8]
 8006c12:	ebb3 1f58 	cmp.w	r3, r8, lsr #5
 8006c16:	d845      	bhi.n	8006ca4 <dir_next+0xc0>
				dp->sect = 0; return FR_NO_FILE;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	61eb      	str	r3, [r5, #28]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006c1c:	2004      	movs	r0, #4
 8006c1e:	e00b      	b.n	8006c38 <dir_next+0x54>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006c20:	8967      	ldrh	r7, [r4, #10]
 8006c22:	3f01      	subs	r7, #1
 8006c24:	ea17 2758 	ands.w	r7, r7, r8, lsr #9
 8006c28:	d13c      	bne.n	8006ca4 <dir_next+0xc0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f7ff fec2 	bl	80069b4 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006c30:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006c32:	4606      	mov	r6, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006c34:	d802      	bhi.n	8006c3c <dir_next+0x58>
 8006c36:	2002      	movs	r0, #2
}
 8006c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006c3c:	1c42      	adds	r2, r0, #1
 8006c3e:	d101      	bne.n	8006c44 <dir_next+0x60>
 8006c40:	2001      	movs	r0, #1
 8006c42:	e7f9      	b.n	8006c38 <dir_next+0x54>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006c44:	6963      	ldr	r3, [r4, #20]
 8006c46:	4283      	cmp	r3, r0
 8006c48:	d826      	bhi.n	8006c98 <dir_next+0xb4>
					if (!stretch) {								/* If no stretch, report EOT */
 8006c4a:	f1ba 0f00 	cmp.w	sl, #0
 8006c4e:	d0e3      	beq.n	8006c18 <dir_next+0x34>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006c50:	69a9      	ldr	r1, [r5, #24]
 8006c52:	4628      	mov	r0, r5
 8006c54:	f7ff ff6e 	bl	8006b34 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006c58:	4606      	mov	r6, r0
 8006c5a:	2800      	cmp	r0, #0
 8006c5c:	d035      	beq.n	8006cca <dir_next+0xe6>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006c5e:	2801      	cmp	r0, #1
 8006c60:	d0e9      	beq.n	8006c36 <dir_next+0x52>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c62:	1c43      	adds	r3, r0, #1
 8006c64:	d0ec      	beq.n	8006c40 <dir_next+0x5c>
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006c66:	4620      	mov	r0, r4
 8006c68:	f7ff fc50 	bl	800650c <sync_window>
 8006c6c:	4601      	mov	r1, r0
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d1e6      	bne.n	8006c40 <dir_next+0x5c>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006c72:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8006c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c7a:	f7ff fb0b 	bl	8006294 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4620      	mov	r0, r4
 8006c82:	f7ff fbb5 	bl	80063f0 <clust2sect>
						fs->wflag = 1;
 8006c86:	f04f 0a01 	mov.w	sl, #1
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c8a:	62e0      	str	r0, [r4, #44]	; 0x2c
 8006c8c:	8963      	ldrh	r3, [r4, #10]
 8006c8e:	429f      	cmp	r7, r3
 8006c90:	d30f      	bcc.n	8006cb2 <dir_next+0xce>
					fs->winsect -= n;							/* Restore window offset */
 8006c92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006c94:	1bdb      	subs	r3, r3, r7
 8006c96:	62e3      	str	r3, [r4, #44]	; 0x2c
				dp->clust = clst;		/* Initialize data for new cluster */
 8006c98:	61ae      	str	r6, [r5, #24]
				dp->sect = clust2sect(fs, clst);
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4620      	mov	r0, r4
 8006c9e:	f7ff fba7 	bl	80063f0 <clust2sect>
 8006ca2:	61e8      	str	r0, [r5, #28]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006ca4:	3430      	adds	r4, #48	; 0x30
 8006ca6:	444c      	add	r4, r9
	dp->dptr = ofs;						/* Current entry */
 8006ca8:	f8c5 8014 	str.w	r8, [r5, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006cac:	622c      	str	r4, [r5, #32]
	return FR_OK;
 8006cae:	2000      	movs	r0, #0
 8006cb0:	e7c2      	b.n	8006c38 <dir_next+0x54>
						fs->wflag = 1;
 8006cb2:	f884 a003 	strb.w	sl, [r4, #3]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006cb6:	4620      	mov	r0, r4
 8006cb8:	f7ff fc02 	bl	80064c0 <sync_window.part.0>
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	d1bf      	bne.n	8006c40 <dir_next+0x5c>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006cc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	3701      	adds	r7, #1
 8006cc6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006cc8:	e7e0      	b.n	8006c8c <dir_next+0xa8>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006cca:	2007      	movs	r0, #7
 8006ccc:	e7b4      	b.n	8006c38 <dir_next+0x54>
	...

08006cd0 <follow_path>:
{
 8006cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	FATFS *fs = obj->fs;
 8006cd4:	6806      	ldr	r6, [r0, #0]
{
 8006cd6:	4681      	mov	r9, r0
 8006cd8:	460c      	mov	r4, r1
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006cda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cde:	2b2f      	cmp	r3, #47	; 0x2f
 8006ce0:	d0fa      	beq.n	8006cd8 <follow_path+0x8>
 8006ce2:	2b5c      	cmp	r3, #92	; 0x5c
 8006ce4:	d0f8      	beq.n	8006cd8 <follow_path+0x8>
		obj->sclust = 0;					/* Start from root directory */
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	f8c9 3008 	str.w	r3, [r9, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006cec:	7823      	ldrb	r3, [r4, #0]
 8006cee:	2b1f      	cmp	r3, #31
 8006cf0:	d95a      	bls.n	8006da8 <follow_path+0xd8>
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006cf2:	4f54      	ldr	r7, [pc, #336]	; (8006e44 <follow_path+0x174>)
	p = *path; sfn = dp->fn;
 8006cf4:	f109 0524 	add.w	r5, r9, #36	; 0x24
	mem_set(sfn, ' ', 11);
 8006cf8:	220b      	movs	r2, #11
 8006cfa:	4628      	mov	r0, r5
 8006cfc:	2120      	movs	r1, #32
 8006cfe:	f7ff fac9 	bl	8006294 <mem_set>
	si = i = 0; ni = 8;
 8006d02:	f1c4 0802 	rsb	r8, r4, #2
 8006d06:	f104 3cff 	add.w	ip, r4, #4294967295
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	2008      	movs	r0, #8
		c = (BYTE)p[si++];
 8006d0e:	eb08 010c 	add.w	r1, r8, ip
 8006d12:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006d16:	2b20      	cmp	r3, #32
 8006d18:	d908      	bls.n	8006d2c <follow_path+0x5c>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8006d1a:	2b2f      	cmp	r3, #47	; 0x2f
 8006d1c:	d001      	beq.n	8006d22 <follow_path+0x52>
 8006d1e:	2b5c      	cmp	r3, #92	; 0x5c
 8006d20:	d14c      	bne.n	8006dbc <follow_path+0xec>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006d22:	5c60      	ldrb	r0, [r4, r1]
 8006d24:	282f      	cmp	r0, #47	; 0x2f
 8006d26:	d047      	beq.n	8006db8 <follow_path+0xe8>
 8006d28:	285c      	cmp	r0, #92	; 0x5c
 8006d2a:	d045      	beq.n	8006db8 <follow_path+0xe8>
	*path = p + si;						/* Return pointer to the next segment */
 8006d2c:	440c      	add	r4, r1
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006d2e:	2a00      	cmp	r2, #0
 8006d30:	d054      	beq.n	8006ddc <follow_path+0x10c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d32:	f899 2024 	ldrb.w	r2, [r9, #36]	; 0x24
	FATFS *fs = dp->obj.fs;
 8006d36:	f8d9 8000 	ldr.w	r8, [r9]
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006d3a:	2ae5      	cmp	r2, #229	; 0xe5
 8006d3c:	bf04      	itt	eq
 8006d3e:	2205      	moveq	r2, #5
 8006d40:	f889 2024 	strbeq.w	r2, [r9, #36]	; 0x24
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006d44:	2b21      	cmp	r3, #33	; 0x21
 8006d46:	bf34      	ite	cc
 8006d48:	2304      	movcc	r3, #4
 8006d4a:	2300      	movcs	r3, #0
 8006d4c:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006d50:	4648      	mov	r0, r9
 8006d52:	f7ff fe85 	bl	8006a60 <dir_sdi.constprop.0>
	if (res != FR_OK) return res;
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d144      	bne.n	8006de4 <follow_path+0x114>
		res = move_window(fs, dp->sect);
 8006d5a:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8006d5e:	4640      	mov	r0, r8
 8006d60:	f7ff fbda 	bl	8006518 <move_window>
		if (res != FR_OK) break;
 8006d64:	2800      	cmp	r0, #0
 8006d66:	d13d      	bne.n	8006de4 <follow_path+0x114>
		c = dp->dir[DIR_Name];
 8006d68:	f8d9 2020 	ldr.w	r2, [r9, #32]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006d6c:	7813      	ldrb	r3, [r2, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d043      	beq.n	8006dfa <follow_path+0x12a>
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8006d72:	7ad3      	ldrb	r3, [r2, #11]
 8006d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d78:	f889 3006 	strb.w	r3, [r9, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006d7c:	7ad3      	ldrb	r3, [r2, #11]
 8006d7e:	f013 0008 	ands.w	r0, r3, #8
 8006d82:	d10c      	bne.n	8006d9e <follow_path+0xce>
 8006d84:	f102 0c0b 	add.w	ip, r2, #11
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006d88:	4629      	mov	r1, r5
		r = *d++ - *s++;
 8006d8a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8006d8e:	f811 eb01 	ldrb.w	lr, [r1], #1
	} while (--cnt && r == 0);
 8006d92:	4594      	cmp	ip, r2
		r = *d++ - *s++;
 8006d94:	eba3 030e 	sub.w	r3, r3, lr
	} while (--cnt && r == 0);
 8006d98:	d022      	beq.n	8006de0 <follow_path+0x110>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d0f5      	beq.n	8006d8a <follow_path+0xba>
		res = dir_next(dp, 0);	/* Next entry */
 8006d9e:	2100      	movs	r1, #0
 8006da0:	4648      	mov	r0, r9
 8006da2:	f7ff ff1f 	bl	8006be4 <dir_next>
 8006da6:	e7d6      	b.n	8006d56 <follow_path+0x86>
		dp->fn[NSFLAG] = NS_NONAME;
 8006da8:	2380      	movs	r3, #128	; 0x80
 8006daa:	f889 302f 	strb.w	r3, [r9, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006dae:	4648      	mov	r0, r9
}
 8006db0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		res = dir_sdi(dp, 0);
 8006db4:	f7ff be54 	b.w	8006a60 <dir_sdi.constprop.0>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006db8:	3101      	adds	r1, #1
 8006dba:	e7b2      	b.n	8006d22 <follow_path+0x52>
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8006dbc:	2b2e      	cmp	r3, #46	; 0x2e
 8006dbe:	d033      	beq.n	8006e28 <follow_path+0x158>
 8006dc0:	4290      	cmp	r0, r2
 8006dc2:	d90b      	bls.n	8006ddc <follow_path+0x10c>
		if (c >= 0x80) {				/* Extended character? */
 8006dc4:	0619      	lsls	r1, r3, #24
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006dc6:	bf48      	it	mi
 8006dc8:	3b80      	submi	r3, #128	; 0x80
 8006dca:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8006e48 <follow_path+0x178>
 8006dce:	bf48      	it	mi
 8006dd0:	5cfb      	ldrbmi	r3, [r7, r3]
	while (*str && *str != chr) str++;
 8006dd2:	f81e 1b01 	ldrb.w	r1, [lr], #1
 8006dd6:	b361      	cbz	r1, 8006e32 <follow_path+0x162>
 8006dd8:	428b      	cmp	r3, r1
 8006dda:	d1fa      	bne.n	8006dd2 <follow_path+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006ddc:	2006      	movs	r0, #6
	return res;
 8006dde:	e00a      	b.n	8006df6 <follow_path+0x126>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1dc      	bne.n	8006d9e <follow_path+0xce>
			ns = dp->fn[NSFLAG];
 8006de4:	f899 302f 	ldrb.w	r3, [r9, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8006de8:	b148      	cbz	r0, 8006dfe <follow_path+0x12e>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006dea:	2804      	cmp	r0, #4
 8006dec:	d103      	bne.n	8006df6 <follow_path+0x126>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006dee:	f013 0f04 	tst.w	r3, #4
 8006df2:	bf08      	it	eq
 8006df4:	2005      	moveq	r0, #5
}
 8006df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006dfa:	2004      	movs	r0, #4
 8006dfc:	e7f2      	b.n	8006de4 <follow_path+0x114>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006dfe:	075a      	lsls	r2, r3, #29
 8006e00:	d4f9      	bmi.n	8006df6 <follow_path+0x126>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006e02:	f899 3006 	ldrb.w	r3, [r9, #6]
 8006e06:	06db      	lsls	r3, r3, #27
 8006e08:	d50c      	bpl.n	8006e24 <follow_path+0x154>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006e0a:	f8d9 1014 	ldr.w	r1, [r9, #20]
 8006e0e:	7830      	ldrb	r0, [r6, #0]
 8006e10:	f106 0330 	add.w	r3, r6, #48	; 0x30
 8006e14:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006e18:	4419      	add	r1, r3
 8006e1a:	f7ff fdc3 	bl	80069a4 <ld_clust.isra.0>
 8006e1e:	f8c9 0008 	str.w	r0, [r9, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006e22:	e767      	b.n	8006cf4 <follow_path+0x24>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006e24:	2005      	movs	r0, #5
 8006e26:	e7e6      	b.n	8006df6 <follow_path+0x126>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8006e28:	280b      	cmp	r0, #11
 8006e2a:	d0d7      	beq.n	8006ddc <follow_path+0x10c>
			i = 8; ni = 11;				/* Goto extension */
 8006e2c:	2208      	movs	r2, #8
 8006e2e:	200b      	movs	r0, #11
 8006e30:	e76d      	b.n	8006d0e <follow_path+0x3e>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006e32:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 8006e36:	2919      	cmp	r1, #25
 8006e38:	d801      	bhi.n	8006e3e <follow_path+0x16e>
 8006e3a:	3b20      	subs	r3, #32
 8006e3c:	b2db      	uxtb	r3, r3
			sfn[i++] = c;
 8006e3e:	54ab      	strb	r3, [r5, r2]
 8006e40:	3201      	adds	r2, #1
 8006e42:	e764      	b.n	8006d0e <follow_path+0x3e>
 8006e44:	08014936 	.word	0x08014936
 8006e48:	08014a9a 	.word	0x08014a9a

08006e4c <dir_register>:
{
 8006e4c:	b570      	push	{r4, r5, r6, lr}
	FATFS *fs = dp->obj.fs;
 8006e4e:	6806      	ldr	r6, [r0, #0]
{
 8006e50:	4605      	mov	r5, r0
	res = dir_sdi(dp, 0);
 8006e52:	f7ff fe05 	bl	8006a60 <dir_sdi.constprop.0>
	if (res == FR_OK) {
 8006e56:	4604      	mov	r4, r0
 8006e58:	bb28      	cbnz	r0, 8006ea6 <dir_register+0x5a>
			res = move_window(fs, dp->sect);
 8006e5a:	69e9      	ldr	r1, [r5, #28]
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	f7ff fb5b 	bl	8006518 <move_window>
			if (res != FR_OK) break;
 8006e62:	4604      	mov	r4, r0
 8006e64:	b9f8      	cbnz	r0, 8006ea6 <dir_register+0x5a>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006e66:	6a2b      	ldr	r3, [r5, #32]
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	2be5      	cmp	r3, #229	; 0xe5
 8006e6c:	d114      	bne.n	8006e98 <dir_register+0x4c>
		res = move_window(fs, dp->sect);
 8006e6e:	69e9      	ldr	r1, [r5, #28]
 8006e70:	4630      	mov	r0, r6
 8006e72:	f7ff fb51 	bl	8006518 <move_window>
		if (res == FR_OK) {
 8006e76:	4604      	mov	r4, r0
 8006e78:	b960      	cbnz	r0, 8006e94 <dir_register+0x48>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006e7a:	4601      	mov	r1, r0
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	6a28      	ldr	r0, [r5, #32]
 8006e80:	f7ff fa08 	bl	8006294 <mem_set>
	if (cnt) {
 8006e84:	6a28      	ldr	r0, [r5, #32]
 8006e86:	220b      	movs	r2, #11
 8006e88:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8006e8c:	f7ff fb0f 	bl	80064ae <mem_cpy.part.0>
			fs->wflag = 1;
 8006e90:	2301      	movs	r3, #1
 8006e92:	70f3      	strb	r3, [r6, #3]
}
 8006e94:	4620      	mov	r0, r4
 8006e96:	bd70      	pop	{r4, r5, r6, pc}
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0e8      	beq.n	8006e6e <dir_register+0x22>
			res = dir_next(dp, 1);
 8006e9c:	2101      	movs	r1, #1
 8006e9e:	4628      	mov	r0, r5
 8006ea0:	f7ff fea0 	bl	8006be4 <dir_next>
 8006ea4:	e7d7      	b.n	8006e56 <dir_register+0xa>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006ea6:	2c04      	cmp	r4, #4
 8006ea8:	bf08      	it	eq
 8006eaa:	2407      	moveq	r4, #7
 8006eac:	e7f2      	b.n	8006e94 <dir_register+0x48>
	...

08006eb0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006eb0:	b530      	push	{r4, r5, lr}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	e9cd 1000 	strd	r1, r0, [sp]
	FRESULT res;
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006eb8:	a803      	add	r0, sp, #12
{
 8006eba:	4614      	mov	r4, r2
	const TCHAR *rp = path;
 8006ebc:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 8006ebe:	f7ff fabf 	bl	8006440 <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	db19      	blt.n	8006efa <f_mount+0x4a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006ec6:	490f      	ldr	r1, [pc, #60]	; (8006f04 <f_mount+0x54>)
 8006ec8:	0085      	lsls	r5, r0, #2
 8006eca:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8006ece:	6a00      	ldr	r0, [r0, #32]

	if (cfs) {
 8006ed0:	b118      	cbz	r0, 8006eda <f_mount+0x2a>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006ed2:	f7ff fa7f 	bl	80063d4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	7003      	strb	r3, [r0, #0]
	}

	if (fs) {
 8006eda:	9801      	ldr	r0, [sp, #4]
 8006edc:	b108      	cbz	r0, 8006ee2 <f_mount+0x32>
		fs->fs_type = 0;				/* Clear new fs object */
 8006ede:	2300      	movs	r3, #0
 8006ee0:	7003      	strb	r3, [r0, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006ee2:	4429      	add	r1, r5
 8006ee4:	6208      	str	r0, [r1, #32]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006ee6:	b130      	cbz	r0, 8006ef6 <f_mount+0x46>
 8006ee8:	2c01      	cmp	r4, #1
 8006eea:	d108      	bne.n	8006efe <f_mount+0x4e>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006eec:	2200      	movs	r2, #0
 8006eee:	a901      	add	r1, sp, #4
 8006ef0:	4668      	mov	r0, sp
 8006ef2:	f7ff fb65 	bl	80065c0 <find_volume>
	LEAVE_FF(fs, res);
}
 8006ef6:	b005      	add	sp, #20
 8006ef8:	bd30      	pop	{r4, r5, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 8006efa:	200b      	movs	r0, #11
 8006efc:	e7fb      	b.n	8006ef6 <f_mount+0x46>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006efe:	2000      	movs	r0, #0
 8006f00:	e7f9      	b.n	8006ef6 <f_mount+0x46>
 8006f02:	bf00      	nop
 8006f04:	20001160 	.word	0x20001160

08006f08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0c:	b090      	sub	sp, #64	; 0x40
 8006f0e:	4617      	mov	r7, r2
 8006f10:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006f12:	4604      	mov	r4, r0
 8006f14:	2800      	cmp	r0, #0
 8006f16:	f000 80f2 	beq.w	80070fe <f_open+0x1f6>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006f1a:	f002 053f 	and.w	r5, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8006f1e:	462a      	mov	r2, r5
 8006f20:	a903      	add	r1, sp, #12
 8006f22:	a801      	add	r0, sp, #4
 8006f24:	f7ff fb4c 	bl	80065c0 <find_volume>
	if (res == FR_OK) {
 8006f28:	4606      	mov	r6, r0
 8006f2a:	2800      	cmp	r0, #0
 8006f2c:	d15c      	bne.n	8006fe8 <f_open+0xe0>
		dj.obj.fs = fs;
 8006f2e:	9b03      	ldr	r3, [sp, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006f30:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8006f32:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006f34:	a804      	add	r0, sp, #16
 8006f36:	f7ff fecb 	bl	8006cd0 <follow_path>
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006f3a:	b958      	cbnz	r0, 8006f54 <f_open+0x4c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006f3c:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	db58      	blt.n	8006ff6 <f_open+0xee>
				res = FR_INVALID_NAME;
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006f44:	f015 0f3e 	tst.w	r5, #62	; 0x3e
 8006f48:	bf14      	ite	ne
 8006f4a:	2101      	movne	r1, #1
 8006f4c:	2100      	moveq	r1, #0
 8006f4e:	a804      	add	r0, sp, #16
 8006f50:	f7ff f9a6 	bl	80062a0 <chk_lock>
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006f54:	f017 0f1c 	tst.w	r7, #28
 8006f58:	d06d      	beq.n	8007036 <f_open+0x12e>
			if (res != FR_OK) {					/* No file, create new */
 8006f5a:	2800      	cmp	r0, #0
 8006f5c:	d04d      	beq.n	8006ffa <f_open+0xf2>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006f5e:	2804      	cmp	r0, #4
 8006f60:	d142      	bne.n	8006fe8 <f_open+0xe0>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006f62:	4b68      	ldr	r3, [pc, #416]	; (8007104 <f_open+0x1fc>)
 8006f64:	681a      	ldr	r2, [r3, #0]
 8006f66:	b11a      	cbz	r2, 8006f70 <f_open+0x68>
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f040 80c1 	bne.w	80070f2 <f_open+0x1ea>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006f70:	a804      	add	r0, sp, #16
 8006f72:	f7ff ff6b 	bl	8006e4c <dir_register>
					res = FR_DENIED;
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006f76:	2800      	cmp	r0, #0
 8006f78:	d136      	bne.n	8006fe8 <f_open+0xe0>
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006f7a:	f045 0508 	orr.w	r5, r5, #8
				dw = GET_FATTIME();
 8006f7e:	f7ff f97d 	bl	800627c <get_fattime>
 8006f82:	4601      	mov	r1, r0
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006f84:	9000      	str	r0, [sp, #0]
 8006f86:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f88:	300e      	adds	r0, #14
 8006f8a:	f7ff f97b 	bl	8006284 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006f8e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006f90:	9900      	ldr	r1, [sp, #0]
 8006f92:	3016      	adds	r0, #22
 8006f94:	f7ff f976 	bl	8006284 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006f98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006f9a:	f8dd 800c 	ldr.w	r8, [sp, #12]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006f9e:	2220      	movs	r2, #32
 8006fa0:	72da      	strb	r2, [r3, #11]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006fa2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006fa4:	f898 0000 	ldrb.w	r0, [r8]
 8006fa8:	f7ff fcfc 	bl	80069a4 <ld_clust.isra.0>
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006fac:	2200      	movs	r2, #0
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006fae:	4607      	mov	r7, r0
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006fb0:	4640      	mov	r0, r8
 8006fb2:	f7ff fa39 	bl	8006428 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006fb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8006fb8:	2200      	movs	r2, #0
 8006fba:	771a      	strb	r2, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fbc:	775a      	strb	r2, [r3, #29]
	*ptr++ = (BYTE)val; val >>= 8;
 8006fbe:	779a      	strb	r2, [r3, #30]
	*ptr++ = (BYTE)val;
 8006fc0:	77da      	strb	r2, [r3, #31]
					fs->wflag = 1;
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	2101      	movs	r1, #1
 8006fc6:	70d9      	strb	r1, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006fc8:	b307      	cbz	r7, 800700c <f_open+0x104>
						dw = fs->winsect;
						res = remove_chain(&dj.obj, cl, 0);
 8006fca:	4639      	mov	r1, r7
 8006fcc:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 8006fce:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
						res = remove_chain(&dj.obj, cl, 0);
 8006fd2:	f7ff fd77 	bl	8006ac4 <remove_chain>
						if (res == FR_OK) {
 8006fd6:	b938      	cbnz	r0, 8006fe8 <f_open+0xe0>
							res = move_window(fs, dw);
 8006fd8:	9803      	ldr	r0, [sp, #12]
 8006fda:	4641      	mov	r1, r8
 8006fdc:	f7ff fa9c 	bl	8006518 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	3f01      	subs	r7, #1
 8006fe4:	60df      	str	r7, [r3, #12]
						res = FR_DENIED;
					}
				}
			}
		}
		if (res == FR_OK) {
 8006fe6:	b188      	cbz	r0, 800700c <f_open+0x104>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006fe8:	2300      	movs	r3, #0
 8006fea:	6023      	str	r3, [r4, #0]
 8006fec:	4606      	mov	r6, r0

	LEAVE_FF(fs, res);
}
 8006fee:	4630      	mov	r0, r6
 8006ff0:	b010      	add	sp, #64	; 0x40
 8006ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				res = FR_INVALID_NAME;
 8006ff6:	2006      	movs	r0, #6
 8006ff8:	e7ac      	b.n	8006f54 <f_open+0x4c>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006ffa:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8006ffe:	f013 0f11 	tst.w	r3, #17
 8007002:	d122      	bne.n	800704a <f_open+0x142>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007004:	077b      	lsls	r3, r7, #29
 8007006:	d476      	bmi.n	80070f6 <f_open+0x1ee>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007008:	073f      	lsls	r7, r7, #28
 800700a:	d4b8      	bmi.n	8006f7e <f_open+0x76>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800700c:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800700e:	0728      	lsls	r0, r5, #28
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007012:	6263      	str	r3, [r4, #36]	; 0x24
				mode |= FA_MODIFIED;
 8007014:	bf48      	it	mi
 8007016:	f045 0540 	orrmi.w	r5, r5, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800701a:	f015 0ffe 	tst.w	r5, #254	; 0xfe
			fp->dir_ptr = dj.dir;
 800701e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007020:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007022:	bf14      	ite	ne
 8007024:	2101      	movne	r1, #1
 8007026:	2100      	moveq	r1, #0
 8007028:	a804      	add	r0, sp, #16
 800702a:	f7ff f973 	bl	8006314 <inc_lock>
 800702e:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007030:	b968      	cbnz	r0, 800704e <f_open+0x146>
 8007032:	2002      	movs	r0, #2
 8007034:	e7d8      	b.n	8006fe8 <f_open+0xe0>
			if (res == FR_OK) {					/* Following succeeded */
 8007036:	2800      	cmp	r0, #0
 8007038:	d1d6      	bne.n	8006fe8 <f_open+0xe0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800703a:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800703e:	06d8      	lsls	r0, r3, #27
 8007040:	d45b      	bmi.n	80070fa <f_open+0x1f2>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007042:	07ba      	lsls	r2, r7, #30
 8007044:	d5e2      	bpl.n	800700c <f_open+0x104>
 8007046:	07df      	lsls	r7, r3, #31
 8007048:	d5e0      	bpl.n	800700c <f_open+0x104>
					res = FR_DENIED;
 800704a:	2007      	movs	r0, #7
 800704c:	e7cc      	b.n	8006fe8 <f_open+0xe0>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800704e:	9f03      	ldr	r7, [sp, #12]
 8007050:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007052:	7838      	ldrb	r0, [r7, #0]
 8007054:	f7ff fca6 	bl	80069a4 <ld_clust.isra.0>
 8007058:	60a0      	str	r0, [r4, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800705a:	f101 001c 	add.w	r0, r1, #28
 800705e:	f7ff f90f 	bl	8006280 <ld_dword>
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007062:	2100      	movs	r1, #0
			fp->obj.id = fs->id;
 8007064:	88fb      	ldrh	r3, [r7, #6]
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007066:	6027      	str	r7, [r4, #0]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007068:	f104 0730 	add.w	r7, r4, #48	; 0x30
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800706c:	60e0      	str	r0, [r4, #12]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800706e:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007072:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.id = fs->id;
 8007074:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 8007076:	7525      	strb	r5, [r4, #20]
			fp->err = 0;			/* Clear error flag */
 8007078:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800707a:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800707c:	61a1      	str	r1, [r4, #24]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800707e:	4638      	mov	r0, r7
 8007080:	f7ff f908 	bl	8006294 <mem_set>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007084:	06aa      	lsls	r2, r5, #26
 8007086:	d5b2      	bpl.n	8006fee <f_open+0xe6>
 8007088:	f8d4 800c 	ldr.w	r8, [r4, #12]
 800708c:	f1b8 0f00 	cmp.w	r8, #0
 8007090:	d0ad      	beq.n	8006fee <f_open+0xe6>
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007092:	9b03      	ldr	r3, [sp, #12]
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007094:	68a1      	ldr	r1, [r4, #8]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007096:	895d      	ldrh	r5, [r3, #10]
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007098:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800709c:	026d      	lsls	r5, r5, #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800709e:	4545      	cmp	r5, r8
 80070a0:	d319      	bcc.n	80070d6 <f_open+0x1ce>
 80070a2:	2000      	movs	r0, #0
				fp->clust = clst;
 80070a4:	61e1      	str	r1, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80070a6:	2800      	cmp	r0, #0
 80070a8:	d19e      	bne.n	8006fe8 <f_open+0xe0>
 80070aa:	f3c8 0308 	ubfx	r3, r8, #0, #9
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d09d      	beq.n	8006fee <f_open+0xe6>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80070b2:	9d03      	ldr	r5, [sp, #12]
 80070b4:	4628      	mov	r0, r5
 80070b6:	f7ff f99b 	bl	80063f0 <clust2sect>
 80070ba:	2800      	cmp	r0, #0
 80070bc:	d0b9      	beq.n	8007032 <f_open+0x12a>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80070be:	eb00 2258 	add.w	r2, r0, r8, lsr #9
 80070c2:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80070c4:	7868      	ldrb	r0, [r5, #1]
 80070c6:	2301      	movs	r3, #1
 80070c8:	4639      	mov	r1, r7
 80070ca:	f7ff f8ad 	bl	8006228 <disk_read>
 80070ce:	2800      	cmp	r0, #0
 80070d0:	d08d      	beq.n	8006fee <f_open+0xe6>
 80070d2:	2001      	movs	r0, #1
 80070d4:	e788      	b.n	8006fe8 <f_open+0xe0>
					clst = get_fat(&fp->obj, clst);
 80070d6:	6820      	ldr	r0, [r4, #0]
 80070d8:	f7ff fc6c 	bl	80069b4 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 80070dc:	2801      	cmp	r0, #1
					clst = get_fat(&fp->obj, clst);
 80070de:	4601      	mov	r1, r0
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80070e0:	eba8 0805 	sub.w	r8, r8, r5
					if (clst <= 1) res = FR_INT_ERR;
 80070e4:	d903      	bls.n	80070ee <f_open+0x1e6>
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80070e6:	1c43      	adds	r3, r0, #1
 80070e8:	d1d9      	bne.n	800709e <f_open+0x196>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80070ea:	2001      	movs	r0, #1
 80070ec:	e7da      	b.n	80070a4 <f_open+0x19c>
					if (clst <= 1) res = FR_INT_ERR;
 80070ee:	2002      	movs	r0, #2
 80070f0:	e7d8      	b.n	80070a4 <f_open+0x19c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80070f2:	2012      	movs	r0, #18
 80070f4:	e778      	b.n	8006fe8 <f_open+0xe0>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80070f6:	2008      	movs	r0, #8
 80070f8:	e776      	b.n	8006fe8 <f_open+0xe0>
					res = FR_NO_FILE;
 80070fa:	2004      	movs	r0, #4
 80070fc:	e774      	b.n	8006fe8 <f_open+0xe0>
	if (!fp) return FR_INVALID_OBJECT;
 80070fe:	2609      	movs	r6, #9
 8007100:	e775      	b.n	8006fee <f_open+0xe6>
 8007102:	bf00      	nop
 8007104:	20001160 	.word	0x20001160

08007108 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800710c:	4699      	mov	r9, r3
 800710e:	b085      	sub	sp, #20
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 8007110:	2300      	movs	r3, #0
{
 8007112:	4688      	mov	r8, r1
	*bw = 0;	/* Clear write byte counter */
 8007114:	f8c9 3000 	str.w	r3, [r9]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007118:	a903      	add	r1, sp, #12
{
 800711a:	4604      	mov	r4, r0
 800711c:	4616      	mov	r6, r2
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800711e:	f7ff f9ac 	bl	800647a <validate>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007122:	4605      	mov	r5, r0
 8007124:	bb50      	cbnz	r0, 800717c <f_write+0x74>
 8007126:	7d65      	ldrb	r5, [r4, #21]
 8007128:	bb45      	cbnz	r5, 800717c <f_write+0x74>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800712a:	7d23      	ldrb	r3, [r4, #20]
 800712c:	079a      	lsls	r2, r3, #30
 800712e:	f140 80b0 	bpl.w	8007292 <f_write+0x18a>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007132:	69a3      	ldr	r3, [r4, #24]
 8007134:	42f3      	cmn	r3, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007136:	bf28      	it	cs
 8007138:	43de      	mvncs	r6, r3
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800713a:	f104 0a30 	add.w	sl, r4, #48	; 0x30
	for ( ;  btw;							/* Repeat until all data written */
 800713e:	b1ce      	cbz	r6, 8007174 <f_write+0x6c>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007140:	69a1      	ldr	r1, [r4, #24]
 8007142:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8007146:	2b00      	cmp	r3, #0
 8007148:	f040 8091 	bne.w	800726e <f_write+0x166>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800714c:	9b03      	ldr	r3, [sp, #12]
 800714e:	895f      	ldrh	r7, [r3, #10]
 8007150:	3f01      	subs	r7, #1
			if (csect == 0) {				/* On the cluster boundary? */
 8007152:	ea17 2751 	ands.w	r7, r7, r1, lsr #9
 8007156:	d124      	bne.n	80071a2 <f_write+0x9a>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007158:	b931      	cbnz	r1, 8007168 <f_write+0x60>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800715a:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800715c:	b9a0      	cbnz	r0, 8007188 <f_write+0x80>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800715e:	4601      	mov	r1, r0
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007160:	4620      	mov	r0, r4
 8007162:	f7ff fce7 	bl	8006b34 <create_chain>
 8007166:	e004      	b.n	8007172 <f_write+0x6a>
					if (fp->cltbl) {
 8007168:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800716a:	b15b      	cbz	r3, 8007184 <f_write+0x7c>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800716c:	4620      	mov	r0, r4
 800716e:	f7ff f94a 	bl	8006406 <clmt_clust>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007172:	b948      	cbnz	r0, 8007188 <f_write+0x80>
		fp->flag |= FA_DIRTY;
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007174:	7d23      	ldrb	r3, [r4, #20]
 8007176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800717a:	7523      	strb	r3, [r4, #20]

	LEAVE_FF(fs, FR_OK);
}
 800717c:	4628      	mov	r0, r5
 800717e:	b005      	add	sp, #20
 8007180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007184:	69e1      	ldr	r1, [r4, #28]
 8007186:	e7eb      	b.n	8007160 <f_write+0x58>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007188:	2801      	cmp	r0, #1
 800718a:	d102      	bne.n	8007192 <f_write+0x8a>
 800718c:	2502      	movs	r5, #2
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800718e:	7565      	strb	r5, [r4, #21]
 8007190:	e7f4      	b.n	800717c <f_write+0x74>
 8007192:	1c43      	adds	r3, r0, #1
 8007194:	d101      	bne.n	800719a <f_write+0x92>
 8007196:	2501      	movs	r5, #1
 8007198:	e7f9      	b.n	800718e <f_write+0x86>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800719a:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800719c:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800719e:	b903      	cbnz	r3, 80071a2 <f_write+0x9a>
 80071a0:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80071a2:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	da0c      	bge.n	80071c4 <f_write+0xbc>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071aa:	9803      	ldr	r0, [sp, #12]
 80071ac:	6a22      	ldr	r2, [r4, #32]
 80071ae:	7840      	ldrb	r0, [r0, #1]
 80071b0:	2301      	movs	r3, #1
 80071b2:	4651      	mov	r1, sl
 80071b4:	f7ff f846 	bl	8006244 <disk_write>
 80071b8:	2800      	cmp	r0, #0
 80071ba:	d1ec      	bne.n	8007196 <f_write+0x8e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80071bc:	7d23      	ldrb	r3, [r4, #20]
 80071be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071c2:	7523      	strb	r3, [r4, #20]
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80071c4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80071c8:	69e1      	ldr	r1, [r4, #28]
 80071ca:	4658      	mov	r0, fp
 80071cc:	f7ff f910 	bl	80063f0 <clust2sect>
			if (!sect) ABORT(fs, FR_INT_ERR);
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d0db      	beq.n	800718c <f_write+0x84>
			if (cc) {						/* Write maximum contiguous sectors directly */
 80071d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 80071d8:	eb07 0200 	add.w	r2, r7, r0
			if (cc) {						/* Write maximum contiguous sectors directly */
 80071dc:	d335      	bcc.n	800724a <f_write+0x142>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80071de:	f8bb 100a 	ldrh.w	r1, [fp, #10]
 80071e2:	eb07 2056 	add.w	r0, r7, r6, lsr #9
 80071e6:	4288      	cmp	r0, r1
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80071e8:	ea4f 2356 	mov.w	r3, r6, lsr #9
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071ec:	f89b 0001 	ldrb.w	r0, [fp, #1]
					cc = fs->csize - csect;
 80071f0:	bf88      	it	hi
 80071f2:	1bcb      	subhi	r3, r1, r7
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80071f4:	4641      	mov	r1, r8
 80071f6:	e9cd 2300 	strd	r2, r3, [sp]
 80071fa:	f7ff f823 	bl	8006244 <disk_write>
 80071fe:	2800      	cmp	r0, #0
 8007200:	d1c9      	bne.n	8007196 <f_write+0x8e>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007202:	6a21      	ldr	r1, [r4, #32]
 8007204:	9a00      	ldr	r2, [sp, #0]
 8007206:	9b01      	ldr	r3, [sp, #4]
 8007208:	1a89      	subs	r1, r1, r2
 800720a:	4299      	cmp	r1, r3
 800720c:	d20c      	bcs.n	8007228 <f_write+0x120>
 800720e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007212:	eb08 2141 	add.w	r1, r8, r1, lsl #9
 8007216:	4650      	mov	r0, sl
 8007218:	9300      	str	r3, [sp, #0]
	if (cnt) {
 800721a:	f7ff f948 	bl	80064ae <mem_cpy.part.0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800721e:	7d22      	ldrb	r2, [r4, #20]
 8007220:	9b00      	ldr	r3, [sp, #0]
 8007222:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007226:	7522      	strb	r2, [r4, #20]
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007228:	025f      	lsls	r7, r3, #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800722a:	69a3      	ldr	r3, [r4, #24]
 800722c:	68e2      	ldr	r2, [r4, #12]
 800722e:	443b      	add	r3, r7
 8007230:	61a3      	str	r3, [r4, #24]
 8007232:	429a      	cmp	r2, r3
 8007234:	bf2c      	ite	cs
 8007236:	60e2      	strcs	r2, [r4, #12]
 8007238:	60e3      	strcc	r3, [r4, #12]
 800723a:	f8d9 3000 	ldr.w	r3, [r9]
 800723e:	443b      	add	r3, r7
 8007240:	44b8      	add	r8, r7
 8007242:	f8c9 3000 	str.w	r3, [r9]
 8007246:	1bf6      	subs	r6, r6, r7
 8007248:	e779      	b.n	800713e <f_write+0x36>
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800724a:	6a23      	ldr	r3, [r4, #32]
 800724c:	4293      	cmp	r3, r2
 800724e:	d00d      	beq.n	800726c <f_write+0x164>
 8007250:	68e1      	ldr	r1, [r4, #12]
 8007252:	69a3      	ldr	r3, [r4, #24]
 8007254:	4299      	cmp	r1, r3
 8007256:	d909      	bls.n	800726c <f_write+0x164>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007258:	f89b 0001 	ldrb.w	r0, [fp, #1]
 800725c:	9200      	str	r2, [sp, #0]
 800725e:	2301      	movs	r3, #1
 8007260:	4651      	mov	r1, sl
 8007262:	f7fe ffe1 	bl	8006228 <disk_read>
				fp->fptr < fp->obj.objsize &&
 8007266:	9a00      	ldr	r2, [sp, #0]
 8007268:	2800      	cmp	r0, #0
 800726a:	d194      	bne.n	8007196 <f_write+0x8e>
			fp->sect = sect;
 800726c:	6222      	str	r2, [r4, #32]
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800726e:	69a0      	ldr	r0, [r4, #24]
 8007270:	f3c0 0008 	ubfx	r0, r0, #0, #9
 8007274:	f5c0 7700 	rsb	r7, r0, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007278:	42b7      	cmp	r7, r6
 800727a:	bf28      	it	cs
 800727c:	4637      	movcs	r7, r6
	if (cnt) {
 800727e:	463a      	mov	r2, r7
 8007280:	4641      	mov	r1, r8
 8007282:	4450      	add	r0, sl
 8007284:	f7ff f913 	bl	80064ae <mem_cpy.part.0>
		fp->flag |= FA_DIRTY;
 8007288:	7d23      	ldrb	r3, [r4, #20]
 800728a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800728e:	7523      	strb	r3, [r4, #20]
 8007290:	e7cb      	b.n	800722a <f_write+0x122>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007292:	2507      	movs	r5, #7
 8007294:	e772      	b.n	800717c <f_write+0x74>

08007296 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007296:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007298:	a901      	add	r1, sp, #4
{
 800729a:	4605      	mov	r5, r0
	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800729c:	f7ff f8ed 	bl	800647a <validate>
	if (res == FR_OK) {
 80072a0:	4604      	mov	r4, r0
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d13b      	bne.n	800731e <f_sync+0x88>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80072a6:	7d2b      	ldrb	r3, [r5, #20]
 80072a8:	f013 0440 	ands.w	r4, r3, #64	; 0x40
 80072ac:	d037      	beq.n	800731e <f_sync+0x88>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80072ae:	061b      	lsls	r3, r3, #24
 80072b0:	d50c      	bpl.n	80072cc <f_sync+0x36>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80072b2:	9801      	ldr	r0, [sp, #4]
 80072b4:	6a2a      	ldr	r2, [r5, #32]
 80072b6:	7840      	ldrb	r0, [r0, #1]
 80072b8:	2301      	movs	r3, #1
 80072ba:	f105 0130 	add.w	r1, r5, #48	; 0x30
 80072be:	f7fe ffc1 	bl	8006244 <disk_write>
 80072c2:	bb78      	cbnz	r0, 8007324 <f_sync+0x8e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80072c4:	7d2b      	ldrb	r3, [r5, #20]
 80072c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ca:	752b      	strb	r3, [r5, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80072cc:	f7fe ffd6 	bl	800627c <get_fattime>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80072d0:	6a69      	ldr	r1, [r5, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 80072d2:	4607      	mov	r7, r0
				res = move_window(fs, fp->dir_sect);
 80072d4:	9801      	ldr	r0, [sp, #4]
 80072d6:	f7ff f91f 	bl	8006518 <move_window>
				if (res == FR_OK) {
 80072da:	4604      	mov	r4, r0
 80072dc:	b9f8      	cbnz	r0, 800731e <f_sync+0x88>
					dir = fp->dir_ptr;
 80072de:	6aae      	ldr	r6, [r5, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80072e0:	7af3      	ldrb	r3, [r6, #11]
 80072e2:	f043 0320 	orr.w	r3, r3, #32
 80072e6:	72f3      	strb	r3, [r6, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80072e8:	68aa      	ldr	r2, [r5, #8]
 80072ea:	6828      	ldr	r0, [r5, #0]
 80072ec:	4631      	mov	r1, r6
 80072ee:	f7ff f89b 	bl	8006428 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80072f2:	68e9      	ldr	r1, [r5, #12]
 80072f4:	f106 001c 	add.w	r0, r6, #28
 80072f8:	f7fe ffc4 	bl	8006284 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80072fc:	4639      	mov	r1, r7
 80072fe:	f106 0016 	add.w	r0, r6, #22
 8007302:	f7fe ffbf 	bl	8006284 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
					fs->wflag = 1;
 8007306:	9801      	ldr	r0, [sp, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 8007308:	74b4      	strb	r4, [r6, #18]
					fs->wflag = 1;
 800730a:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 800730c:	74f4      	strb	r4, [r6, #19]
					fs->wflag = 1;
 800730e:	70c3      	strb	r3, [r0, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007310:	f7ff fafd 	bl	800690e <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007314:	7d2b      	ldrb	r3, [r5, #20]
 8007316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
					res = sync_fs(fs);					/* Restore it to the directory */
 800731a:	4604      	mov	r4, r0
					fp->flag &= (BYTE)~FA_MODIFIED;
 800731c:	752b      	strb	r3, [r5, #20]
			}
		}
	}

	LEAVE_FF(fs, res);
}
 800731e:	4620      	mov	r0, r4
 8007320:	b003      	add	sp, #12
 8007322:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007324:	2401      	movs	r4, #1
 8007326:	e7fa      	b.n	800731e <f_sync+0x88>

08007328 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007328:	b513      	push	{r0, r1, r4, lr}
 800732a:	4604      	mov	r4, r0
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800732c:	f7ff ffb3 	bl	8007296 <f_sync>
	if (res == FR_OK)
 8007330:	b948      	cbnz	r0, 8007346 <f_close+0x1e>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007332:	a901      	add	r1, sp, #4
 8007334:	4620      	mov	r0, r4
 8007336:	f7ff f8a0 	bl	800647a <validate>
		if (res == FR_OK) {
 800733a:	b920      	cbnz	r0, 8007346 <f_close+0x1e>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800733c:	6920      	ldr	r0, [r4, #16]
 800733e:	f7ff f82b 	bl	8006398 <dec_lock>
			if (res == FR_OK)
 8007342:	b900      	cbnz	r0, 8007346 <f_close+0x1e>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007344:	6020      	str	r0, [r4, #0]
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8007346:	b002      	add	sp, #8
 8007348:	bd10      	pop	{r4, pc}
	...

0800734c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800734c:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800734e:	4b0f      	ldr	r3, [pc, #60]	; (800738c <FATFS_LinkDriverEx+0x40>)
 8007350:	7b9c      	ldrb	r4, [r3, #14]
 8007352:	2c01      	cmp	r4, #1
 8007354:	d817      	bhi.n	8007386 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007356:	7b9d      	ldrb	r5, [r3, #14]
 8007358:	b2ed      	uxtb	r5, r5
 800735a:	2400      	movs	r4, #0
 800735c:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 800735e:	7b9d      	ldrb	r5, [r3, #14]
 8007360:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8007364:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8007366:	7b98      	ldrb	r0, [r3, #14]
 8007368:	4418      	add	r0, r3
 800736a:	7302      	strb	r2, [r0, #12]
    DiskNum = disk.nbr++;
 800736c:	7b9a      	ldrb	r2, [r3, #14]
 800736e:	1c50      	adds	r0, r2, #1
 8007370:	b2c0      	uxtb	r0, r0
 8007372:	7398      	strb	r0, [r3, #14]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8007374:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8007376:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 8007378:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800737a:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800737c:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 800737e:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8007380:	70cc      	strb	r4, [r1, #3]
 8007382:	4620      	mov	r0, r4
    ret = 0;
  }

  return ret;
}
 8007384:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8007386:	2001      	movs	r0, #1
 8007388:	e7fc      	b.n	8007384 <FATFS_LinkDriverEx+0x38>
 800738a:	bf00      	nop
 800738c:	2000118c 	.word	0x2000118c

08007390 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8007390:	2200      	movs	r2, #0
 8007392:	f7ff bfdb 	b.w	800734c <FATFS_LinkDriverEx>

08007396 <USBH_initialize>:
DSTATUS USBH_initialize(BYTE lun)
{
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
}
 8007396:	2000      	movs	r0, #0
 8007398:	4770      	bx	lr
	...

0800739c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800739c:	4601      	mov	r1, r0
 800739e:	b508      	push	{r3, lr}
  DRESULT res = RES_ERROR;

  if(USBH_MSC_UnitIsReady(&hUSBHost, lun))
 80073a0:	4803      	ldr	r0, [pc, #12]	; (80073b0 <USBH_status+0x14>)
 80073a2:	f000 faca 	bl	800793a <USBH_MSC_UnitIsReady>
  {
    res = RES_ERROR;
  }

  return res;
}
 80073a6:	fab0 f080 	clz	r0, r0
 80073aa:	0940      	lsrs	r0, r0, #5
 80073ac:	bd08      	pop	{r3, pc}
 80073ae:	bf00      	nop
 80073b0:	200006d4 	.word	0x200006d4

080073b4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80073b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b8:	4617      	mov	r7, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;
  USBH_StatusTypeDef  status = USBH_OK;

  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 80073ba:	078a      	lsls	r2, r1, #30
{
 80073bc:	b090      	sub	sp, #64	; 0x40
 80073be:	4605      	mov	r5, r0
 80073c0:	460e      	mov	r6, r1
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 80073c2:	d032      	beq.n	800742a <USBH_read+0x76>
 80073c4:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8007444 <USBH_read+0x90>
 80073c8:	f8d8 24d0 	ldr.w	r2, [r8, #1232]	; 0x4d0
 80073cc:	6912      	ldr	r2, [r2, #16]
 80073ce:	b362      	cbz	r2, 800742a <USBH_read+0x76>
  {
    while ((count--)&&(status == USBH_OK))
    {
      status = USBH_MSC_Read(&hUSBHost, lun, sector + count, (uint8_t *)scratch, 1);
 80073d0:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8007448 <USBH_read+0x94>
 80073d4:	1e5c      	subs	r4, r3, #1
 80073d6:	f04f 0a01 	mov.w	sl, #1
    while ((count--)&&(status == USBH_OK))
 80073da:	1c63      	adds	r3, r4, #1
 80073dc:	d101      	bne.n	80073e2 <USBH_read+0x2e>
    status = USBH_MSC_Read(&hUSBHost, lun, sector, buff, count);
  }

  if(status == USBH_OK)
  {
    res = RES_OK;
 80073de:	2000      	movs	r0, #0
 80073e0:	e017      	b.n	8007412 <USBH_read+0x5e>
      status = USBH_MSC_Read(&hUSBHost, lun, sector + count, (uint8_t *)scratch, 1);
 80073e2:	f8cd a000 	str.w	sl, [sp]
 80073e6:	464b      	mov	r3, r9
 80073e8:	193a      	adds	r2, r7, r4
 80073ea:	4629      	mov	r1, r5
 80073ec:	4640      	mov	r0, r8
 80073ee:	f000 facc 	bl	800798a <USBH_MSC_Read>
      if(status == USBH_OK)
 80073f2:	b188      	cbz	r0, 8007418 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
 80073f4:	4813      	ldr	r0, [pc, #76]	; (8007444 <USBH_read+0x90>)
 80073f6:	aa03      	add	r2, sp, #12
 80073f8:	4629      	mov	r1, r5
 80073fa:	f000 faaf 	bl	800795c <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80073fe:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8007402:	2b28      	cmp	r3, #40	; 0x28
 8007404:	d01b      	beq.n	800743e <USBH_read+0x8a>
 8007406:	2b3a      	cmp	r3, #58	; 0x3a
 8007408:	d019      	beq.n	800743e <USBH_read+0x8a>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800740a:	2b04      	cmp	r3, #4
 800740c:	bf14      	ite	ne
 800740e:	2001      	movne	r0, #1
 8007410:	2003      	moveq	r0, #3
      break;
    }
  }

  return res;
}
 8007412:	b010      	add	sp, #64	; 0x40
 8007414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        memcpy (&buff[count * _MAX_SS] ,scratch, _MAX_SS);
 8007418:	eb06 2044 	add.w	r0, r6, r4, lsl #9
 800741c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007420:	4649      	mov	r1, r9
 8007422:	f001 fba1 	bl	8008b68 <memcpy>
 8007426:	3c01      	subs	r4, #1
 8007428:	e7d7      	b.n	80073da <USBH_read+0x26>
    status = USBH_MSC_Read(&hUSBHost, lun, sector, buff, count);
 800742a:	9300      	str	r3, [sp, #0]
 800742c:	4805      	ldr	r0, [pc, #20]	; (8007444 <USBH_read+0x90>)
 800742e:	4633      	mov	r3, r6
 8007430:	463a      	mov	r2, r7
 8007432:	4629      	mov	r1, r5
 8007434:	f000 faa9 	bl	800798a <USBH_MSC_Read>
  if(status == USBH_OK)
 8007438:	2800      	cmp	r0, #0
 800743a:	d0d0      	beq.n	80073de <USBH_read+0x2a>
 800743c:	e7da      	b.n	80073f4 <USBH_read+0x40>
      res = RES_NOTRDY;
 800743e:	2003      	movs	r0, #3
 8007440:	e7e7      	b.n	8007412 <USBH_read+0x5e>
 8007442:	bf00      	nop
 8007444:	200006d4 	.word	0x200006d4
 8007448:	2000119c 	.word	0x2000119c

0800744c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800744c:	b510      	push	{r4, lr}
 800744e:	4603      	mov	r3, r0
 8007450:	b08e      	sub	sp, #56	; 0x38
 8007452:	4608      	mov	r0, r1
 8007454:	4614      	mov	r4, r2
  DRESULT res = RES_ERROR;
  MSC_LUNTypeDef info;

  switch (cmd)
 8007456:	2903      	cmp	r1, #3
 8007458:	d803      	bhi.n	8007462 <USBH_ioctl+0x16>
 800745a:	e8df f001 	tbb	[pc, r1]
 800745e:	0503      	.short	0x0503
 8007460:	1a10      	.short	0x1a10
 8007462:	2004      	movs	r0, #4
  default:
    res = RES_PARERR;
  }

  return res;
}
 8007464:	b00e      	add	sp, #56	; 0x38
 8007466:	bd10      	pop	{r4, pc}
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 8007468:	480f      	ldr	r0, [pc, #60]	; (80074a8 <USBH_ioctl+0x5c>)
 800746a:	aa01      	add	r2, sp, #4
 800746c:	4619      	mov	r1, r3
 800746e:	f000 fa75 	bl	800795c <USBH_MSC_GetLUNInfo>
 8007472:	b108      	cbz	r0, 8007478 <USBH_ioctl+0x2c>
      res = RES_ERROR;
 8007474:	2001      	movs	r0, #1
 8007476:	e7f5      	b.n	8007464 <USBH_ioctl+0x18>
      *(DWORD*)buff = info.capacity.block_nbr;
 8007478:	9b02      	ldr	r3, [sp, #8]
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800747a:	6023      	str	r3, [r4, #0]
      res = RES_OK;
 800747c:	e7f2      	b.n	8007464 <USBH_ioctl+0x18>
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 800747e:	480a      	ldr	r0, [pc, #40]	; (80074a8 <USBH_ioctl+0x5c>)
 8007480:	aa01      	add	r2, sp, #4
 8007482:	4619      	mov	r1, r3
 8007484:	f000 fa6a 	bl	800795c <USBH_MSC_GetLUNInfo>
 8007488:	2800      	cmp	r0, #0
 800748a:	d1f3      	bne.n	8007474 <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size;
 800748c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8007490:	e7f3      	b.n	800747a <USBH_ioctl+0x2e>
    if(USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info) == USBH_OK)
 8007492:	4805      	ldr	r0, [pc, #20]	; (80074a8 <USBH_ioctl+0x5c>)
 8007494:	aa01      	add	r2, sp, #4
 8007496:	4619      	mov	r1, r3
 8007498:	f000 fa60 	bl	800795c <USBH_MSC_GetLUNInfo>
 800749c:	2800      	cmp	r0, #0
 800749e:	d1e9      	bne.n	8007474 <USBH_ioctl+0x28>
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80074a0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80074a4:	0a5b      	lsrs	r3, r3, #9
 80074a6:	e7e8      	b.n	800747a <USBH_ioctl+0x2e>
 80074a8:	200006d4 	.word	0x200006d4

080074ac <USBH_write>:
{
 80074ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80074b0:	4617      	mov	r7, r2
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 80074b2:	078a      	lsls	r2, r1, #30
{
 80074b4:	b091      	sub	sp, #68	; 0x44
 80074b6:	4605      	mov	r5, r0
 80074b8:	460e      	mov	r6, r1
  if (((DWORD)buff & 3) && (((HCD_HandleTypeDef *)hUSBHost.pData)->Init.dma_enable))
 80074ba:	d005      	beq.n	80074c8 <USBH_write+0x1c>
 80074bc:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8007544 <USBH_write+0x98>
 80074c0:	f8d8 24d0 	ldr.w	r2, [r8, #1232]	; 0x4d0
 80074c4:	6912      	ldr	r2, [r2, #16]
 80074c6:	bb7a      	cbnz	r2, 8007528 <USBH_write+0x7c>
    status = USBH_MSC_Write(&hUSBHost, lun, sector, (BYTE *)buff, count);
 80074c8:	9300      	str	r3, [sp, #0]
 80074ca:	463a      	mov	r2, r7
 80074cc:	4633      	mov	r3, r6
 80074ce:	4629      	mov	r1, r5
 80074d0:	481c      	ldr	r0, [pc, #112]	; (8007544 <USBH_write+0x98>)
 80074d2:	f000 fa9b 	bl	8007a0c <USBH_MSC_Write>
 80074d6:	e02d      	b.n	8007534 <USBH_write+0x88>
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 80074d8:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 80074dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074e0:	4648      	mov	r0, r9
 80074e2:	f001 fb41 	bl	8008b68 <memcpy>
      status = USBH_MSC_Write(&hUSBHost, lun, sector + count, (BYTE *)scratch, 1) ;
 80074e6:	2301      	movs	r3, #1
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	193a      	adds	r2, r7, r4
 80074ec:	464b      	mov	r3, r9
 80074ee:	4629      	mov	r1, r5
 80074f0:	4640      	mov	r0, r8
 80074f2:	f000 fa8b 	bl	8007a0c <USBH_MSC_Write>
      if(status == USBH_FAIL)
 80074f6:	2802      	cmp	r0, #2
 80074f8:	f104 34ff 	add.w	r4, r4, #4294967295
 80074fc:	d118      	bne.n	8007530 <USBH_write+0x84>
    USBH_MSC_GetLUNInfo(&hUSBHost, lun, &info);
 80074fe:	4811      	ldr	r0, [pc, #68]	; (8007544 <USBH_write+0x98>)
 8007500:	aa03      	add	r2, sp, #12
 8007502:	4629      	mov	r1, r5
 8007504:	f000 fa2a 	bl	800795c <USBH_MSC_GetLUNInfo>
    switch (info.sense.asc)
 8007508:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800750c:	2b27      	cmp	r3, #39	; 0x27
 800750e:	d014      	beq.n	800753a <USBH_write+0x8e>
 8007510:	d806      	bhi.n	8007520 <USBH_write+0x74>
 8007512:	2b04      	cmp	r3, #4
 8007514:	bf14      	ite	ne
 8007516:	2001      	movne	r0, #1
 8007518:	2003      	moveq	r0, #3
}
 800751a:	b011      	add	sp, #68	; 0x44
 800751c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    switch (info.sense.asc)
 8007520:	2b28      	cmp	r3, #40	; 0x28
 8007522:	d00c      	beq.n	800753e <USBH_write+0x92>
 8007524:	2b3a      	cmp	r3, #58	; 0x3a
 8007526:	e7f5      	b.n	8007514 <USBH_write+0x68>
      memcpy (scratch, &buff[count * _MAX_SS], _MAX_SS);
 8007528:	f8df 901c 	ldr.w	r9, [pc, #28]	; 8007548 <USBH_write+0x9c>
 800752c:	1e5c      	subs	r4, r3, #1
  USBH_StatusTypeDef  status = USBH_OK;
 800752e:	2000      	movs	r0, #0
    while (count--)
 8007530:	1c63      	adds	r3, r4, #1
 8007532:	d1d1      	bne.n	80074d8 <USBH_write+0x2c>
  if(status == USBH_OK)
 8007534:	2800      	cmp	r0, #0
 8007536:	d0f0      	beq.n	800751a <USBH_write+0x6e>
 8007538:	e7e1      	b.n	80074fe <USBH_write+0x52>
      res = RES_WRPRT;
 800753a:	2002      	movs	r0, #2
 800753c:	e7ed      	b.n	800751a <USBH_write+0x6e>
    switch (info.sense.asc)
 800753e:	2003      	movs	r0, #3
 8007540:	e7eb      	b.n	800751a <USBH_write+0x6e>
 8007542:	bf00      	nop
 8007544:	200006d4 	.word	0x200006d4
 8007548:	2000119c 	.word	0x2000119c

0800754c <USBH_MSC_SOFProcess>:
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
}
 800754c:	2000      	movs	r0, #0
 800754e:	4770      	bx	lr

08007550 <USBH_MSC_Process>:
{
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007552:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 8007556:	69dc      	ldr	r4, [r3, #28]
  switch (MSC_Handle->state)
 8007558:	7b23      	ldrb	r3, [r4, #12]
{
 800755a:	4607      	mov	r7, r0
  switch (MSC_Handle->state)
 800755c:	b123      	cbz	r3, 8007568 <USBH_MSC_Process+0x18>
 800755e:	2b01      	cmp	r3, #1
 8007560:	f000 80cf 	beq.w	8007702 <USBH_MSC_Process+0x1b2>
  USBH_StatusTypeDef error = USBH_BUSY;
 8007564:	2001      	movs	r0, #1
}
 8007566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8007568:	f8b4 10f8 	ldrh.w	r1, [r4, #248]	; 0xf8
 800756c:	7822      	ldrb	r2, [r4, #0]
 800756e:	428a      	cmp	r2, r1
 8007570:	f04f 0501 	mov.w	r5, #1
 8007574:	f240 80bd 	bls.w	80076f2 <USBH_MSC_Process+0x1a2>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8007578:	2634      	movs	r6, #52	; 0x34
 800757a:	fb06 4301 	mla	r3, r6, r1, r4
 800757e:	f883 5091 	strb.w	r5, [r3, #145]	; 0x91
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8007582:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8007586:	2b08      	cmp	r3, #8
 8007588:	d8ec      	bhi.n	8007564 <USBH_MSC_Process+0x14>
 800758a:	a201      	add	r2, pc, #4	; (adr r2, 8007590 <USBH_MSC_Process+0x40>)
 800758c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007590:	080075b5 	.word	0x080075b5
 8007594:	08007565 	.word	0x08007565
 8007598:	080075f7 	.word	0x080075f7
 800759c:	0800765d 	.word	0x0800765d
 80075a0:	080075c9 	.word	0x080075c9
 80075a4:	08007693 	.word	0x08007693
 80075a8:	08007565 	.word	0x08007565
 80075ac:	08007565 	.word	0x08007565
 80075b0:	080076eb 	.word	0x080076eb
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80075b4:	fb06 4101 	mla	r1, r6, r1, r4
 80075b8:	2304      	movs	r3, #4
 80075ba:	f881 3090 	strb.w	r3, [r1, #144]	; 0x90
            MSC_Handle->timer = phost->Timer;
 80075be:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	; 0x4c4
 80075c2:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
            break;
 80075c6:	e7cd      	b.n	8007564 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80075c8:	fb06 4201 	mla	r2, r6, r1, r4
 80075cc:	329f      	adds	r2, #159	; 0x9f
 80075ce:	b2c9      	uxtb	r1, r1
 80075d0:	f000 fbbe 	bl	8007d50 <USBH_MSC_SCSI_Inquiry>
            if (scsi_status == USBH_OK)
 80075d4:	b938      	cbnz	r0, 80075e6 <USBH_MSC_Process+0x96>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80075d6:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80075da:	fb06 4403 	mla	r4, r6, r3, r4
 80075de:	2302      	movs	r3, #2
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80075e0:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 80075e4:	e7be      	b.n	8007564 <USBH_MSC_Process+0x14>
            if (scsi_status == USBH_FAIL)
 80075e6:	2802      	cmp	r0, #2
 80075e8:	d14b      	bne.n	8007682 <USBH_MSC_Process+0x132>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80075ea:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80075ee:	fb06 4403 	mla	r4, r6, r3, r4
 80075f2:	2305      	movs	r3, #5
 80075f4:	e7f4      	b.n	80075e0 <USBH_MSC_Process+0x90>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 80075f6:	b2c9      	uxtb	r1, r1
 80075f8:	f000 fb52 	bl	8007ca0 <USBH_MSC_SCSI_TestUnitReady>
            if (ready_status == USBH_OK)
 80075fc:	b988      	cbnz	r0, 8007622 <USBH_MSC_Process+0xd2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80075fe:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 8007602:	2234      	movs	r2, #52	; 0x34
 8007604:	fb02 4403 	mla	r4, r2, r3, r4
 8007608:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 800760c:	3b00      	subs	r3, #0
 800760e:	bf18      	it	ne
 8007610:	2301      	movne	r3, #1
 8007612:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8007616:	2303      	movs	r3, #3
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8007618:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800761c:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
 8007620:	e7a0      	b.n	8007564 <USBH_MSC_Process+0x14>
            if (ready_status == USBH_FAIL)
 8007622:	2802      	cmp	r0, #2
 8007624:	d10e      	bne.n	8007644 <USBH_MSC_Process+0xf4>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8007626:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800762a:	2234      	movs	r2, #52	; 0x34
 800762c:	fb02 4403 	mla	r4, r2, r3, r4
 8007630:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8007634:	3b02      	subs	r3, #2
 8007636:	bf18      	it	ne
 8007638:	2301      	movne	r3, #1
 800763a:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800763e:	f240 1305 	movw	r3, #261	; 0x105
 8007642:	e7e9      	b.n	8007618 <USBH_MSC_Process+0xc8>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8007644:	2804      	cmp	r0, #4
 8007646:	d18d      	bne.n	8007564 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007648:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800764c:	2234      	movs	r2, #52	; 0x34
 800764e:	fb02 4403 	mla	r4, r2, r3, r4
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007652:	f240 2301 	movw	r3, #513	; 0x201
 8007656:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
 800765a:	e783      	b.n	8007564 <USBH_MSC_Process+0x14>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800765c:	fb06 4201 	mla	r2, r6, r1, r4
 8007660:	3294      	adds	r2, #148	; 0x94
 8007662:	b2c9      	uxtb	r1, r1
 8007664:	f000 fb3f 	bl	8007ce6 <USBH_MSC_SCSI_ReadCapacity>
            if (scsi_status == USBH_OK)
 8007668:	2800      	cmp	r0, #0
 800766a:	d1bc      	bne.n	80075e6 <USBH_MSC_Process+0x96>
              if (MSC_Handle->unit[MSC_Handle->current_lun].state_changed == 1U)
 800766c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007670:	fb06 4603 	mla	r6, r6, r3, r4
 8007674:	2001      	movs	r0, #1
 8007676:	f8a6 0090 	strh.w	r0, [r6, #144]	; 0x90
              MSC_Handle->current_lun++;
 800767a:	4403      	add	r3, r0
 800767c:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007680:	e771      	b.n	8007566 <USBH_MSC_Process+0x16>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8007682:	2804      	cmp	r0, #4
 8007684:	f47f af6e 	bne.w	8007564 <USBH_MSC_Process+0x14>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8007688:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 800768c:	fb06 4403 	mla	r4, r6, r3, r4
 8007690:	e7df      	b.n	8007652 <USBH_MSC_Process+0x102>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8007692:	fb06 4201 	mla	r2, r6, r1, r4
 8007696:	329c      	adds	r2, #156	; 0x9c
 8007698:	b2c9      	uxtb	r1, r1
 800769a:	f000 fbb9 	bl	8007e10 <USBH_MSC_SCSI_RequestSense>
            if (scsi_status == USBH_OK)
 800769e:	b9e0      	cbnz	r0, 80076da <USBH_MSC_Process+0x18a>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80076a0:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80076a4:	fb06 4603 	mla	r6, r6, r3, r4
 80076a8:	f896 209c 	ldrb.w	r2, [r6, #156]	; 0x9c
 80076ac:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
 80076b0:	2a02      	cmp	r2, #2
 80076b2:	d10b      	bne.n	80076cc <USBH_MSC_Process+0x17c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80076b4:	f8d4 00fc 	ldr.w	r0, [r4, #252]	; 0xfc
 80076b8:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	; 0x4c4
 80076bc:	1a09      	subs	r1, r1, r0
 80076be:	f242 700f 	movw	r0, #9999	; 0x270f
 80076c2:	4281      	cmp	r1, r0
 80076c4:	d802      	bhi.n	80076cc <USBH_MSC_Process+0x17c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80076c6:	f886 2090 	strb.w	r2, [r6, #144]	; 0x90
                  break;
 80076ca:	e74b      	b.n	8007564 <USBH_MSC_Process+0x14>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80076cc:	2234      	movs	r2, #52	; 0x34
 80076ce:	fb02 4203 	mla	r2, r2, r3, r4
 80076d2:	2001      	movs	r0, #1
 80076d4:	f882 0090 	strb.w	r0, [r2, #144]	; 0x90
 80076d8:	e7cf      	b.n	800767a <USBH_MSC_Process+0x12a>
            if (scsi_status == USBH_FAIL)
 80076da:	2802      	cmp	r0, #2
 80076dc:	d1d1      	bne.n	8007682 <USBH_MSC_Process+0x132>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80076de:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
 80076e2:	fb06 4403 	mla	r4, r6, r3, r4
 80076e6:	2308      	movs	r3, #8
 80076e8:	e77a      	b.n	80075e0 <USBH_MSC_Process+0x90>
            MSC_Handle->current_lun++;
 80076ea:	3101      	adds	r1, #1
 80076ec:	f8a4 10f8 	strh.w	r1, [r4, #248]	; 0xf8
            break;
 80076f0:	e738      	b.n	8007564 <USBH_MSC_Process+0x14>
        MSC_Handle->state = MSC_IDLE;
 80076f2:	7325      	strb	r5, [r4, #12]
        MSC_Handle->current_lun = 0U;
 80076f4:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80076f8:	2102      	movs	r1, #2
 80076fa:	f8d0 34d4 	ldr.w	r3, [r0, #1236]	; 0x4d4
 80076fe:	4798      	blx	r3
 8007700:	e730      	b.n	8007564 <USBH_MSC_Process+0x14>
  switch (MSC_Handle->state)
 8007702:	2000      	movs	r0, #0
 8007704:	e72f      	b.n	8007566 <USBH_MSC_Process+0x16>
 8007706:	bf00      	nop

08007708 <USBH_MSC_ClassRequest>:
{
 8007708:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800770a:	f8d0 247c 	ldr.w	r2, [r0, #1148]	; 0x47c
 800770e:	69d4      	ldr	r4, [r2, #28]
  switch (MSC_Handle->req_state)
 8007710:	7ba2      	ldrb	r2, [r4, #14]
 8007712:	2a02      	cmp	r2, #2
{
 8007714:	4603      	mov	r3, r0
  switch (MSC_Handle->req_state)
 8007716:	d002      	beq.n	800771e <USBH_MSC_ClassRequest+0x16>
 8007718:	2a03      	cmp	r2, #3
 800771a:	d021      	beq.n	8007760 <USBH_MSC_ClassRequest+0x58>
 800771c:	bb32      	cbnz	r2, 800776c <USBH_MSC_ClassRequest+0x64>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800771e:	4621      	mov	r1, r4
 8007720:	4618      	mov	r0, r3
 8007722:	f000 f9bc 	bl	8007a9e <USBH_MSC_BOT_REQ_GetMaxLUN>
      if (status == USBH_NOT_SUPPORTED)
 8007726:	2803      	cmp	r0, #3
 8007728:	d117      	bne.n	800775a <USBH_MSC_ClassRequest+0x52>
        MSC_Handle->max_lun = 0U;
 800772a:	2300      	movs	r3, #0
 800772c:	7023      	strb	r3, [r4, #0]
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800772e:	7823      	ldrb	r3, [r4, #0]
 8007730:	2b02      	cmp	r3, #2
 8007732:	bf98      	it	ls
 8007734:	3301      	addls	r3, #1
 8007736:	f04f 0202 	mov.w	r2, #2
 800773a:	bf94      	ite	ls
 800773c:	b2db      	uxtbls	r3, r3
 800773e:	4613      	movhi	r3, r2
          MSC_Handle->unit[i].state_changed = 0U;
 8007740:	2000      	movs	r0, #0
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007742:	2b01      	cmp	r3, #1
 8007744:	7023      	strb	r3, [r4, #0]
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007746:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
          MSC_Handle->unit[i].state_changed = 0U;
 800774a:	f884 00c1 	strb.w	r0, [r4, #193]	; 0xc1
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800774e:	d006      	beq.n	800775e <USBH_MSC_ClassRequest+0x56>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007750:	f884 20c6 	strb.w	r2, [r4, #198]	; 0xc6
          MSC_Handle->unit[i].state_changed = 0U;
 8007754:	f884 00f5 	strb.w	r0, [r4, #245]	; 0xf5
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007758:	e001      	b.n	800775e <USBH_MSC_ClassRequest+0x56>
      if (status == USBH_OK)
 800775a:	2800      	cmp	r0, #0
 800775c:	d0e7      	beq.n	800772e <USBH_MSC_ClassRequest+0x26>
}
 800775e:	bd10      	pop	{r4, pc}
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8007760:	2100      	movs	r1, #0
 8007762:	f001 f927 	bl	80089b4 <USBH_ClrFeature>
 8007766:	b908      	cbnz	r0, 800776c <USBH_MSC_ClassRequest+0x64>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8007768:	7be3      	ldrb	r3, [r4, #15]
 800776a:	73a3      	strb	r3, [r4, #14]
  USBH_StatusTypeDef status = USBH_BUSY;
 800776c:	2001      	movs	r0, #1
 800776e:	e7f6      	b.n	800775e <USBH_MSC_ClassRequest+0x56>

08007770 <USBH_MSC_InterfaceDeInit>:
{
 8007770:	b538      	push	{r3, r4, r5, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007772:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 8007776:	69dd      	ldr	r5, [r3, #28]
  if ((MSC_Handle->OutPipe) != 0U)
 8007778:	7969      	ldrb	r1, [r5, #5]
{
 800777a:	4604      	mov	r4, r0
  if ((MSC_Handle->OutPipe) != 0U)
 800777c:	b139      	cbz	r1, 800778e <USBH_MSC_InterfaceDeInit+0x1e>
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800777e:	f001 f993 	bl	8008aa8 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007782:	7969      	ldrb	r1, [r5, #5]
 8007784:	4620      	mov	r0, r4
 8007786:	f001 f9ac 	bl	8008ae2 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800778a:	2300      	movs	r3, #0
 800778c:	716b      	strb	r3, [r5, #5]
  if ((MSC_Handle->InPipe != 0U))
 800778e:	7929      	ldrb	r1, [r5, #4]
 8007790:	b141      	cbz	r1, 80077a4 <USBH_MSC_InterfaceDeInit+0x34>
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007792:	4620      	mov	r0, r4
 8007794:	f001 f988 	bl	8008aa8 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007798:	7929      	ldrb	r1, [r5, #4]
 800779a:	4620      	mov	r0, r4
 800779c:	f001 f9a1 	bl	8008ae2 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80077a0:	2300      	movs	r3, #0
 80077a2:	712b      	strb	r3, [r5, #4]
  if ((phost->pActiveClass->pData) != NULL)
 80077a4:	f8d4 347c 	ldr.w	r3, [r4, #1148]	; 0x47c
 80077a8:	69d8      	ldr	r0, [r3, #28]
 80077aa:	b128      	cbz	r0, 80077b8 <USBH_MSC_InterfaceDeInit+0x48>
    USBH_free(phost->pActiveClass->pData);
 80077ac:	f001 f9d4 	bl	8008b58 <free>
    phost->pActiveClass->pData = 0U;
 80077b0:	f8d4 347c 	ldr.w	r3, [r4, #1148]	; 0x47c
 80077b4:	2200      	movs	r2, #0
 80077b6:	61da      	str	r2, [r3, #28]
}
 80077b8:	2000      	movs	r0, #0
 80077ba:	bd38      	pop	{r3, r4, r5, pc}

080077bc <USBH_MSC_InterfaceInit>:
{
 80077bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80077c0:	f8d0 147c 	ldr.w	r1, [r0, #1148]	; 0x47c
 80077c4:	2350      	movs	r3, #80	; 0x50
 80077c6:	7909      	ldrb	r1, [r1, #4]
 80077c8:	2206      	movs	r2, #6
{
 80077ca:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80077cc:	f000 fc2f 	bl	800802e <USBH_FindInterface>
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80077d0:	2801      	cmp	r0, #1
  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80077d2:	4606      	mov	r6, r0
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80077d4:	d904      	bls.n	80077e0 <USBH_MSC_InterfaceInit+0x24>
    return USBH_FAIL;
 80077d6:	2702      	movs	r7, #2
}
 80077d8:	4638      	mov	r0, r7
 80077da:	b004      	add	sp, #16
 80077dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  status = USBH_SelectInterface(phost, interface);
 80077e0:	4601      	mov	r1, r0
 80077e2:	4628      	mov	r0, r5
 80077e4:	f000 fc1a 	bl	800801c <USBH_SelectInterface>
  if (status != USBH_OK)
 80077e8:	4607      	mov	r7, r0
 80077ea:	2800      	cmp	r0, #0
 80077ec:	d1f3      	bne.n	80077d6 <USBH_MSC_InterfaceInit+0x1a>
  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80077ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80077f2:	f8d5 847c 	ldr.w	r8, [r5, #1148]	; 0x47c
 80077f6:	f001 f9a7 	bl	8008b48 <malloc>
 80077fa:	4604      	mov	r4, r0
 80077fc:	f8c8 001c 	str.w	r0, [r8, #28]
  if (MSC_Handle == NULL)
 8007800:	2800      	cmp	r0, #0
 8007802:	d0e8      	beq.n	80077d6 <USBH_MSC_InterfaceInit+0x1a>
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007804:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007808:	4639      	mov	r1, r7
 800780a:	f001 f9bb 	bl	8008b84 <memset>
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800780e:	201a      	movs	r0, #26
 8007810:	fb00 5306 	mla	r3, r0, r6, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007814:	fb00 5606 	mla	r6, r0, r6, r5
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007818:	f893 144e 	ldrb.w	r1, [r3, #1102]	; 0x44e
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800781c:	f8b3 2450 	ldrh.w	r2, [r3, #1104]	; 0x450
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007820:	f993 344e 	ldrsb.w	r3, [r3, #1102]	; 0x44e
 8007824:	2b00      	cmp	r3, #0
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007826:	bfac      	ite	ge
 8007828:	71a1      	strbge	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800782a:	71e1      	strblt	r1, [r4, #7]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800782c:	f996 1456 	ldrsb.w	r1, [r6, #1110]	; 0x456
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007830:	bfb4      	ite	lt
 8007832:	8162      	strhlt	r2, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007834:	8122      	strhge	r2, [r4, #8]
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007836:	2900      	cmp	r1, #0
 8007838:	f896 2456 	ldrb.w	r2, [r6, #1110]	; 0x456
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800783c:	bfa8      	it	ge
 800783e:	71a2      	strbge	r2, [r4, #6]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007840:	f8b6 3458 	ldrh.w	r3, [r6, #1112]	; 0x458
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007844:	79a1      	ldrb	r1, [r4, #6]
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007846:	bfb8      	it	lt
 8007848:	71e2      	strblt	r2, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800784a:	4628      	mov	r0, r5
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800784c:	bfb4      	ite	lt
 800784e:	8163      	strhlt	r3, [r4, #10]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007850:	8123      	strhge	r3, [r4, #8]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007852:	f001 f92e 	bl	8008ab2 <USBH_AllocPipe>
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007856:	79e1      	ldrb	r1, [r4, #7]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007858:	7160      	strb	r0, [r4, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800785a:	4628      	mov	r0, r5
 800785c:	f001 f929 	bl	8008ab2 <USBH_AllocPipe>
 8007860:	7120      	strb	r0, [r4, #4]
  (void)USBH_MSC_BOT_Init(phost);
 8007862:	4628      	mov	r0, r5
 8007864:	f000 f924 	bl	8007ab0 <USBH_MSC_BOT_Init>
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8007868:	79a2      	ldrb	r2, [r4, #6]
 800786a:	b90a      	cbnz	r2, 8007870 <USBH_MSC_InterfaceInit+0xb4>
    return USBH_NOT_SUPPORTED;
 800786c:	2703      	movs	r7, #3
 800786e:	e7b3      	b.n	80077d8 <USBH_MSC_InterfaceInit+0x1c>
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8007870:	8923      	ldrh	r3, [r4, #8]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d0fa      	beq.n	800786c <USBH_MSC_InterfaceInit+0xb0>
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007876:	9302      	str	r3, [sp, #8]
 8007878:	2602      	movs	r6, #2
 800787a:	f895 341d 	ldrb.w	r3, [r5, #1053]	; 0x41d
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	7961      	ldrb	r1, [r4, #5]
 8007882:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 8007886:	9601      	str	r6, [sp, #4]
 8007888:	4628      	mov	r0, r5
 800788a:	f001 f8fe 	bl	8008a8a <USBH_OpenPipe>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800788e:	79e2      	ldrb	r2, [r4, #7]
 8007890:	2a00      	cmp	r2, #0
 8007892:	d0eb      	beq.n	800786c <USBH_MSC_InterfaceInit+0xb0>
 8007894:	8963      	ldrh	r3, [r4, #10]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d0e8      	beq.n	800786c <USBH_MSC_InterfaceInit+0xb0>
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800789a:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800789e:	f895 341d 	ldrb.w	r3, [r5, #1053]	; 0x41d
 80078a2:	7921      	ldrb	r1, [r4, #4]
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	4628      	mov	r0, r5
 80078a8:	f895 341c 	ldrb.w	r3, [r5, #1052]	; 0x41c
 80078ac:	f001 f8ed 	bl	8008a8a <USBH_OpenPipe>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80078b0:	7921      	ldrb	r1, [r4, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	4628      	mov	r0, r5
 80078b6:	f7fe fc7b 	bl	80061b0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80078ba:	7961      	ldrb	r1, [r4, #5]
 80078bc:	2200      	movs	r2, #0
 80078be:	4628      	mov	r0, r5
 80078c0:	f7fe fc76 	bl	80061b0 <USBH_LL_SetToggle>
  return USBH_OK;
 80078c4:	e788      	b.n	80077d8 <USBH_MSC_InterfaceInit+0x1c>

080078c6 <USBH_MSC_RdWrProcess>:
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80078c6:	f8d0 247c 	ldr.w	r2, [r0, #1148]	; 0x47c
{
 80078ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80078cc:	69d2      	ldr	r2, [r2, #28]
  USBH_StatusTypeDef error = USBH_BUSY ;
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 80078ce:	2634      	movs	r6, #52	; 0x34
 80078d0:	fb06 2401 	mla	r4, r6, r1, r2
 80078d4:	f894 5090 	ldrb.w	r5, [r4, #144]	; 0x90
 80078d8:	2d06      	cmp	r5, #6
 80078da:	d005      	beq.n	80078e8 <USBH_MSC_RdWrProcess+0x22>
 80078dc:	2d07      	cmp	r5, #7
 80078de:	d00e      	beq.n	80078fe <USBH_MSC_RdWrProcess+0x38>
 80078e0:	2d05      	cmp	r5, #5
 80078e2:	d018      	beq.n	8007916 <USBH_MSC_RdWrProcess+0x50>
  USBH_StatusTypeDef error = USBH_BUSY ;
 80078e4:	2001      	movs	r0, #1
 80078e6:	e008      	b.n	80078fa <USBH_MSC_RdWrProcess+0x34>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80078e8:	2300      	movs	r3, #0
 80078ea:	9300      	str	r3, [sp, #0]
 80078ec:	461a      	mov	r2, r3
 80078ee:	f000 fb0b 	bl	8007f08 <USBH_MSC_SCSI_Read>
      break;

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);

      if (scsi_status == USBH_OK)
 80078f2:	b950      	cbnz	r0, 800790a <USBH_MSC_RdWrProcess+0x44>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80078f4:	2301      	movs	r3, #1
 80078f6:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    default:
      break;

  }
  return error;
}
 80078fa:	b002      	add	sp, #8
 80078fc:	bd70      	pop	{r4, r5, r6, pc}
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80078fe:	2300      	movs	r3, #0
 8007900:	9300      	str	r3, [sp, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	f000 fac1 	bl	8007e8a <USBH_MSC_SCSI_Write>
 8007908:	e7f3      	b.n	80078f2 <USBH_MSC_RdWrProcess+0x2c>
      else if (scsi_status == USBH_FAIL)
 800790a:	2802      	cmp	r0, #2
 800790c:	d10f      	bne.n	800792e <USBH_MSC_RdWrProcess+0x68>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800790e:	2305      	movs	r3, #5
 8007910:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 8007914:	e7e6      	b.n	80078e4 <USBH_MSC_RdWrProcess+0x1e>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8007916:	fb06 2201 	mla	r2, r6, r1, r2
 800791a:	329c      	adds	r2, #156	; 0x9c
 800791c:	f000 fa78 	bl	8007e10 <USBH_MSC_SCSI_RequestSense>
      if (scsi_status == USBH_OK)
 8007920:	b928      	cbnz	r0, 800792e <USBH_MSC_RdWrProcess+0x68>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8007922:	f240 2301 	movw	r3, #513	; 0x201
 8007926:	f8a4 3090 	strh.w	r3, [r4, #144]	; 0x90
          error = USBH_FAIL;
 800792a:	2002      	movs	r0, #2
 800792c:	e7e5      	b.n	80078fa <USBH_MSC_RdWrProcess+0x34>
      if (scsi_status == USBH_FAIL)
 800792e:	2804      	cmp	r0, #4
 8007930:	d1d8      	bne.n	80078e4 <USBH_MSC_RdWrProcess+0x1e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8007932:	2308      	movs	r3, #8
 8007934:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 8007938:	e7f7      	b.n	800792a <USBH_MSC_RdWrProcess+0x64>

0800793a <USBH_MSC_UnitIsReady>:
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800793a:	7803      	ldrb	r3, [r0, #0]
 800793c:	2b0b      	cmp	r3, #11
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800793e:	bf01      	itttt	eq
 8007940:	f8d0 347c 	ldreq.w	r3, [r0, #1148]	; 0x47c
  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8007944:	69db      	ldreq	r3, [r3, #28]
 8007946:	2234      	moveq	r2, #52	; 0x34
 8007948:	fb02 3101 	mlaeq	r1, r2, r1, r3
 800794c:	bf03      	ittte	eq
 800794e:	f891 0091 	ldrbeq.w	r0, [r1, #145]	; 0x91
  {
    res = 1U;
  }
  else
  {
    res = 0U;
 8007952:	fab0 f080 	clzeq	r0, r0
 8007956:	0940      	lsreq	r0, r0, #5
 8007958:	2000      	movne	r0, #0
  }

  return res;
}
 800795a:	4770      	bx	lr

0800795c <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800795c:	b510      	push	{r4, lr}
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
  if (phost->gState == HOST_CLASS)
 800795e:	7803      	ldrb	r3, [r0, #0]
 8007960:	2b0b      	cmp	r3, #11
 8007962:	d110      	bne.n	8007986 <USBH_MSC_GetLUNInfo+0x2a>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007964:	f8d0 447c 	ldr.w	r4, [r0, #1148]	; 0x47c
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8007968:	2390      	movs	r3, #144	; 0x90
 800796a:	2034      	movs	r0, #52	; 0x34
 800796c:	fb10 3301 	smlabb	r3, r0, r1, r3
 8007970:	69e1      	ldr	r1, [r4, #28]
 8007972:	4419      	add	r1, r3
 8007974:	180b      	adds	r3, r1, r0
 8007976:	f851 0b04 	ldr.w	r0, [r1], #4
 800797a:	f842 0b04 	str.w	r0, [r2], #4
 800797e:	4299      	cmp	r1, r3
 8007980:	d1f9      	bne.n	8007976 <USBH_MSC_GetLUNInfo+0x1a>
    return USBH_OK;
 8007982:	2000      	movs	r0, #0
  }
  else
  {
    return USBH_FAIL;
  }
}
 8007984:	bd10      	pop	{r4, pc}
    return USBH_FAIL;
 8007986:	2002      	movs	r0, #2
 8007988:	e7fc      	b.n	8007984 <USBH_MSC_GetLUNInfo+0x28>

0800798a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800798a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 800798e:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
 8007992:	9f08      	ldr	r7, [sp, #32]
 8007994:	4604      	mov	r4, r0
 8007996:	460e      	mov	r6, r1
  if ((phost->device.is_connected == 0U) ||
 8007998:	b3b5      	cbz	r5, 8007a08 <USBH_MSC_Read+0x7e>
      (phost->gState != HOST_CLASS) ||
 800799a:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 800799c:	2d0b      	cmp	r5, #11
 800799e:	d133      	bne.n	8007a08 <USBH_MSC_Read+0x7e>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80079a0:	f8d0 547c 	ldr.w	r5, [r0, #1148]	; 0x47c
 80079a4:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80079a6:	f04f 0c34 	mov.w	ip, #52	; 0x34
 80079aa:	fb0c 5c01 	mla	ip, ip, r1, r5
      (phost->gState != HOST_CLASS) ||
 80079ae:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
 80079b2:	f1be 0f01 	cmp.w	lr, #1
 80079b6:	d127      	bne.n	8007a08 <USBH_MSC_Read+0x7e>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_READ;
 80079b8:	f04f 0e06 	mov.w	lr, #6
 80079bc:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80079c0:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 80079c4:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 80079c8:	9700      	str	r7, [sp, #0]
 80079ca:	f000 fa9d 	bl	8007f08 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80079ce:	f242 7310 	movw	r3, #10000	; 0x2710
  timeout = phost->Timer;
 80079d2:	f8d4 84c4 	ldr.w	r8, [r4, #1220]	; 0x4c4
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80079d6:	435f      	muls	r7, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80079d8:	4631      	mov	r1, r6
 80079da:	4620      	mov	r0, r4
 80079dc:	f7ff ff73 	bl	80078c6 <USBH_MSC_RdWrProcess>
 80079e0:	2801      	cmp	r0, #1
 80079e2:	d005      	beq.n	80079f0 <USBH_MSC_Read+0x66>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80079e4:	2301      	movs	r3, #1
 80079e6:	732b      	strb	r3, [r5, #12]

  return USBH_OK;
 80079e8:	2000      	movs	r0, #0
}
 80079ea:	b002      	add	sp, #8
 80079ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80079f0:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 80079f4:	eba3 0308 	sub.w	r3, r3, r8
 80079f8:	42bb      	cmp	r3, r7
 80079fa:	d803      	bhi.n	8007a04 <USBH_MSC_Read+0x7a>
 80079fc:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e9      	bne.n	80079d8 <USBH_MSC_Read+0x4e>
      MSC_Handle->state = MSC_IDLE;
 8007a04:	2301      	movs	r3, #1
 8007a06:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8007a08:	2002      	movs	r0, #2
 8007a0a:	e7ee      	b.n	80079ea <USBH_MSC_Read+0x60>

08007a0c <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8007a0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;

  if ((phost->device.is_connected == 0U) ||
 8007a10:	f890 5420 	ldrb.w	r5, [r0, #1056]	; 0x420
{
 8007a14:	9f08      	ldr	r7, [sp, #32]
 8007a16:	4604      	mov	r4, r0
 8007a18:	460e      	mov	r6, r1
  if ((phost->device.is_connected == 0U) ||
 8007a1a:	b3b5      	cbz	r5, 8007a8a <USBH_MSC_Write+0x7e>
      (phost->gState != HOST_CLASS) ||
 8007a1c:	7805      	ldrb	r5, [r0, #0]
  if ((phost->device.is_connected == 0U) ||
 8007a1e:	2d0b      	cmp	r5, #11
 8007a20:	d133      	bne.n	8007a8a <USBH_MSC_Write+0x7e>
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a22:	f8d0 547c 	ldr.w	r5, [r0, #1148]	; 0x47c
 8007a26:	69ed      	ldr	r5, [r5, #28]
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8007a28:	f04f 0c34 	mov.w	ip, #52	; 0x34
 8007a2c:	fb0c 5c01 	mla	ip, ip, r1, r5
      (phost->gState != HOST_CLASS) ||
 8007a30:	f89c e090 	ldrb.w	lr, [ip, #144]	; 0x90
 8007a34:	f1be 0f01 	cmp.w	lr, #1
 8007a38:	d127      	bne.n	8007a8a <USBH_MSC_Write+0x7e>
  {
    return  USBH_FAIL;
  }

  MSC_Handle->state = MSC_WRITE;
 8007a3a:	f04f 0e07 	mov.w	lr, #7
 8007a3e:	f885 e00c 	strb.w	lr, [r5, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8007a42:	f88c e090 	strb.w	lr, [ip, #144]	; 0x90
  MSC_Handle->rw_lun = lun;
 8007a46:	f8a5 10fa 	strh.w	r1, [r5, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 8007a4a:	9700      	str	r7, [sp, #0]
 8007a4c:	f000 fa1d 	bl	8007e8a <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007a50:	f242 7310 	movw	r3, #10000	; 0x2710
  timeout = phost->Timer;
 8007a54:	f8d4 84c4 	ldr.w	r8, [r4, #1220]	; 0x4c4
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007a58:	435f      	muls	r7, r3
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8007a5a:	4631      	mov	r1, r6
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f7ff ff32 	bl	80078c6 <USBH_MSC_RdWrProcess>
 8007a62:	2801      	cmp	r0, #1
 8007a64:	d005      	beq.n	8007a72 <USBH_MSC_Write+0x66>
    {
      MSC_Handle->state = MSC_IDLE;
      return USBH_FAIL;
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8007a66:	2301      	movs	r3, #1
 8007a68:	732b      	strb	r3, [r5, #12]
  return USBH_OK;
 8007a6a:	2000      	movs	r0, #0
}
 8007a6c:	b002      	add	sp, #8
 8007a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8007a72:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 8007a76:	eba3 0308 	sub.w	r3, r3, r8
 8007a7a:	42bb      	cmp	r3, r7
 8007a7c:	d803      	bhi.n	8007a86 <USBH_MSC_Write+0x7a>
 8007a7e:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e9      	bne.n	8007a5a <USBH_MSC_Write+0x4e>
      MSC_Handle->state = MSC_IDLE;
 8007a86:	2301      	movs	r3, #1
 8007a88:	732b      	strb	r3, [r5, #12]
    return  USBH_FAIL;
 8007a8a:	2002      	movs	r0, #2
 8007a8c:	e7ee      	b.n	8007a6c <USBH_MSC_Write+0x60>

08007a8e <USBH_MSC_BOT_REQ_Reset>:
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 8007a8e:	f64f 7121 	movw	r1, #65313	; 0xff21
 8007a92:	2200      	movs	r2, #0
 8007a94:	e9c0 1204 	strd	r1, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 0U;

  return USBH_CtlReq(phost, NULL, 0U);
 8007a98:	4611      	mov	r1, r2
 8007a9a:	f000 bd17 	b.w	80084cc <USBH_CtlReq>

08007a9e <USBH_MSC_BOT_REQ_GetMaxLUN>:
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
  phost->Control.setup.b.wValue.w = 0U;
  phost->Control.setup.b.wIndex.w = 0U;
 8007a9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007aa2:	f64f 6ca1 	movw	ip, #65185	; 0xfea1
 8007aa6:	e9c0 c204 	strd	ip, r2, [r0, #16]
  phost->Control.setup.b.wLength.w = 1U;

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f000 bd0e 	b.w	80084cc <USBH_CtlReq>

08007ab0 <USBH_MSC_BOT_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ab0:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007ab4:	4905      	ldr	r1, [pc, #20]	; (8007acc <USBH_MSC_BOT_Init+0x1c>)
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ab6:	69db      	ldr	r3, [r3, #28]
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8007ab8:	4a05      	ldr	r2, [pc, #20]	; (8007ad0 <USBH_MSC_BOT_Init+0x20>)
 8007aba:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007abe:	2201      	movs	r2, #1
 8007ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007ac4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
}
 8007ac8:	2000      	movs	r0, #0
 8007aca:	4770      	bx	lr
 8007acc:	43425355 	.word	0x43425355
 8007ad0:	20304050 	.word	0x20304050

08007ad4 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8007ad4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef   status = USBH_BUSY;
  USBH_StatusTypeDef   error  = USBH_BUSY;
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ad6:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 8007ada:	69dc      	ldr	r4, [r3, #28]
  uint8_t toggle = 0U;

  switch (MSC_Handle->hbot.state)
 8007adc:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
 8007ae0:	1e6b      	subs	r3, r5, #1
{
 8007ae2:	4606      	mov	r6, r0
  switch (MSC_Handle->hbot.state)
 8007ae4:	2b0a      	cmp	r3, #10
 8007ae6:	d82c      	bhi.n	8007b42 <USBH_MSC_BOT_Process+0x6e>
 8007ae8:	e8df f003 	tbb	[pc, r3]
 8007aec:	372f1506 	.word	0x372f1506
 8007af0:	89815e54 	.word	0x89815e54
 8007af4:	b6ab      	.short	0xb6ab
 8007af6:	ce          	.byte	0xce
 8007af7:	00          	.byte	0x00
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007af8:	2302      	movs	r3, #2
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007afa:	2201      	movs	r2, #1
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007afc:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8007b00:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007b04:	f104 0154 	add.w	r1, r4, #84	; 0x54
 8007b08:	7963      	ldrb	r3, [r4, #5]
 8007b0a:	9200      	str	r2, [sp, #0]
 8007b0c:	221f      	movs	r2, #31
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007b0e:	4630      	mov	r0, r6
 8007b10:	f000 ff94 	bl	8008a3c <USBH_BulkSendData>
 8007b14:	e016      	b.n	8007b44 <USBH_MSC_BOT_Process+0x70>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007b16:	7961      	ldrb	r1, [r4, #5]
 8007b18:	f7fe fb36 	bl	8006188 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8007b1c:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007b1e:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8007b20:	d10a      	bne.n	8007b38 <USBH_MSC_BOT_Process+0x64>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007b22:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007b24:	b35b      	cbz	r3, 8007b7e <USBH_MSC_BOT_Process+0xaa>
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8007b26:	f994 3060 	ldrsb.w	r3, [r4, #96]	; 0x60
 8007b2a:	2b00      	cmp	r3, #0
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8007b2c:	bfb4      	ite	lt
 8007b2e:	2303      	movlt	r3, #3
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8007b30:	2305      	movge	r3, #5

    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
      if (status == USBH_OK)
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007b32:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8007b36:	e005      	b.n	8007b44 <USBH_MSC_BOT_Process+0x70>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b38:	2802      	cmp	r0, #2
 8007b3a:	d152      	bne.n	8007be2 <USBH_MSC_BOT_Process+0x10e>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007b3c:	2001      	movs	r0, #1
 8007b3e:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  USBH_StatusTypeDef   status = USBH_BUSY;
 8007b42:	2501      	movs	r5, #1

    default:
      break;
  }
  return status;
}
 8007b44:	4628      	mov	r0, r5
 8007b46:	b002      	add	sp, #8
 8007b48:	bd70      	pop	{r4, r5, r6, pc}
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007b4a:	7923      	ldrb	r3, [r4, #4]
 8007b4c:	8962      	ldrh	r2, [r4, #10]
 8007b4e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007b52:	f000 ff8a 	bl	8008a6a <USBH_BulkReceiveData>
      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8007b56:	2304      	movs	r3, #4
 8007b58:	e046      	b.n	8007be8 <USBH_MSC_BOT_Process+0x114>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007b5a:	7921      	ldrb	r1, [r4, #4]
 8007b5c:	f7fe fb14 	bl	8006188 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8007b60:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007b62:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8007b64:	d112      	bne.n	8007b8c <USBH_MSC_BOT_Process+0xb8>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8007b66:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007b68:	8962      	ldrh	r2, [r4, #10]
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d932      	bls.n	8007bd4 <USBH_MSC_BOT_Process+0x100>
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8007b6e:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007b72:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8007b74:	4411      	add	r1, r2
 8007b76:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8007b7a:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007b7c:	b90b      	cbnz	r3, 8007b82 <USBH_MSC_BOT_Process+0xae>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8007b7e:	2307      	movs	r3, #7
 8007b80:	e7d7      	b.n	8007b32 <USBH_MSC_BOT_Process+0x5e>
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8007b82:	7923      	ldrb	r3, [r4, #4]
 8007b84:	4630      	mov	r0, r6
 8007b86:	f000 ff70 	bl	8008a6a <USBH_BulkReceiveData>
 8007b8a:	e7db      	b.n	8007b44 <USBH_MSC_BOT_Process+0x70>
      else if (URB_Status == USBH_URB_STALL)
 8007b8c:	2805      	cmp	r0, #5
      else if (URB_Status == USBH_URB_STALL)
 8007b8e:	d1d8      	bne.n	8007b42 <USBH_MSC_BOT_Process+0x6e>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007b90:	2309      	movs	r3, #9
 8007b92:	e029      	b.n	8007be8 <USBH_MSC_BOT_Process+0x114>
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007b94:	2501      	movs	r5, #1
 8007b96:	7963      	ldrb	r3, [r4, #5]
 8007b98:	8922      	ldrh	r2, [r4, #8]
 8007b9a:	9500      	str	r5, [sp, #0]
 8007b9c:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 8007ba0:	f000 ff4c 	bl	8008a3c <USBH_BulkSendData>
      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8007ba4:	2306      	movs	r3, #6
 8007ba6:	e7c4      	b.n	8007b32 <USBH_MSC_BOT_Process+0x5e>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007ba8:	7961      	ldrb	r1, [r4, #5]
 8007baa:	f7fe faed 	bl	8006188 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8007bae:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007bb0:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8007bb2:	d112      	bne.n	8007bda <USBH_MSC_BOT_Process+0x106>
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8007bb4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007bb6:	8922      	ldrh	r2, [r4, #8]
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d90b      	bls.n	8007bd4 <USBH_MSC_BOT_Process+0x100>
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007bbc:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8007bc0:	1a9b      	subs	r3, r3, r2
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007bc2:	4411      	add	r1, r2
 8007bc4:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8007bc8:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d0d7      	beq.n	8007b7e <USBH_MSC_BOT_Process+0xaa>
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007bce:	7963      	ldrb	r3, [r4, #5]
 8007bd0:	9000      	str	r0, [sp, #0]
 8007bd2:	e79c      	b.n	8007b0e <USBH_MSC_BOT_Process+0x3a>
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	65e3      	str	r3, [r4, #92]	; 0x5c
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007bd8:	e7d1      	b.n	8007b7e <USBH_MSC_BOT_Process+0xaa>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007bda:	2802      	cmp	r0, #2
 8007bdc:	d101      	bne.n	8007be2 <USBH_MSC_BOT_Process+0x10e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8007bde:	2305      	movs	r3, #5
 8007be0:	e002      	b.n	8007be8 <USBH_MSC_BOT_Process+0x114>
      else if (URB_Status == USBH_URB_STALL)
 8007be2:	2d05      	cmp	r5, #5
 8007be4:	d1ad      	bne.n	8007b42 <USBH_MSC_BOT_Process+0x6e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007be6:	230a      	movs	r3, #10
 8007be8:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8007bec:	e7a9      	b.n	8007b42 <USBH_MSC_BOT_Process+0x6e>
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007bee:	7923      	ldrb	r3, [r4, #4]
 8007bf0:	220d      	movs	r2, #13
 8007bf2:	f104 0178 	add.w	r1, r4, #120	; 0x78
 8007bf6:	f000 ff38 	bl	8008a6a <USBH_BulkReceiveData>
      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8007bfa:	2308      	movs	r3, #8
 8007bfc:	e7f4      	b.n	8007be8 <USBH_MSC_BOT_Process+0x114>
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007bfe:	7921      	ldrb	r1, [r4, #4]
 8007c00:	f7fe fac2 	bl	8006188 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8007c04:	2801      	cmp	r0, #1
 8007c06:	d11a      	bne.n	8007c3e <USBH_MSC_BOT_Process+0x16a>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007c08:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8007c0c:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c10:	f8d6 347c 	ldr.w	r3, [r6, #1148]	; 0x47c
 8007c14:	69dc      	ldr	r4, [r3, #28]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8007c16:	4630      	mov	r0, r6
 8007c18:	7921      	ldrb	r1, [r4, #4]
 8007c1a:	f7fe fa86 	bl	800612a <USBH_LL_GetLastXferSize>
 8007c1e:	280d      	cmp	r0, #13
 8007c20:	d13a      	bne.n	8007c98 <USBH_MSC_BOT_Process+0x1c4>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8007c22:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8007c24:	4b1d      	ldr	r3, [pc, #116]	; (8007c9c <USBH_MSC_BOT_Process+0x1c8>)
 8007c26:	429a      	cmp	r2, r3
 8007c28:	d136      	bne.n	8007c98 <USBH_MSC_BOT_Process+0x1c4>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8007c2a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8007c2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d132      	bne.n	8007c98 <USBH_MSC_BOT_Process+0x1c4>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8007c32:	f894 5084 	ldrb.w	r5, [r4, #132]	; 0x84
          status = USBH_FAIL;
 8007c36:	2d00      	cmp	r5, #0
 8007c38:	bf18      	it	ne
 8007c3a:	2502      	movne	r5, #2
 8007c3c:	e782      	b.n	8007b44 <USBH_MSC_BOT_Process+0x70>
      else if (URB_Status == USBH_URB_STALL)
 8007c3e:	2805      	cmp	r0, #5
 8007c40:	e7a5      	b.n	8007b8e <USBH_MSC_BOT_Process+0xba>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8007c42:	79e1      	ldrb	r1, [r4, #7]
 8007c44:	f000 feb6 	bl	80089b4 <USBH_ClrFeature>
      if (error == USBH_OK)
 8007c48:	b908      	cbnz	r0, 8007c4e <USBH_MSC_BOT_Process+0x17a>
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8007c4a:	2307      	movs	r3, #7
 8007c4c:	e7cc      	b.n	8007be8 <USBH_MSC_BOT_Process+0x114>
      else if (error == USBH_UNRECOVERED_ERROR)
 8007c4e:	2804      	cmp	r0, #4
        if (error == USBH_UNRECOVERED_ERROR)
 8007c50:	f47f af77 	bne.w	8007b42 <USBH_MSC_BOT_Process+0x6e>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007c54:	230b      	movs	r3, #11
 8007c56:	e7c7      	b.n	8007be8 <USBH_MSC_BOT_Process+0x114>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8007c58:	79a1      	ldrb	r1, [r4, #6]
 8007c5a:	f000 feab 	bl	80089b4 <USBH_ClrFeature>
      if (error == USBH_OK)
 8007c5e:	4605      	mov	r5, r0
 8007c60:	b980      	cbnz	r0, 8007c84 <USBH_MSC_BOT_Process+0x1b0>
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8007c62:	7961      	ldrb	r1, [r4, #5]
 8007c64:	4630      	mov	r0, r6
 8007c66:	f7fe fab3 	bl	80061d0 <USBH_LL_GetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8007c6a:	f1c0 0001 	rsb	r0, r0, #1
 8007c6e:	7961      	ldrb	r1, [r4, #5]
 8007c70:	b2c2      	uxtb	r2, r0
 8007c72:	4630      	mov	r0, r6
 8007c74:	f7fe fa9c 	bl	80061b0 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007c78:	7921      	ldrb	r1, [r4, #4]
 8007c7a:	462a      	mov	r2, r5
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	f7fe fa97 	bl	80061b0 <USBH_LL_SetToggle>
 8007c82:	e785      	b.n	8007b90 <USBH_MSC_BOT_Process+0xbc>
        if (error == USBH_UNRECOVERED_ERROR)
 8007c84:	2804      	cmp	r0, #4
 8007c86:	e7e3      	b.n	8007c50 <USBH_MSC_BOT_Process+0x17c>
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8007c88:	f7ff ff01 	bl	8007a8e <USBH_MSC_BOT_REQ_Reset>
      if (status == USBH_OK)
 8007c8c:	4605      	mov	r5, r0
 8007c8e:	2800      	cmp	r0, #0
 8007c90:	f47f af58 	bne.w	8007b44 <USBH_MSC_BOT_Process+0x70>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e74c      	b.n	8007b32 <USBH_MSC_BOT_Process+0x5e>
          status = USBH_FAIL;
 8007c98:	2502      	movs	r5, #2
 8007c9a:	e753      	b.n	8007b44 <USBH_MSC_BOT_Process+0x70>
 8007c9c:	53425355 	.word	0x53425355

08007ca0 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8007ca0:	b538      	push	{r3, r4, r5, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ca2:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 8007ca6:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8007ca8:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8007cac:	2d01      	cmp	r5, #1
 8007cae:	d004      	beq.n	8007cba <USBH_MSC_SCSI_TestUnitReady+0x1a>
 8007cb0:	2d02      	cmp	r5, #2
 8007cb2:	d014      	beq.n	8007cde <USBH_MSC_SCSI_TestUnitReady+0x3e>
 8007cb4:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	bd38      	pop	{r3, r4, r5, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8007cba:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007cbc:	230a      	movs	r3, #10
 8007cbe:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8007cc2:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007cc4:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007cc8:	2210      	movs	r2, #16
 8007cca:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8007cce:	f000 ff59 	bl	8008b84 <memset>
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007cd2:	2302      	movs	r3, #2
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007cd4:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007cd8:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      break;
 8007cdc:	e7eb      	b.n	8007cb6 <USBH_MSC_SCSI_TestUnitReady+0x16>
}
 8007cde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8007ce2:	f7ff bef7 	b.w	8007ad4 <USBH_MSC_BOT_Process>

08007ce6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8007ce6:	b570      	push	{r4, r5, r6, lr}
  USBH_StatusTypeDef    error = USBH_BUSY ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ce8:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 8007cec:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8007cee:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8007cf2:	2d01      	cmp	r5, #1
{
 8007cf4:	4616      	mov	r6, r2
  switch (MSC_Handle->hbot.cmd_state)
 8007cf6:	d004      	beq.n	8007d02 <USBH_MSC_SCSI_ReadCapacity+0x1c>
 8007cf8:	2d02      	cmp	r5, #2
 8007cfa:	d01b      	beq.n	8007d34 <USBH_MSC_SCSI_ReadCapacity+0x4e>
 8007cfc:	2501      	movs	r5, #1
    default:
      break;
  }

  return error;
}
 8007cfe:	4628      	mov	r0, r5
 8007d00:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8007d02:	2308      	movs	r3, #8
 8007d04:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007d06:	2380      	movs	r3, #128	; 0x80
 8007d08:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007d0c:	2210      	movs	r2, #16
 8007d0e:	2100      	movs	r1, #0
 8007d10:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8007d14:	f000 ff36 	bl	8008b84 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007d18:	f242 530a 	movw	r3, #9482	; 0x250a
 8007d1c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007d20:	2302      	movs	r3, #2
 8007d22:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007d26:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007d2a:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007d2e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8007d32:	e7e4      	b.n	8007cfe <USBH_MSC_SCSI_ReadCapacity+0x18>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007d34:	f7ff fece 	bl	8007ad4 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8007d38:	4605      	mov	r5, r0
 8007d3a:	2800      	cmp	r0, #0
 8007d3c:	d1df      	bne.n	8007cfe <USBH_MSC_SCSI_ReadCapacity+0x18>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007d3e:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 8007d42:	6813      	ldr	r3, [r2, #0]
 8007d44:	ba1b      	rev	r3, r3
 8007d46:	6033      	str	r3, [r6, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8007d48:	88d3      	ldrh	r3, [r2, #6]
 8007d4a:	ba5b      	rev16	r3, r3
 8007d4c:	80b3      	strh	r3, [r6, #4]
 8007d4e:	e7d6      	b.n	8007cfe <USBH_MSC_SCSI_ReadCapacity+0x18>

08007d50 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8007d50:	b570      	push	{r4, r5, r6, lr}
 8007d52:	4616      	mov	r6, r2
  USBH_StatusTypeDef error = USBH_FAIL;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007d54:	f8d0 247c 	ldr.w	r2, [r0, #1148]	; 0x47c
 8007d58:	69d4      	ldr	r4, [r2, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8007d5a:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8007d5e:	2d01      	cmp	r5, #1
{
 8007d60:	460b      	mov	r3, r1
  switch (MSC_Handle->hbot.cmd_state)
 8007d62:	d004      	beq.n	8007d6e <USBH_MSC_SCSI_Inquiry+0x1e>
 8007d64:	2d02      	cmp	r5, #2
 8007d66:	d021      	beq.n	8007dac <USBH_MSC_SCSI_Inquiry+0x5c>
 8007d68:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8007d6a:	4628      	mov	r0, r5
 8007d6c:	bd70      	pop	{r4, r5, r6, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007d6e:	2280      	movs	r2, #128	; 0x80
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007d70:	015b      	lsls	r3, r3, #5
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007d72:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c4 2063 	str.w	r2, [r4, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007d7c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007d80:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007d82:	2124      	movs	r1, #36	; 0x24
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8007d84:	f8c4 2067 	str.w	r2, [r4, #103]	; 0x67
 8007d88:	f8a4 206b 	strh.w	r2, [r4, #107]	; 0x6b
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007d8c:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007d90:	f241 220a 	movw	r2, #4618	; 0x120a
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007d94:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007d98:	65e1      	str	r1, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007d9a:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007d9e:	f884 1067 	strb.w	r1, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007da2:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007da6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8007daa:	e7de      	b.n	8007d6a <USBH_MSC_SCSI_Inquiry+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007dac:	f7ff fe92 	bl	8007ad4 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8007db0:	4605      	mov	r5, r0
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d1d9      	bne.n	8007d6a <USBH_MSC_SCSI_Inquiry+0x1a>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8007db6:	4601      	mov	r1, r0
 8007db8:	2222      	movs	r2, #34	; 0x22
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f000 fee2 	bl	8008b84 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8007dc0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007dc4:	781a      	ldrb	r2, [r3, #0]
 8007dc6:	f002 021f 	and.w	r2, r2, #31
 8007dca:	7072      	strb	r2, [r6, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8007dcc:	781a      	ldrb	r2, [r3, #0]
 8007dce:	0952      	lsrs	r2, r2, #5
 8007dd0:	7032      	strb	r2, [r6, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8007dd2:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8007dd6:	2a00      	cmp	r2, #0
          inquiry->RemovableMedia = 1U;
 8007dd8:	bfbc      	itt	lt
 8007dda:	2201      	movlt	r2, #1
 8007ddc:	70b2      	strblt	r2, [r6, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	f8c6 2003 	str.w	r2, [r6, #3]
 8007de4:	68da      	ldr	r2, [r3, #12]
 8007de6:	f8c6 2007 	str.w	r2, [r6, #7]
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007dea:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007dee:	f106 010c 	add.w	r1, r6, #12
 8007df2:	f103 0210 	add.w	r2, r3, #16
 8007df6:	3320      	adds	r3, #32
 8007df8:	f852 0b04 	ldr.w	r0, [r2], #4
 8007dfc:	f841 0b04 	str.w	r0, [r1], #4
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d1f9      	bne.n	8007df8 <USBH_MSC_SCSI_Inquiry+0xa8>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007e04:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	f8c6 301d 	str.w	r3, [r6, #29]
 8007e0e:	e7ac      	b.n	8007d6a <USBH_MSC_SCSI_Inquiry+0x1a>

08007e10 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e12:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 8007e16:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8007e18:	f894 5052 	ldrb.w	r5, [r4, #82]	; 0x52
 8007e1c:	2d01      	cmp	r5, #1
{
 8007e1e:	460f      	mov	r7, r1
 8007e20:	4616      	mov	r6, r2
  switch (MSC_Handle->hbot.cmd_state)
 8007e22:	d004      	beq.n	8007e2e <USBH_MSC_SCSI_RequestSense+0x1e>
 8007e24:	2d02      	cmp	r5, #2
 8007e26:	d020      	beq.n	8007e6a <USBH_MSC_SCSI_RequestSense+0x5a>
 8007e28:	2502      	movs	r5, #2
    default:
      break;
  }

  return error;
}
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007e2e:	2380      	movs	r3, #128	; 0x80
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007e30:	260e      	movs	r6, #14
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007e32:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007e36:	65e6      	str	r6, [r4, #92]	; 0x5c
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007e38:	2210      	movs	r2, #16
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8007e40:	f000 fea0 	bl	8008b84 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007e44:	f240 330a 	movw	r3, #778	; 0x30a
 8007e48:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007e4c:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007e4e:	017f      	lsls	r7, r7, #5
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007e50:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007e54:	f104 0310 	add.w	r3, r4, #16
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007e58:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8007e5c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007e60:	f884 5050 	strb.w	r5, [r4, #80]	; 0x50
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007e64:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      break;
 8007e68:	e7df      	b.n	8007e2a <USBH_MSC_SCSI_RequestSense+0x1a>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007e6a:	f7ff fe33 	bl	8007ad4 <USBH_MSC_BOT_Process>
      if (error == USBH_OK)
 8007e6e:	4605      	mov	r5, r0
 8007e70:	2800      	cmp	r0, #0
 8007e72:	d1da      	bne.n	8007e2a <USBH_MSC_SCSI_RequestSense+0x1a>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007e74:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8007e78:	789a      	ldrb	r2, [r3, #2]
 8007e7a:	f002 020f 	and.w	r2, r2, #15
 8007e7e:	7032      	strb	r2, [r6, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007e80:	7b1a      	ldrb	r2, [r3, #12]
 8007e82:	7072      	strb	r2, [r6, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8007e84:	7b5b      	ldrb	r3, [r3, #13]
 8007e86:	70b3      	strb	r3, [r6, #2]
 8007e88:	e7cf      	b.n	8007e2a <USBH_MSC_SCSI_RequestSense+0x1a>

08007e8a <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007e8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e8e:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e90:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
{
 8007e94:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e96:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8007e98:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
 8007e9c:	2e01      	cmp	r6, #1
{
 8007e9e:	4615      	mov	r5, r2
  switch (MSC_Handle->hbot.cmd_state)
 8007ea0:	d005      	beq.n	8007eae <USBH_MSC_SCSI_Write+0x24>
 8007ea2:	2e02      	cmp	r6, #2
 8007ea4:	d02c      	beq.n	8007f00 <USBH_MSC_SCSI_Write+0x76>
 8007ea6:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007eae:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007eb2:	2100      	movs	r1, #0
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007eb4:	437b      	muls	r3, r7
 8007eb6:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007eb8:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007ebc:	2210      	movs	r2, #16
 8007ebe:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8007ec2:	f000 fe5f 	bl	8008b84 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007ec6:	f642 230a 	movw	r3, #10762	; 0x2a0a
 8007eca:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007ece:	f3c5 6307 	ubfx	r3, r5, #24, #8
 8007ed2:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007ed6:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8007eda:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007ede:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8007ee2:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007ee6:	ba7f      	rev16	r7, r7
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007ee8:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007eea:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007eee:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007ef2:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007ef6:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007efa:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      break;
 8007efe:	e7d3      	b.n	8007ea8 <USBH_MSC_SCSI_Write+0x1e>
}
 8007f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8007f04:	f7ff bde6 	b.w	8007ad4 <USBH_MSC_BOT_Process>

08007f08 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8007f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0c:	4698      	mov	r8, r3
  USBH_StatusTypeDef    error = USBH_FAIL ;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f0e:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
{
 8007f12:	9f06      	ldr	r7, [sp, #24]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f14:	69dc      	ldr	r4, [r3, #28]

  switch (MSC_Handle->hbot.cmd_state)
 8007f16:	f894 6052 	ldrb.w	r6, [r4, #82]	; 0x52
 8007f1a:	2e01      	cmp	r6, #1
{
 8007f1c:	4615      	mov	r5, r2
  switch (MSC_Handle->hbot.cmd_state)
 8007f1e:	d005      	beq.n	8007f2c <USBH_MSC_SCSI_Read+0x24>
 8007f20:	2e02      	cmp	r6, #2
 8007f22:	d02d      	beq.n	8007f80 <USBH_MSC_SCSI_Read+0x78>
 8007f24:	2602      	movs	r6, #2
    default:
      break;
  }

  return error;
}
 8007f26:	4630      	mov	r0, r6
 8007f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007f2c:	f8b4 3098 	ldrh.w	r3, [r4, #152]	; 0x98
 8007f30:	437b      	muls	r3, r7
 8007f32:	65e3      	str	r3, [r4, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007f34:	2380      	movs	r3, #128	; 0x80
 8007f36:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007f3a:	2210      	movs	r2, #16
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	f104 0063 	add.w	r0, r4, #99	; 0x63
 8007f42:	f000 fe1f 	bl	8008b84 <memset>
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007f46:	f642 030a 	movw	r3, #10250	; 0x280a
 8007f4a:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007f4e:	f3c5 6307 	ubfx	r3, r5, #24, #8
 8007f52:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007f56:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8007f5a:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007f5e:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8007f62:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007f66:	ba7f      	rev16	r7, r7
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007f68:	2302      	movs	r3, #2
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007f6a:	f884 5068 	strb.w	r5, [r4, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007f6e:	f8a4 706a 	strh.w	r7, [r4, #106]	; 0x6a
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007f72:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007f76:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007f7a:	f8c4 808c 	str.w	r8, [r4, #140]	; 0x8c
      break;
 8007f7e:	e7d2      	b.n	8007f26 <USBH_MSC_SCSI_Read+0x1e>
}
 8007f80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      error = USBH_MSC_BOT_Process(phost, lun);
 8007f84:	f7ff bda6 	b.w	8007ad4 <USBH_MSC_BOT_Process>

08007f88 <DeInitStateMachine.isra.0>:
  * @brief  DeInitStateMachine
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
 8007f88:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8007f8a:	2540      	movs	r5, #64	; 0x40
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
 8007f8c:	4604      	mov	r4, r0
    phost->Pipes[i] = 0U;
 8007f8e:	462a      	mov	r2, r5
 8007f90:	2100      	movs	r1, #0
 8007f92:	f200 4084 	addw	r0, r0, #1156	; 0x484
 8007f96:	f000 fdf5 	bl	8008b84 <memset>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 8007f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	f504 7007 	add.w	r0, r4, #540	; 0x21c
 8007fa4:	f000 fdee 	bl	8008b84 <memset>
  }

  phost->gState = HOST_IDLE;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	7023      	strb	r3, [r4, #0]
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 8007fac:	2201      	movs	r2, #1
  phost->EnumState = ENUM_IDLE;
 8007fae:	7063      	strb	r3, [r4, #1]
  phost->Timer = 0U;
 8007fb0:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
  phost->Control.errorcount = 0U;

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
  phost->RequestState = CMD_SEND;
 8007fb8:	70a2      	strb	r2, [r4, #2]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007fba:	71a5      	strb	r5, [r4, #6]
  phost->Control.state = CTRL_SETUP;
 8007fbc:	8322      	strh	r2, [r4, #24]
  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007fbe:	f8c4 341c 	str.w	r3, [r4, #1052]	; 0x41c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
  phost->device.RstCnt = 0U;
  phost->device.EnumCnt = 0U;

  return USBH_OK;
}
 8007fc2:	bd38      	pop	{r3, r4, r5, pc}

08007fc4 <USBH_Init>:
{
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	460e      	mov	r6, r1
  if (phost == NULL)
 8007fc8:	4604      	mov	r4, r0
 8007fca:	b1c0      	cbz	r0, 8007ffe <USBH_Init+0x3a>
  phost->pActiveClass = NULL;
 8007fcc:	2500      	movs	r5, #0
  phost->id = id;
 8007fce:	f880 24cc 	strb.w	r2, [r0, #1228]	; 0x4cc
  phost->pActiveClass = NULL;
 8007fd2:	f8c0 547c 	str.w	r5, [r0, #1148]	; 0x47c
  phost->ClassNumber = 0U;
 8007fd6:	f8c0 5480 	str.w	r5, [r0, #1152]	; 0x480
  (void)DeInitStateMachine(phost);
 8007fda:	f7ff ffd5 	bl	8007f88 <DeInitStateMachine.isra.0>
  phost->device.is_connected = 0U;
 8007fde:	f884 5420 	strb.w	r5, [r4, #1056]	; 0x420
  phost->device.PortEnabled = 0U;
 8007fe2:	f884 5423 	strb.w	r5, [r4, #1059]	; 0x423
  phost->device.is_disconnected = 0U;
 8007fe6:	f884 5421 	strb.w	r5, [r4, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 8007fea:	f884 5422 	strb.w	r5, [r4, #1058]	; 0x422
  if (pUsrFunc != NULL)
 8007fee:	b10e      	cbz	r6, 8007ff4 <USBH_Init+0x30>
    phost->pUser = pUsrFunc;
 8007ff0:	f8c4 64d4 	str.w	r6, [r4, #1236]	; 0x4d4
  (void)USBH_LL_Init(phost);
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f7fe f84f 	bl	8006098 <USBH_LL_Init>
  return USBH_OK;
 8007ffa:	2000      	movs	r0, #0
}
 8007ffc:	bd70      	pop	{r4, r5, r6, pc}
    return USBH_FAIL;
 8007ffe:	2002      	movs	r0, #2
 8008000:	e7fc      	b.n	8007ffc <USBH_Init+0x38>

08008002 <USBH_RegisterClass>:
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 8008002:	b149      	cbz	r1, 8008018 <USBH_RegisterClass+0x16>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008004:	f8d0 3480 	ldr.w	r3, [r0, #1152]	; 0x480
 8008008:	b933      	cbnz	r3, 8008018 <USBH_RegisterClass+0x16>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800800a:	2201      	movs	r2, #1
 800800c:	f8c0 2480 	str.w	r2, [r0, #1152]	; 0x480
 8008010:	f8c0 1478 	str.w	r1, [r0, #1144]	; 0x478
      status = USBH_OK;
 8008014:	4618      	mov	r0, r3
 8008016:	4770      	bx	lr
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008018:	2002      	movs	r0, #2
  }

  return status;
}
 800801a:	4770      	bx	lr

0800801c <USBH_SelectInterface>:
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
  USBH_StatusTypeDef status = USBH_OK;

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800801c:	f890 343c 	ldrb.w	r3, [r0, #1084]	; 0x43c
 8008020:	428b      	cmp	r3, r1
  {
    phost->device.current_interface = interface;
 8008022:	bf86      	itte	hi
 8008024:	f880 1424 	strbhi.w	r1, [r0, #1060]	; 0x424
  USBH_StatusTypeDef status = USBH_OK;
 8008028:	2000      	movhi	r0, #0
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800802a:	2002      	movls	r0, #2
  }

  return status;
}
 800802c:	4770      	bx	lr

0800802e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800802e:	b570      	push	{r4, r5, r6, lr}
 8008030:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008032:	f890 6447 	ldrb.w	r6, [r0, #1095]	; 0x447
 8008036:	428e      	cmp	r6, r1
 8008038:	b2e5      	uxtb	r5, r4
 800803a:	d001      	beq.n	8008040 <USBH_FindInterface+0x12>
 800803c:	29ff      	cmp	r1, #255	; 0xff
 800803e:	d10b      	bne.n	8008058 <USBH_FindInterface+0x2a>
 8008040:	f890 6448 	ldrb.w	r6, [r0, #1096]	; 0x448
 8008044:	4296      	cmp	r6, r2
 8008046:	d001      	beq.n	800804c <USBH_FindInterface+0x1e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008048:	2aff      	cmp	r2, #255	; 0xff
 800804a:	d105      	bne.n	8008058 <USBH_FindInterface+0x2a>
 800804c:	f890 6449 	ldrb.w	r6, [r0, #1097]	; 0x449
 8008050:	429e      	cmp	r6, r3
 8008052:	d004      	beq.n	800805e <USBH_FindInterface+0x30>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008054:	2bff      	cmp	r3, #255	; 0xff
 8008056:	d002      	beq.n	800805e <USBH_FindInterface+0x30>
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008058:	301a      	adds	r0, #26
 800805a:	b114      	cbz	r4, 8008062 <USBH_FindInterface+0x34>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800805c:	25ff      	movs	r5, #255	; 0xff
}
 800805e:	4628      	mov	r0, r5
 8008060:	bd70      	pop	{r4, r5, r6, pc}
 8008062:	2401      	movs	r4, #1
 8008064:	e7e5      	b.n	8008032 <USBH_FindInterface+0x4>

08008066 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8008066:	b510      	push	{r4, lr}
 8008068:	4604      	mov	r4, r0
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800806a:	f7fe f83d 	bl	80060e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800806e:	2101      	movs	r1, #1
 8008070:	4620      	mov	r0, r4
 8008072:	f7fe f88d 	bl	8006190 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8008076:	2000      	movs	r0, #0
 8008078:	bd10      	pop	{r4, pc}

0800807a <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800807a:	b570      	push	{r4, r5, r6, lr}
 800807c:	b086      	sub	sp, #24
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800807e:	2302      	movs	r3, #2
 8008080:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008084:	f890 3421 	ldrb.w	r3, [r0, #1057]	; 0x421
 8008088:	2b01      	cmp	r3, #1
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800808a:	bf04      	itt	eq
 800808c:	2303      	moveq	r3, #3
 800808e:	7003      	strbeq	r3, [r0, #0]
  }

  switch (phost->gState)
 8008090:	7803      	ldrb	r3, [r0, #0]
{
 8008092:	4604      	mov	r4, r0
  switch (phost->gState)
 8008094:	2b0b      	cmp	r3, #11
 8008096:	d81d      	bhi.n	80080d4 <USBH_Process+0x5a>
 8008098:	e8df f013 	tbh	[pc, r3, lsl #1]
 800809c:	001f000c 	.word	0x001f000c
 80080a0:	01bd0041 	.word	0x01bd0041
 80080a4:	0076001c 	.word	0x0076001c
 80080a8:	015a01a1 	.word	0x015a01a1
 80080ac:	016b0162 	.word	0x016b0162
 80080b0:	01b5017f 	.word	0x01b5017f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80080b4:	f890 3420 	ldrb.w	r3, [r0, #1056]	; 0x420
 80080b8:	b163      	cbz	r3, 80080d4 <USBH_Process+0x5a>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80080ba:	2301      	movs	r3, #1
 80080bc:	7003      	strb	r3, [r0, #0]
        USBH_Delay(200U);
 80080be:	20c8      	movs	r0, #200	; 0xc8
 80080c0:	f7fe f896 	bl	80061f0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80080c4:	4620      	mov	r0, r4
 80080c6:	f7fe f829 	bl	800611c <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80080ca:	2300      	movs	r3, #0
 80080cc:	f884 341c 	strb.w	r3, [r4, #1052]	; 0x41c
        phost->Timeout = 0U;
 80080d0:	f8c4 34c8 	str.w	r3, [r4, #1224]	; 0x4c8
    case HOST_ABORT_STATE:
    default :
      break;
  }
  return USBH_OK;
}
 80080d4:	2000      	movs	r0, #0
 80080d6:	b006      	add	sp, #24
 80080d8:	bd70      	pop	{r4, r5, r6, pc}
      if (phost->device.PortEnabled == 1U)
 80080da:	f890 3423 	ldrb.w	r3, [r0, #1059]	; 0x423
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d105      	bne.n	80080ee <USBH_Process+0x74>
        phost->device.RstCnt = 0U;
 80080e2:	2300      	movs	r3, #0
 80080e4:	f880 341f 	strb.w	r3, [r0, #1055]	; 0x41f
        phost->gState = HOST_DEV_ATTACHED;
 80080e8:	2302      	movs	r3, #2
          phost->gState = HOST_INPUT;
 80080ea:	7023      	strb	r3, [r4, #0]
 80080ec:	e7f2      	b.n	80080d4 <USBH_Process+0x5a>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80080ee:	f8d0 34c8 	ldr.w	r3, [r0, #1224]	; 0x4c8
 80080f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080f6:	d90b      	bls.n	8008110 <USBH_Process+0x96>
          phost->device.RstCnt++;
 80080f8:	f890 341f 	ldrb.w	r3, [r0, #1055]	; 0x41f
 80080fc:	3301      	adds	r3, #1
 80080fe:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 8008100:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 8008102:	f880 341f 	strb.w	r3, [r0, #1055]	; 0x41f
          if (phost->device.RstCnt > 3U)
 8008106:	d901      	bls.n	800810c <USBH_Process+0x92>
        phost->gState = HOST_ABORT_STATE;
 8008108:	230d      	movs	r3, #13
 800810a:	e7ee      	b.n	80080ea <USBH_Process+0x70>
            phost->gState = HOST_IDLE;
 800810c:	2300      	movs	r3, #0
 800810e:	e7ec      	b.n	80080ea <USBH_Process+0x70>
          phost->Timeout += 10U;
 8008110:	330a      	adds	r3, #10
 8008112:	f8c0 34c8 	str.w	r3, [r0, #1224]	; 0x4c8
          USBH_Delay(10U);
 8008116:	200a      	movs	r0, #10
 8008118:	f7fe f86a 	bl	80061f0 <USBH_Delay>
 800811c:	e7da      	b.n	80080d4 <USBH_Process+0x5a>
      if (phost->pUser != NULL)
 800811e:	f8d0 34d4 	ldr.w	r3, [r0, #1236]	; 0x4d4
 8008122:	b10b      	cbz	r3, 8008128 <USBH_Process+0xae>
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008124:	2104      	movs	r1, #4
 8008126:	4798      	blx	r3
      USBH_Delay(100U);
 8008128:	2064      	movs	r0, #100	; 0x64
 800812a:	f7fe f861 	bl	80061f0 <USBH_Delay>
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800812e:	4620      	mov	r0, r4
 8008130:	f7fd ffe8 	bl	8006104 <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 8008134:	2305      	movs	r3, #5
 8008136:	7023      	strb	r3, [r4, #0]
      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008138:	f884 041d 	strb.w	r0, [r4, #1053]	; 0x41d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800813c:	2100      	movs	r1, #0
 800813e:	4620      	mov	r0, r4
 8008140:	f000 fcb7 	bl	8008ab2 <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008144:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008146:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008148:	4620      	mov	r0, r4
 800814a:	f000 fcb2 	bl	8008ab2 <USBH_AllocPipe>
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800814e:	79a3      	ldrb	r3, [r4, #6]
 8008150:	9302      	str	r3, [sp, #8]
 8008152:	2500      	movs	r5, #0
 8008154:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008158:	7120      	strb	r0, [r4, #4]
 800815a:	4601      	mov	r1, r0
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	9501      	str	r5, [sp, #4]
 8008160:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 8008164:	2280      	movs	r2, #128	; 0x80
 8008166:	4620      	mov	r0, r4
 8008168:	f000 fc8f 	bl	8008a8a <USBH_OpenPipe>
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800816c:	79a3      	ldrb	r3, [r4, #6]
 800816e:	7961      	ldrb	r1, [r4, #5]
 8008170:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8008174:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
 8008178:	9300      	str	r3, [sp, #0]
 800817a:	462a      	mov	r2, r5
 800817c:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fc82 	bl	8008a8a <USBH_OpenPipe>
      break;
 8008186:	e7a5      	b.n	80080d4 <USBH_Process+0x5a>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 8008188:	7845      	ldrb	r5, [r0, #1]
 800818a:	2d07      	cmp	r5, #7
 800818c:	d82b      	bhi.n	80081e6 <USBH_Process+0x16c>
 800818e:	e8df f005 	tbb	[pc, r5]
 8008192:	4104      	.short	0x4104
 8008194:	af938d71 	.word	0xaf938d71
 8008198:	cdbe      	.short	0xcdbe
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800819a:	2108      	movs	r1, #8
 800819c:	f000 fa6d 	bl	800867a <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 80081a0:	4606      	mov	r6, r0
 80081a2:	b9f0      	cbnz	r0, 80081e2 <USBH_Process+0x168>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80081a4:	f894 342d 	ldrb.w	r3, [r4, #1069]	; 0x42d
 80081a8:	71a3      	strb	r3, [r4, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081aa:	e9cd 0301 	strd	r0, r3, [sp, #4]
 80081ae:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
 80081b2:	9300      	str	r3, [sp, #0]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80081b4:	2501      	movs	r5, #1
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80081b6:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80081ba:	7065      	strb	r5, [r4, #1]
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80081bc:	7921      	ldrb	r1, [r4, #4]
 80081be:	2280      	movs	r2, #128	; 0x80
 80081c0:	4620      	mov	r0, r4
 80081c2:	f000 fc62 	bl	8008a8a <USBH_OpenPipe>
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081c6:	79a3      	ldrb	r3, [r4, #6]
 80081c8:	7961      	ldrb	r1, [r4, #5]
 80081ca:	e9cd 6301 	strd	r6, r3, [sp, #4]
 80081ce:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
 80081d2:	9300      	str	r3, [sp, #0]
 80081d4:	4632      	mov	r2, r6
 80081d6:	f894 341c 	ldrb.w	r3, [r4, #1052]	; 0x41c
 80081da:	4620      	mov	r0, r4
 80081dc:	f000 fc55 	bl	8008a8a <USBH_OpenPipe>
 80081e0:	e01e      	b.n	8008220 <USBH_Process+0x1a6>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081e2:	2803      	cmp	r0, #3
 80081e4:	d001      	beq.n	80081ea <USBH_Process+0x170>
  switch (phost->EnumState)
 80081e6:	2501      	movs	r5, #1
 80081e8:	e01a      	b.n	8008220 <USBH_Process+0x1a6>
        phost->device.EnumCnt++;
 80081ea:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 80081ee:	3301      	adds	r3, #1
 80081f0:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 80081f2:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 80081f4:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 80081f8:	d901      	bls.n	80081fe <USBH_Process+0x184>
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
          phost->gState = HOST_ABORT_STATE;
 80081fa:	230d      	movs	r3, #13
 80081fc:	e008      	b.n	8008210 <USBH_Process+0x196>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081fe:	7961      	ldrb	r1, [r4, #5]
 8008200:	4620      	mov	r0, r4
 8008202:	f000 fc6e 	bl	8008ae2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008206:	7921      	ldrb	r1, [r4, #4]
 8008208:	4620      	mov	r0, r4
 800820a:	f000 fc6a 	bl	8008ae2 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800820e:	2300      	movs	r3, #0
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
 8008210:	7023      	strb	r3, [r4, #0]
 8008212:	e7e8      	b.n	80081e6 <USBH_Process+0x16c>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008214:	2112      	movs	r1, #18
 8008216:	f000 fa30 	bl	800867a <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800821a:	b998      	cbnz	r0, 8008244 <USBH_Process+0x1ca>
        phost->EnumState = ENUM_SET_ADDR;
 800821c:	2302      	movs	r3, #2
 800821e:	7063      	strb	r3, [r4, #1]
      status = USBH_HandleEnum(phost);
 8008220:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
 8008224:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008228:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800822c:	2b00      	cmp	r3, #0
 800822e:	f47f af51 	bne.w	80080d4 <USBH_Process+0x5a>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008232:	f894 3437 	ldrb.w	r3, [r4, #1079]	; 0x437
        phost->device.current_interface = 0U;
 8008236:	f884 2424 	strb.w	r2, [r4, #1060]	; 0x424
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800823a:	2b01      	cmp	r3, #1
 800823c:	f040 8086 	bne.w	800834c <USBH_Process+0x2d2>
        phost->gState = HOST_SET_CONFIGURATION;
 8008240:	2308      	movs	r3, #8
 8008242:	e752      	b.n	80080ea <USBH_Process+0x70>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008244:	2803      	cmp	r0, #3
 8008246:	d1ce      	bne.n	80081e6 <USBH_Process+0x16c>
        phost->device.EnumCnt++;
 8008248:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 800824c:	3301      	adds	r3, #1
 800824e:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 8008250:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 8008252:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 8008256:	d902      	bls.n	800825e <USBH_Process+0x1e4>
          phost->gState = HOST_ABORT_STATE;
 8008258:	230d      	movs	r3, #13
          phost->gState = HOST_IDLE;
 800825a:	7023      	strb	r3, [r4, #0]
 800825c:	e7e0      	b.n	8008220 <USBH_Process+0x1a6>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800825e:	7961      	ldrb	r1, [r4, #5]
 8008260:	4620      	mov	r0, r4
 8008262:	f000 fc3e 	bl	8008ae2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008266:	7921      	ldrb	r1, [r4, #4]
 8008268:	4620      	mov	r0, r4
 800826a:	f000 fc3a 	bl	8008ae2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800826e:	2300      	movs	r3, #0
 8008270:	7063      	strb	r3, [r4, #1]
 8008272:	e7f2      	b.n	800825a <USBH_Process+0x1e0>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008274:	2101      	movs	r1, #1
 8008276:	f000 fb76 	bl	8008966 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 800827a:	4606      	mov	r6, r0
 800827c:	b978      	cbnz	r0, 800829e <USBH_Process+0x224>
        USBH_Delay(2U);
 800827e:	2002      	movs	r0, #2
 8008280:	f7fd ffb6 	bl	80061f0 <USBH_Delay>
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008284:	2303      	movs	r3, #3
 8008286:	7063      	strb	r3, [r4, #1]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008288:	79a3      	ldrb	r3, [r4, #6]
        phost->device.address = USBH_DEVICE_ADDRESS;
 800828a:	2501      	movs	r5, #1
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800828c:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8008290:	f894 341d 	ldrb.w	r3, [r4, #1053]	; 0x41d
 8008294:	9300      	str	r3, [sp, #0]
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008296:	f884 541c 	strb.w	r5, [r4, #1052]	; 0x41c
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800829a:	462b      	mov	r3, r5
 800829c:	e78e      	b.n	80081bc <USBH_Process+0x142>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800829e:	2803      	cmp	r0, #3
 80082a0:	d1a1      	bne.n	80081e6 <USBH_Process+0x16c>
        phost->gState = HOST_ABORT_STATE;
 80082a2:	230d      	movs	r3, #13
 80082a4:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 80082a6:	2300      	movs	r3, #0
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80082a8:	7063      	strb	r3, [r4, #1]
 80082aa:	e79c      	b.n	80081e6 <USBH_Process+0x16c>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80082ac:	2109      	movs	r1, #9
 80082ae:	f000 fa41 	bl	8008734 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 80082b2:	b940      	cbnz	r0, 80082c6 <USBH_Process+0x24c>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80082b4:	2304      	movs	r3, #4
 80082b6:	e7f7      	b.n	80082a8 <USBH_Process+0x22e>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80082b8:	f8b0 143a 	ldrh.w	r1, [r0, #1082]	; 0x43a
 80082bc:	f000 fa3a 	bl	8008734 <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 80082c0:	b908      	cbnz	r0, 80082c6 <USBH_Process+0x24c>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80082c2:	2305      	movs	r3, #5
 80082c4:	e7f0      	b.n	80082a8 <USBH_Process+0x22e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082c6:	2803      	cmp	r0, #3
 80082c8:	d18d      	bne.n	80081e6 <USBH_Process+0x16c>
        phost->device.EnumCnt++;
 80082ca:	f894 341e 	ldrb.w	r3, [r4, #1054]	; 0x41e
 80082ce:	3301      	adds	r3, #1
 80082d0:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 80082d2:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 80082d4:	f884 341e 	strb.w	r3, [r4, #1054]	; 0x41e
        if (phost->device.EnumCnt > 3U)
 80082d8:	d88f      	bhi.n	80081fa <USBH_Process+0x180>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082da:	7961      	ldrb	r1, [r4, #5]
 80082dc:	4620      	mov	r0, r4
 80082de:	f000 fc00 	bl	8008ae2 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082e2:	7921      	ldrb	r1, [r4, #4]
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 fbfc 	bl	8008ae2 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082ea:	2300      	movs	r3, #0
 80082ec:	7063      	strb	r3, [r4, #1]
 80082ee:	e78f      	b.n	8008210 <USBH_Process+0x196>
      if (phost->device.DevDesc.iManufacturer != 0U)
 80082f0:	f890 1434 	ldrb.w	r1, [r0, #1076]	; 0x434
 80082f4:	b129      	cbz	r1, 8008302 <USBH_Process+0x288>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082f6:	23ff      	movs	r3, #255	; 0xff
 80082f8:	f500 7207 	add.w	r2, r0, #540	; 0x21c
 80082fc:	f000 fb0c 	bl	8008918 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8008300:	b908      	cbnz	r0, 8008306 <USBH_Process+0x28c>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008302:	2306      	movs	r3, #6
 8008304:	e7d0      	b.n	80082a8 <USBH_Process+0x22e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008306:	2803      	cmp	r0, #3
 8008308:	f47f af6d 	bne.w	80081e6 <USBH_Process+0x16c>
 800830c:	e7f9      	b.n	8008302 <USBH_Process+0x288>
      if (phost->device.DevDesc.iProduct != 0U)
 800830e:	f890 1435 	ldrb.w	r1, [r0, #1077]	; 0x435
 8008312:	b129      	cbz	r1, 8008320 <USBH_Process+0x2a6>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008314:	23ff      	movs	r3, #255	; 0xff
 8008316:	f500 7207 	add.w	r2, r0, #540	; 0x21c
 800831a:	f000 fafd 	bl	8008918 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 800831e:	b908      	cbnz	r0, 8008324 <USBH_Process+0x2aa>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008320:	2307      	movs	r3, #7
 8008322:	e7c1      	b.n	80082a8 <USBH_Process+0x22e>
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008324:	2803      	cmp	r0, #3
 8008326:	f47f af5e 	bne.w	80081e6 <USBH_Process+0x16c>
 800832a:	e7f9      	b.n	8008320 <USBH_Process+0x2a6>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800832c:	f890 1436 	ldrb.w	r1, [r0, #1078]	; 0x436
 8008330:	b909      	cbnz	r1, 8008336 <USBH_Process+0x2bc>
        }
      }
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
 8008332:	2500      	movs	r5, #0
 8008334:	e774      	b.n	8008220 <USBH_Process+0x1a6>
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008336:	23ff      	movs	r3, #255	; 0xff
 8008338:	f500 7207 	add.w	r2, r0, #540	; 0x21c
 800833c:	f000 faec 	bl	8008918 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8008340:	2800      	cmp	r0, #0
 8008342:	d0f6      	beq.n	8008332 <USBH_Process+0x2b8>
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008344:	1ec5      	subs	r5, r0, #3
 8008346:	bf18      	it	ne
 8008348:	2501      	movne	r5, #1
 800834a:	e769      	b.n	8008220 <USBH_Process+0x1a6>
          phost->gState = HOST_INPUT;
 800834c:	2307      	movs	r3, #7
 800834e:	e6cc      	b.n	80080ea <USBH_Process+0x70>
      if (phost->pUser != NULL)
 8008350:	f8d0 34d4 	ldr.w	r3, [r0, #1236]	; 0x4d4
 8008354:	2b00      	cmp	r3, #0
 8008356:	f43f aebd 	beq.w	80080d4 <USBH_Process+0x5a>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800835a:	2101      	movs	r1, #1
 800835c:	4798      	blx	r3
 800835e:	e76f      	b.n	8008240 <USBH_Process+0x1c6>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008360:	f890 143d 	ldrb.w	r1, [r0, #1085]	; 0x43d
 8008364:	f000 fb0c 	bl	8008980 <USBH_SetCfg>
 8008368:	2800      	cmp	r0, #0
 800836a:	f47f aeb3 	bne.w	80080d4 <USBH_Process+0x5a>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800836e:	2309      	movs	r3, #9
 8008370:	e6bb      	b.n	80080ea <USBH_Process+0x70>
      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008372:	f890 343f 	ldrb.w	r3, [r0, #1087]	; 0x43f
 8008376:	069b      	lsls	r3, r3, #26
 8008378:	d507      	bpl.n	800838a <USBH_Process+0x310>
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800837a:	2101      	movs	r1, #1
 800837c:	f000 fb0d 	bl	800899a <USBH_SetFeature>
 8008380:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8008384:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008388:	b90b      	cbnz	r3, 800838e <USBH_Process+0x314>
        phost->gState = HOST_CHECK_CLASS;
 800838a:	230a      	movs	r3, #10
 800838c:	e6ad      	b.n	80080ea <USBH_Process+0x70>
        else if (status == USBH_NOT_SUPPORTED)
 800838e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8008392:	2b03      	cmp	r3, #3
 8008394:	f47f ae9e 	bne.w	80080d4 <USBH_Process+0x5a>
 8008398:	e7f7      	b.n	800838a <USBH_Process+0x310>
      if (phost->ClassNumber == 0U)
 800839a:	f8d0 3480 	ldr.w	r3, [r0, #1152]	; 0x480
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f43f ae98 	beq.w	80080d4 <USBH_Process+0x5a>
        phost->pActiveClass = NULL;
 80083a4:	2300      	movs	r3, #0
 80083a6:	f8c0 347c 	str.w	r3, [r0, #1148]	; 0x47c
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80083aa:	f8d0 3478 	ldr.w	r3, [r0, #1144]	; 0x478
 80083ae:	f890 2447 	ldrb.w	r2, [r0, #1095]	; 0x447
 80083b2:	7919      	ldrb	r1, [r3, #4]
            phost->pActiveClass = phost->pClass[idx];
 80083b4:	4291      	cmp	r1, r2
 80083b6:	bf18      	it	ne
 80083b8:	2300      	movne	r3, #0
 80083ba:	f8c0 347c 	str.w	r3, [r0, #1148]	; 0x47c
        if (phost->pActiveClass != NULL)
 80083be:	2b00      	cmp	r3, #0
 80083c0:	f43f aea2 	beq.w	8008108 <USBH_Process+0x8e>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	4798      	blx	r3
 80083c8:	2800      	cmp	r0, #0
 80083ca:	f47f ae9d 	bne.w	8008108 <USBH_Process+0x8e>
            phost->gState = HOST_CLASS_REQUEST;
 80083ce:	2306      	movs	r3, #6
 80083d0:	7023      	strb	r3, [r4, #0]
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80083d2:	2103      	movs	r1, #3
 80083d4:	f8d4 34d4 	ldr.w	r3, [r4, #1236]	; 0x4d4
 80083d8:	4620      	mov	r0, r4
 80083da:	4798      	blx	r3
 80083dc:	e67a      	b.n	80080d4 <USBH_Process+0x5a>
      if (phost->pActiveClass != NULL)
 80083de:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f43f ae90 	beq.w	8008108 <USBH_Process+0x8e>
        status = phost->pActiveClass->Requests(phost);
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	4798      	blx	r3
 80083ec:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 80083f0:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80083f4:	b90b      	cbnz	r3, 80083fa <USBH_Process+0x380>
          phost->gState = HOST_CLASS;
 80083f6:	230b      	movs	r3, #11
 80083f8:	e677      	b.n	80080ea <USBH_Process+0x70>
        else if (status == USBH_FAIL)
 80083fa:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80083fe:	2b02      	cmp	r3, #2
 8008400:	f47f ae68 	bne.w	80080d4 <USBH_Process+0x5a>
 8008404:	e680      	b.n	8008108 <USBH_Process+0x8e>
      if (phost->pActiveClass != NULL)
 8008406:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 800840a:	2b00      	cmp	r3, #0
 800840c:	f43f ae62 	beq.w	80080d4 <USBH_Process+0x5a>
        phost->pActiveClass->BgndProcess(phost);
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	4798      	blx	r3
 8008414:	e65e      	b.n	80080d4 <USBH_Process+0x5a>
      phost->device.is_disconnected = 0U;
 8008416:	2500      	movs	r5, #0
 8008418:	f880 5421 	strb.w	r5, [r0, #1057]	; 0x421
      (void)DeInitStateMachine(phost);
 800841c:	f7ff fdb4 	bl	8007f88 <DeInitStateMachine.isra.0>
      if (phost->pActiveClass != NULL)
 8008420:	f8d4 347c 	ldr.w	r3, [r4, #1148]	; 0x47c
 8008424:	b123      	cbz	r3, 8008430 <USBH_Process+0x3b6>
        phost->pActiveClass->DeInit(phost);
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	4620      	mov	r0, r4
 800842a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800842c:	f8c4 547c 	str.w	r5, [r4, #1148]	; 0x47c
      if (phost->pUser != NULL)
 8008430:	f8d4 34d4 	ldr.w	r3, [r4, #1236]	; 0x4d4
 8008434:	b113      	cbz	r3, 800843c <USBH_Process+0x3c2>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008436:	2105      	movs	r1, #5
 8008438:	4620      	mov	r0, r4
 800843a:	4798      	blx	r3
      if (phost->device.is_ReEnumerated == 1U)
 800843c:	f894 3422 	ldrb.w	r3, [r4, #1058]	; 0x422
 8008440:	2b01      	cmp	r3, #1
 8008442:	d106      	bne.n	8008452 <USBH_Process+0x3d8>
        phost->device.is_ReEnumerated = 0U;
 8008444:	2300      	movs	r3, #0
 8008446:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
        (void)USBH_Start(phost);
 800844a:	4620      	mov	r0, r4
 800844c:	f7ff fe0b 	bl	8008066 <USBH_Start>
 8008450:	e640      	b.n	80080d4 <USBH_Process+0x5a>
        (void)USBH_LL_Start(phost);
 8008452:	4620      	mov	r0, r4
 8008454:	f7fd fe48 	bl	80060e8 <USBH_LL_Start>
 8008458:	e63c      	b.n	80080d4 <USBH_Process+0x5a>

0800845a <USBH_LL_SetTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
  phost->Timer = time;
 800845a:	f8c0 14c4 	str.w	r1, [r0, #1220]	; 0x4c4
}
 800845e:	4770      	bx	lr

08008460 <USBH_LL_IncTimer>:
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
  phost->Timer++;
 8008460:	f8d0 24c4 	ldr.w	r2, [r0, #1220]	; 0x4c4
 8008464:	3201      	adds	r2, #1
 8008466:	f8c0 24c4 	str.w	r2, [r0, #1220]	; 0x4c4
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800846a:	7802      	ldrb	r2, [r0, #0]
 800846c:	2a0b      	cmp	r2, #11
 800846e:	d104      	bne.n	800847a <USBH_LL_IncTimer+0x1a>
 8008470:	f8d0 347c 	ldr.w	r3, [r0, #1148]	; 0x47c
 8008474:	b10b      	cbz	r3, 800847a <USBH_LL_IncTimer+0x1a>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008476:	699b      	ldr	r3, [r3, #24]
 8008478:	4718      	bx	r3
}
 800847a:	4770      	bx	lr

0800847c <USBH_LL_PortEnabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 1U;
 800847c:	2301      	movs	r3, #1
 800847e:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
}
 8008482:	4770      	bx	lr

08008484 <USBH_LL_PortDisabled>:
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
  phost->device.PortEnabled = 0U;
 8008484:	2300      	movs	r3, #0
 8008486:	f880 3423 	strb.w	r3, [r0, #1059]	; 0x423

  return;
}
 800848a:	4770      	bx	lr

0800848c <USBH_LL_Connect>:
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
  phost->device.is_connected = 1U;
 800848c:	2301      	movs	r3, #1
 800848e:	f880 3420 	strb.w	r3, [r0, #1056]	; 0x420
  phost->device.is_disconnected = 0U;
 8008492:	2300      	movs	r3, #0
 8008494:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.is_ReEnumerated = 0U;
 8008498:	f880 3422 	strb.w	r3, [r0, #1058]	; 0x422
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 800849c:	4618      	mov	r0, r3
 800849e:	4770      	bx	lr

080084a0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4604      	mov	r4, r0
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80084a4:	2301      	movs	r3, #1
  phost->device.is_connected = 0U;
 80084a6:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 80084a8:	f880 3421 	strb.w	r3, [r0, #1057]	; 0x421
  phost->device.PortEnabled = 0U;
 80084ac:	f880 5423 	strb.w	r5, [r0, #1059]	; 0x423
  phost->device.is_connected = 0U;
 80084b0:	f880 5420 	strb.w	r5, [r0, #1056]	; 0x420

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80084b4:	f7fd fe1f 	bl	80060f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084b8:	7921      	ldrb	r1, [r4, #4]
 80084ba:	4620      	mov	r0, r4
 80084bc:	f000 fb11 	bl	8008ae2 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084c0:	7961      	ldrb	r1, [r4, #5]
 80084c2:	4620      	mov	r0, r4
 80084c4:	f000 fb0d 	bl	8008ae2 <USBH_FreePipe>
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
}
 80084c8:	4628      	mov	r0, r5
 80084ca:	bd38      	pop	{r3, r4, r5, pc}

080084cc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80084cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 80084ce:	7885      	ldrb	r5, [r0, #2]
 80084d0:	2d01      	cmp	r5, #1
{
 80084d2:	4604      	mov	r4, r0
  switch (phost->RequestState)
 80084d4:	d003      	beq.n	80084de <USBH_CtlReq+0x12>
 80084d6:	2d02      	cmp	r5, #2
 80084d8:	d007      	beq.n	80084ea <USBH_CtlReq+0x1e>
            phost->Control.state = CTRL_STATUS_OUT;
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80084da:	2501      	movs	r5, #1
  return status;
 80084dc:	e019      	b.n	8008512 <USBH_CtlReq+0x46>
      phost->Control.buff = buff;
 80084de:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 80084e0:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 80084e2:	7605      	strb	r5, [r0, #24]
      phost->RequestState = CMD_WAIT;
 80084e4:	2302      	movs	r3, #2
        phost->RequestState = CMD_SEND;
 80084e6:	70a3      	strb	r3, [r4, #2]
 80084e8:	e013      	b.n	8008512 <USBH_CtlReq+0x46>
  switch (phost->Control.state)
 80084ea:	7e06      	ldrb	r6, [r0, #24]
 80084ec:	1e73      	subs	r3, r6, #1
 80084ee:	2b0a      	cmp	r3, #10
 80084f0:	d8f3      	bhi.n	80084da <USBH_CtlReq+0xe>
 80084f2:	e8df f003 	tbb	[pc, r3]
 80084f6:	1106      	.short	0x1106
 80084f8:	4e42392f 	.word	0x4e42392f
 80084fc:	8478675d 	.word	0x8478675d
 8008500:	8c          	.byte	0x8c
 8008501:	00          	.byte	0x00
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008502:	7942      	ldrb	r2, [r0, #5]
 8008504:	f100 0110 	add.w	r1, r0, #16
 8008508:	f000 fa61 	bl	80089ce <USBH_CtlSendSetup>
      phost->Control.state = CTRL_SETUP_WAIT;
 800850c:	2302      	movs	r3, #2
 800850e:	7623      	strb	r3, [r4, #24]
 8008510:	4635      	mov	r5, r6
}
 8008512:	4628      	mov	r0, r5
 8008514:	b002      	add	sp, #8
 8008516:	bd70      	pop	{r4, r5, r6, pc}
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008518:	7941      	ldrb	r1, [r0, #5]
 800851a:	f7fd fe35 	bl	8006188 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800851e:	2801      	cmp	r0, #1
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008520:	4605      	mov	r5, r0
      if (URB_Status == USBH_URB_DONE)
 8008522:	d111      	bne.n	8008548 <USBH_CtlReq+0x7c>
        if (phost->Control.setup.b.wLength.w != 0U)
 8008524:	8ae2      	ldrh	r2, [r4, #22]
 8008526:	f994 3010 	ldrsb.w	r3, [r4, #16]
 800852a:	b13a      	cbz	r2, 800853c <USBH_CtlReq+0x70>
          if (direction == USB_D2H)
 800852c:	2b00      	cmp	r3, #0
 800852e:	da02      	bge.n	8008536 <USBH_CtlReq+0x6a>
            phost->Control.state = CTRL_DATA_IN;
 8008530:	2303      	movs	r3, #3
        phost->Control.state = CTRL_IDLE;
 8008532:	7623      	strb	r3, [r4, #24]
 8008534:	e7ed      	b.n	8008512 <USBH_CtlReq+0x46>
            phost->Control.state = CTRL_DATA_OUT;
 8008536:	2305      	movs	r3, #5
    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);

      phost->Control.timer = (uint16_t)phost->Timer;
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008538:	7623      	strb	r3, [r4, #24]
      else if (status == USBH_FAIL)
 800853a:	e7ce      	b.n	80084da <USBH_CtlReq+0xe>
          if (direction == USB_D2H)
 800853c:	2b00      	cmp	r3, #0
 800853e:	da01      	bge.n	8008544 <USBH_CtlReq+0x78>
        phost->Control.state = CTRL_STATUS_OUT;
 8008540:	2309      	movs	r3, #9
 8008542:	e7f9      	b.n	8008538 <USBH_CtlReq+0x6c>
            phost->Control.state = CTRL_STATUS_IN;
 8008544:	2307      	movs	r3, #7
 8008546:	e7f7      	b.n	8008538 <USBH_CtlReq+0x6c>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008548:	2804      	cmp	r0, #4
 800854a:	d001      	beq.n	8008550 <USBH_CtlReq+0x84>
 800854c:	2802      	cmp	r0, #2
 800854e:	d1c4      	bne.n	80084da <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 8008550:	230b      	movs	r3, #11
 8008552:	e7f1      	b.n	8008538 <USBH_CtlReq+0x6c>
      phost->Control.timer = (uint16_t)phost->Timer;
 8008554:	f8d0 34c4 	ldr.w	r3, [r0, #1220]	; 0x4c4
 8008558:	81c3      	strh	r3, [r0, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800855a:	8982      	ldrh	r2, [r0, #12]
 800855c:	7903      	ldrb	r3, [r0, #4]
 800855e:	6881      	ldr	r1, [r0, #8]
 8008560:	f000 fa5c 	bl	8008a1c <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008564:	2304      	movs	r3, #4
 8008566:	e7e7      	b.n	8008538 <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008568:	7901      	ldrb	r1, [r0, #4]
 800856a:	f7fd fe0d 	bl	8006188 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 800856e:	2801      	cmp	r0, #1
 8008570:	d0e6      	beq.n	8008540 <USBH_CtlReq+0x74>
      if (URB_Status == USBH_URB_STALL)
 8008572:	2805      	cmp	r0, #5
 8008574:	d035      	beq.n	80085e2 <USBH_CtlReq+0x116>
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8008576:	2804      	cmp	r0, #4
 8008578:	e7e9      	b.n	800854e <USBH_CtlReq+0x82>
      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800857a:	2501      	movs	r5, #1
 800857c:	9500      	str	r5, [sp, #0]
 800857e:	7943      	ldrb	r3, [r0, #5]
 8008580:	8982      	ldrh	r2, [r0, #12]
 8008582:	6881      	ldr	r1, [r0, #8]
 8008584:	f000 fa33 	bl	80089ee <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8008588:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 800858c:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800858e:	2306      	movs	r3, #6
 8008590:	e7cf      	b.n	8008532 <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008592:	7941      	ldrb	r1, [r0, #5]
 8008594:	f7fd fdf8 	bl	8006188 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8008598:	2801      	cmp	r0, #1
 800859a:	d0d3      	beq.n	8008544 <USBH_CtlReq+0x78>
      else if (URB_Status == USBH_URB_STALL)
 800859c:	2805      	cmp	r0, #5
 800859e:	d020      	beq.n	80085e2 <USBH_CtlReq+0x116>
      else if (URB_Status == USBH_URB_NOTREADY)
 80085a0:	2802      	cmp	r0, #2
 80085a2:	d0c8      	beq.n	8008536 <USBH_CtlReq+0x6a>
        if (URB_Status == USBH_URB_ERROR)
 80085a4:	2804      	cmp	r0, #4
 80085a6:	d198      	bne.n	80084da <USBH_CtlReq+0xe>
          phost->Control.state = CTRL_ERROR;
 80085a8:	230b      	movs	r3, #11
 80085aa:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 80085ac:	2301      	movs	r3, #1
 80085ae:	e79a      	b.n	80084e6 <USBH_CtlReq+0x1a>
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80085b0:	2200      	movs	r2, #0
 80085b2:	7903      	ldrb	r3, [r0, #4]
 80085b4:	4611      	mov	r1, r2
 80085b6:	f000 fa31 	bl	8008a1c <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80085ba:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 80085be:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80085c0:	2308      	movs	r3, #8
 80085c2:	e7b9      	b.n	8008538 <USBH_CtlReq+0x6c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085c4:	7901      	ldrb	r1, [r0, #4]
 80085c6:	f7fd fddf 	bl	8006188 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 80085ca:	2801      	cmp	r0, #1
 80085cc:	d104      	bne.n	80085d8 <USBH_CtlReq+0x10c>
        status = USBH_OK;
 80085ce:	2500      	movs	r5, #0
        phost->RequestState = CMD_SEND;
 80085d0:	2301      	movs	r3, #1
 80085d2:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 80085d4:	2300      	movs	r3, #0
 80085d6:	e7ac      	b.n	8008532 <USBH_CtlReq+0x66>
      else if (URB_Status == USBH_URB_ERROR)
 80085d8:	2804      	cmp	r0, #4
 80085da:	d0b9      	beq.n	8008550 <USBH_CtlReq+0x84>
        if (URB_Status == USBH_URB_STALL)
 80085dc:	2805      	cmp	r0, #5
 80085de:	f47f af7c 	bne.w	80084da <USBH_CtlReq+0xe>
{
 80085e2:	2503      	movs	r5, #3
 80085e4:	e7f4      	b.n	80085d0 <USBH_CtlReq+0x104>
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80085e6:	2501      	movs	r5, #1
 80085e8:	9500      	str	r5, [sp, #0]
 80085ea:	2200      	movs	r2, #0
 80085ec:	7943      	ldrb	r3, [r0, #5]
 80085ee:	4611      	mov	r1, r2
 80085f0:	f000 f9fd 	bl	80089ee <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 80085f4:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
 80085f8:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80085fa:	230a      	movs	r3, #10
 80085fc:	e799      	b.n	8008532 <USBH_CtlReq+0x66>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80085fe:	7941      	ldrb	r1, [r0, #5]
 8008600:	f7fd fdc2 	bl	8006188 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8008604:	2801      	cmp	r0, #1
 8008606:	d0e2      	beq.n	80085ce <USBH_CtlReq+0x102>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008608:	2802      	cmp	r0, #2
 800860a:	d1b4      	bne.n	8008576 <USBH_CtlReq+0xaa>
 800860c:	e798      	b.n	8008540 <USBH_CtlReq+0x74>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800860e:	7e43      	ldrb	r3, [r0, #25]
 8008610:	3301      	adds	r3, #1
 8008612:	b2db      	uxtb	r3, r3
 8008614:	2b02      	cmp	r3, #2
 8008616:	7643      	strb	r3, [r0, #25]
 8008618:	d803      	bhi.n	8008622 <USBH_CtlReq+0x156>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800861a:	2501      	movs	r5, #1
 800861c:	7605      	strb	r5, [r0, #24]
        phost->RequestState = CMD_SEND;
 800861e:	7085      	strb	r5, [r0, #2]
      else if (status == USBH_FAIL)
 8008620:	e777      	b.n	8008512 <USBH_CtlReq+0x46>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008622:	f8d0 34d4 	ldr.w	r3, [r0, #1236]	; 0x4d4
 8008626:	2106      	movs	r1, #6
        phost->Control.errorcount = 0U;
 8008628:	2600      	movs	r6, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800862a:	4798      	blx	r3
        USBH_ErrLog("Control error: Device not responding");

        /* Free control pipes */
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800862c:	7961      	ldrb	r1, [r4, #5]
        phost->Control.errorcount = 0U;
 800862e:	7666      	strb	r6, [r4, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008630:	4620      	mov	r0, r4
 8008632:	f000 fa56 	bl	8008ae2 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008636:	7921      	ldrb	r1, [r4, #4]
 8008638:	4620      	mov	r0, r4
 800863a:	f000 fa52 	bl	8008ae2 <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 800863e:	7026      	strb	r6, [r4, #0]
      else if (status == USBH_FAIL)
 8008640:	e7b4      	b.n	80085ac <USBH_CtlReq+0xe0>

08008642 <USBH_GetDescriptor>:
{
 8008642:	b430      	push	{r4, r5}
 8008644:	460c      	mov	r4, r1
 8008646:	4619      	mov	r1, r3
  if (phost->RequestState == CMD_SEND)
 8008648:	7883      	ldrb	r3, [r0, #2]
{
 800864a:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 800864e:	2b01      	cmp	r3, #1
 8008650:	d10f      	bne.n	8008672 <USBH_GetDescriptor+0x30>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008652:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8008656:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008658:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800865c:	2306      	movs	r3, #6
      phost->Control.setup.b.wIndex.w = 0U;
 800865e:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008662:	7443      	strb	r3, [r0, #17]
      phost->Control.setup.b.wIndex.w = 0U;
 8008664:	f240 4309 	movw	r3, #1033	; 0x409
 8008668:	bf18      	it	ne
 800866a:	2300      	movne	r3, #0
    phost->Control.setup.b.wValue.w = value_idx;
 800866c:	8242      	strh	r2, [r0, #18]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800866e:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = length;
 8008670:	82c5      	strh	r5, [r0, #22]
  return USBH_CtlReq(phost, buff, length);
 8008672:	462a      	mov	r2, r5
}
 8008674:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8008676:	f7ff bf29 	b.w	80084cc <USBH_CtlReq>

0800867a <USBH_Get_DevDesc>:
{
 800867a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  status = USBH_GetDescriptor(phost,
 800867c:	f500 7307 	add.w	r3, r0, #540	; 0x21c
 8008680:	460d      	mov	r5, r1
 8008682:	9100      	str	r1, [sp, #0]
 8008684:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008688:	2100      	movs	r1, #0
{
 800868a:	4604      	mov	r4, r0
  status = USBH_GetDescriptor(phost,
 800868c:	f7ff ffd9 	bl	8008642 <USBH_GetDescriptor>
  if (status == USBH_OK)
 8008690:	2800      	cmp	r0, #0
 8008692:	d147      	bne.n	8008724 <USBH_Get_DevDesc+0xaa>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8008694:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 8008698:	f884 3426 	strb.w	r3, [r4, #1062]	; 0x426
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800869c:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
 80086a0:	f884 3427 	strb.w	r3, [r4, #1063]	; 0x427
  dev_desc->bcdUSB             = LE16(buf +  2);
 80086a4:	f8b4 321e 	ldrh.w	r3, [r4, #542]	; 0x21e
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80086a8:	f894 2223 	ldrb.w	r2, [r4, #547]	; 0x223
  dev_desc->bcdUSB             = LE16(buf +  2);
 80086ac:	f8a4 3428 	strh.w	r3, [r4, #1064]	; 0x428
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 80086b0:	f894 3220 	ldrb.w	r3, [r4, #544]	; 0x220
 80086b4:	f884 342a 	strb.w	r3, [r4, #1066]	; 0x42a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 80086b8:	f894 3221 	ldrb.w	r3, [r4, #545]	; 0x221
 80086bc:	f884 342b 	strb.w	r3, [r4, #1067]	; 0x42b
  switch (dev_desc->bMaxPacketSize)
 80086c0:	2a20      	cmp	r2, #32
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 80086c2:	f894 3222 	ldrb.w	r3, [r4, #546]	; 0x222
 80086c6:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
  switch (dev_desc->bMaxPacketSize)
 80086ca:	d82d      	bhi.n	8008728 <USBH_Get_DevDesc+0xae>
 80086cc:	2a07      	cmp	r2, #7
 80086ce:	d92d      	bls.n	800872c <USBH_Get_DevDesc+0xb2>
 80086d0:	f1a2 0308 	sub.w	r3, r2, #8
 80086d4:	b2d9      	uxtb	r1, r3
 80086d6:	2301      	movs	r3, #1
 80086d8:	408b      	lsls	r3, r1
 80086da:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80086de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086e2:	b31b      	cbz	r3, 800872c <USBH_Get_DevDesc+0xb2>
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 80086e4:	f884 242d 	strb.w	r2, [r4, #1069]	; 0x42d
  if (length > 8U)
 80086e8:	2d08      	cmp	r5, #8
 80086ea:	d91b      	bls.n	8008724 <USBH_Get_DevDesc+0xaa>
    dev_desc->idVendor           = LE16(buf +  8);
 80086ec:	f8b4 3224 	ldrh.w	r3, [r4, #548]	; 0x224
 80086f0:	f8a4 342e 	strh.w	r3, [r4, #1070]	; 0x42e
    dev_desc->idProduct          = LE16(buf + 10);
 80086f4:	f8b4 3226 	ldrh.w	r3, [r4, #550]	; 0x226
 80086f8:	f8a4 3430 	strh.w	r3, [r4, #1072]	; 0x430
    dev_desc->bcdDevice          = LE16(buf + 12);
 80086fc:	f8b4 3228 	ldrh.w	r3, [r4, #552]	; 0x228
 8008700:	f8a4 3432 	strh.w	r3, [r4, #1074]	; 0x432
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8008704:	f894 322a 	ldrb.w	r3, [r4, #554]	; 0x22a
 8008708:	f884 3434 	strb.w	r3, [r4, #1076]	; 0x434
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800870c:	f894 322b 	ldrb.w	r3, [r4, #555]	; 0x22b
 8008710:	f884 3435 	strb.w	r3, [r4, #1077]	; 0x435
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8008714:	f894 322c 	ldrb.w	r3, [r4, #556]	; 0x22c
 8008718:	f884 3436 	strb.w	r3, [r4, #1078]	; 0x436
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800871c:	f894 322d 	ldrb.w	r3, [r4, #557]	; 0x22d
 8008720:	f884 3437 	strb.w	r3, [r4, #1079]	; 0x437
}
 8008724:	b003      	add	sp, #12
 8008726:	bd30      	pop	{r4, r5, pc}
  switch (dev_desc->bMaxPacketSize)
 8008728:	2a40      	cmp	r2, #64	; 0x40
 800872a:	d0db      	beq.n	80086e4 <USBH_Get_DevDesc+0x6a>
      dev_desc->bMaxPacketSize = 64U;
 800872c:	2340      	movs	r3, #64	; 0x40
 800872e:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
      break;
 8008732:	e7d9      	b.n	80086e8 <USBH_Get_DevDesc+0x6e>

08008734 <USBH_Get_CfgDesc>:
{
 8008734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008738:	b087      	sub	sp, #28
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800873a:	f100 041c 	add.w	r4, r0, #28
{
 800873e:	460e      	mov	r6, r1
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008740:	9100      	str	r1, [sp, #0]
 8008742:	4623      	mov	r3, r4
 8008744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008748:	2100      	movs	r1, #0
{
 800874a:	4605      	mov	r5, r0
  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800874c:	f7ff ff79 	bl	8008642 <USBH_GetDescriptor>
  if (status == USBH_OK)
 8008750:	2800      	cmp	r0, #0
 8008752:	d172      	bne.n	800883a <USBH_Get_CfgDesc+0x106>
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008754:	f8b5 801e 	ldrh.w	r8, [r5, #30]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008758:	7f2b      	ldrb	r3, [r5, #28]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800875a:	7f6a      	ldrb	r2, [r5, #29]
 800875c:	f885 2439 	strb.w	r2, [r5, #1081]	; 0x439
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008760:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008764:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
 8008768:	f885 243d 	strb.w	r2, [r5, #1085]	; 0x43d
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800876c:	bf28      	it	cs
 800876e:	f44f 7800 	movcs.w	r8, #512	; 0x200
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008772:	f895 2022 	ldrb.w	r2, [r5, #34]	; 0x22
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8008776:	f885 3438 	strb.w	r3, [r5, #1080]	; 0x438
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800877a:	2b09      	cmp	r3, #9
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800877c:	bf18      	it	ne
 800877e:	2309      	movne	r3, #9
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008780:	f885 243e 	strb.w	r2, [r5, #1086]	; 0x43e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008784:	f895 2023 	ldrb.w	r2, [r5, #35]	; 0x23
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008788:	f895 a020 	ldrb.w	sl, [r5, #32]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800878c:	f885 243f 	strb.w	r2, [r5, #1087]	; 0x43f
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008790:	bf18      	it	ne
 8008792:	f885 3438 	strbne.w	r3, [r5, #1080]	; 0x438
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008796:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800879a:	f8a5 843a 	strh.w	r8, [r5, #1082]	; 0x43a
  if (length > USB_CONFIGURATION_DESC_SIZE)
 800879e:	2e09      	cmp	r6, #9
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80087a0:	f885 a43c 	strb.w	sl, [r5, #1084]	; 0x43c
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80087a4:	f885 2440 	strb.w	r2, [r5, #1088]	; 0x440
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80087a8:	f240 80b0 	bls.w	800890c <USBH_Get_CfgDesc+0x1d8>
  USBH_StatusTypeDef           status = USBH_OK;
 80087ac:	2000      	movs	r0, #0
 80087ae:	462b      	mov	r3, r5
  if (length > USB_CONFIGURATION_DESC_SIZE)
 80087b0:	4686      	mov	lr, r0
    ptr = USB_LEN_CFG_DESC;
 80087b2:	2209      	movs	r2, #9
 80087b4:	fa5f f68e 	uxtb.w	r6, lr
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80087b8:	f1be 0f02 	cmp.w	lr, #2
 80087bc:	d03d      	beq.n	800883a <USBH_Get_CfgDesc+0x106>
 80087be:	4590      	cmp	r8, r2
 80087c0:	d806      	bhi.n	80087d0 <USBH_Get_CfgDesc+0x9c>
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80087c2:	4653      	mov	r3, sl
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	bf28      	it	cs
 80087c8:	2302      	movcs	r3, #2
 80087ca:	42b3      	cmp	r3, r6
 80087cc:	d935      	bls.n	800883a <USBH_Get_CfgDesc+0x106>
 80087ce:	e033      	b.n	8008838 <USBH_Get_CfgDesc+0x104>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80087d0:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80087d2:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80087d4:	440a      	add	r2, r1
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80087d6:	7861      	ldrb	r1, [r4, #1]
 80087d8:	2904      	cmp	r1, #4
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80087da:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80087dc:	d1ec      	bne.n	80087b8 <USBH_Get_CfgDesc+0x84>
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80087de:	7821      	ldrb	r1, [r4, #0]
 80087e0:	2909      	cmp	r1, #9
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80087e2:	bf1c      	itt	ne
 80087e4:	2109      	movne	r1, #9
 80087e6:	7021      	strbne	r1, [r4, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80087e8:	7821      	ldrb	r1, [r4, #0]
 80087ea:	f883 1442 	strb.w	r1, [r3, #1090]	; 0x442
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80087ee:	7861      	ldrb	r1, [r4, #1]
 80087f0:	f883 1443 	strb.w	r1, [r3, #1091]	; 0x443
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80087f4:	78a1      	ldrb	r1, [r4, #2]
 80087f6:	f883 1444 	strb.w	r1, [r3, #1092]	; 0x444
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80087fa:	78e1      	ldrb	r1, [r4, #3]
 80087fc:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008800:	7921      	ldrb	r1, [r4, #4]
 8008802:	f883 1446 	strb.w	r1, [r3, #1094]	; 0x446
 8008806:	9102      	str	r1, [sp, #8]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008808:	7961      	ldrb	r1, [r4, #5]
 800880a:	f883 1447 	strb.w	r1, [r3, #1095]	; 0x447
 800880e:	9103      	str	r1, [sp, #12]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008810:	79a1      	ldrb	r1, [r4, #6]
 8008812:	f883 1448 	strb.w	r1, [r3, #1096]	; 0x448
 8008816:	9104      	str	r1, [sp, #16]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008818:	79e1      	ldrb	r1, [r4, #7]
 800881a:	f883 1449 	strb.w	r1, [r3, #1097]	; 0x449
 800881e:	9105      	str	r1, [sp, #20]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008820:	7a21      	ldrb	r1, [r4, #8]
 8008822:	f883 144a 	strb.w	r1, [r3, #1098]	; 0x44a
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008826:	211a      	movs	r1, #26
        ep_ix = 0U;
 8008828:	2700      	movs	r7, #0
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800882a:	fb01 fb0e 	mul.w	fp, r1, lr
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800882e:	9902      	ldr	r1, [sp, #8]
 8008830:	428f      	cmp	r7, r1
 8008832:	d26d      	bcs.n	8008910 <USBH_Get_CfgDesc+0x1dc>
 8008834:	4590      	cmp	r8, r2
 8008836:	d803      	bhi.n	8008840 <USBH_Get_CfgDesc+0x10c>
          return USBH_NOT_SUPPORTED;
 8008838:	2003      	movs	r0, #3
}
 800883a:	b007      	add	sp, #28
 800883c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008840:	7821      	ldrb	r1, [r4, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008842:	440c      	add	r4, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008844:	440a      	add	r2, r1
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008846:	7861      	ldrb	r1, [r4, #1]
 8008848:	2905      	cmp	r1, #5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800884a:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800884c:	d1ef      	bne.n	800882e <USBH_Get_CfgDesc+0xfa>
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800884e:	9803      	ldr	r0, [sp, #12]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008850:	7821      	ldrb	r1, [r4, #0]
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8008852:	2801      	cmp	r0, #1
 8008854:	d147      	bne.n	80088e6 <USBH_Get_CfgDesc+0x1b2>
 8008856:	9804      	ldr	r0, [sp, #16]
 8008858:	2802      	cmp	r0, #2
 800885a:	d144      	bne.n	80088e6 <USBH_Get_CfgDesc+0x1b2>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800885c:	9805      	ldr	r0, [sp, #20]
 800885e:	b920      	cbnz	r0, 800886a <USBH_Get_CfgDesc+0x136>
 8008860:	2909      	cmp	r1, #9
 8008862:	d002      	beq.n	800886a <USBH_Get_CfgDesc+0x136>
                pdesc->bLength = 0x09U;
 8008864:	f04f 0109 	mov.w	r1, #9
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008868:	7021      	strb	r1, [r4, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800886a:	1c78      	adds	r0, r7, #1
 800886c:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8008870:	4428      	add	r0, r5
 8008872:	7821      	ldrb	r1, [r4, #0]
 8008874:	f880 1444 	strb.w	r1, [r0, #1092]	; 0x444
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8008878:	7861      	ldrb	r1, [r4, #1]
 800887a:	f880 1445 	strb.w	r1, [r0, #1093]	; 0x445
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800887e:	78a1      	ldrb	r1, [r4, #2]
 8008880:	f880 1446 	strb.w	r1, [r0, #1094]	; 0x446
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8008884:	f894 c003 	ldrb.w	ip, [r4, #3]
 8008888:	f880 c447 	strb.w	ip, [r0, #1095]	; 0x447
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800888c:	88a1      	ldrh	r1, [r4, #4]
 800888e:	f8a0 1448 	strh.w	r1, [r0, #1096]	; 0x448
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 8008892:	79a6      	ldrb	r6, [r4, #6]
 8008894:	f880 644a 	strb.w	r6, [r0, #1098]	; 0x44a
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8008898:	b351      	cbz	r1, 80088f0 <USBH_Get_CfgDesc+0x1bc>
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800889a:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 800889e:	f021 0107 	bic.w	r1, r1, #7
 80088a2:	f8a0 1448 	strh.w	r1, [r0, #1096]	; 0x448
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80088a6:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 80088aa:	1c78      	adds	r0, r7, #1
 80088ac:	f419 6fc0 	tst.w	r9, #1536	; 0x600
 80088b0:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 80088b4:	4428      	add	r0, r5
 80088b6:	b209      	sxth	r1, r1
 80088b8:	bf0c      	ite	eq
 80088ba:	f3c9 090a 	ubfxeq	r9, r9, #0, #11
 80088be:	f44f 7900 	movne.w	r9, #512	; 0x200
 80088c2:	ea41 0109 	orr.w	r1, r1, r9
 80088c6:	f8a0 1448 	strh.w	r1, [r0, #1096]	; 0x448
  USBH_StatusTypeDef status = USBH_OK;
 80088ca:	2000      	movs	r0, #0
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80088cc:	f895 141d 	ldrb.w	r1, [r5, #1053]	; 0x41d
 80088d0:	b981      	cbnz	r1, 80088f4 <USBH_Get_CfgDesc+0x1c0>
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80088d2:	f01c 0f01 	tst.w	ip, #1
 80088d6:	d003      	beq.n	80088e0 <USBH_Get_CfgDesc+0x1ac>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80088d8:	3e01      	subs	r6, #1
        status = USBH_NOT_SUPPORTED;
 80088da:	2e0f      	cmp	r6, #15
 80088dc:	bf88      	it	hi
 80088de:	2003      	movhi	r0, #3
            ep_ix++;
 80088e0:	3701      	adds	r7, #1
 80088e2:	b2ff      	uxtb	r7, r7
 80088e4:	e7a3      	b.n	800882e <USBH_Get_CfgDesc+0xfa>
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 80088e6:	2907      	cmp	r1, #7
 80088e8:	d0bf      	beq.n	800886a <USBH_Get_CfgDesc+0x136>
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80088ea:	f04f 0107 	mov.w	r1, #7
 80088ee:	e7bb      	b.n	8008868 <USBH_Get_CfgDesc+0x134>
    status = USBH_NOT_SUPPORTED;
 80088f0:	2003      	movs	r0, #3
 80088f2:	e7eb      	b.n	80088cc <USBH_Get_CfgDesc+0x198>
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80088f4:	f00c 0c03 	and.w	ip, ip, #3
 80088f8:	f1bc 0f01 	cmp.w	ip, #1
 80088fc:	d0ec      	beq.n	80088d8 <USBH_Get_CfgDesc+0x1a4>
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80088fe:	f1bc 0f03 	cmp.w	ip, #3
 8008902:	d1ed      	bne.n	80088e0 <USBH_Get_CfgDesc+0x1ac>
        status = USBH_NOT_SUPPORTED;
 8008904:	2e00      	cmp	r6, #0
 8008906:	bf08      	it	eq
 8008908:	2003      	moveq	r0, #3
 800890a:	e7e9      	b.n	80088e0 <USBH_Get_CfgDesc+0x1ac>
  USBH_StatusTypeDef           status = USBH_OK;
 800890c:	2000      	movs	r0, #0
  return status;
 800890e:	e794      	b.n	800883a <USBH_Get_CfgDesc+0x106>
        if_ix++;
 8008910:	f10e 0e01 	add.w	lr, lr, #1
 8008914:	331a      	adds	r3, #26
 8008916:	e74d      	b.n	80087b4 <USBH_Get_CfgDesc+0x80>

08008918 <USBH_Get_StringDesc>:
{
 8008918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                              phost->device.Data, length);
 800891a:	f500 7607 	add.w	r6, r0, #540	; 0x21c
{
 800891e:	4615      	mov	r5, r2
 8008920:	461f      	mov	r7, r3
  status = USBH_GetDescriptor(phost,
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 8008928:	4633      	mov	r3, r6
 800892a:	2100      	movs	r1, #0
{
 800892c:	4604      	mov	r4, r0
  status = USBH_GetDescriptor(phost,
 800892e:	f7ff fe88 	bl	8008642 <USBH_GetDescriptor>
  if (status == USBH_OK)
 8008932:	b978      	cbnz	r0, 8008954 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008934:	f894 321d 	ldrb.w	r3, [r4, #541]	; 0x21d
 8008938:	2b03      	cmp	r3, #3
 800893a:	d10b      	bne.n	8008954 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800893c:	f894 421c 	ldrb.w	r4, [r4, #540]	; 0x21c
 8008940:	1ea1      	subs	r1, r4, #2
 8008942:	42b9      	cmp	r1, r7
 8008944:	bf28      	it	cs
 8008946:	4639      	movcs	r1, r7
 8008948:	b289      	uxth	r1, r1
    for (idx = 0U; idx < strlength; idx += 2U)
 800894a:	4604      	mov	r4, r0
 800894c:	42a1      	cmp	r1, r4
 800894e:	d803      	bhi.n	8008958 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 8008950:	2300      	movs	r3, #0
 8008952:	702b      	strb	r3, [r5, #0]
}
 8008954:	b003      	add	sp, #12
 8008956:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8008958:	1933      	adds	r3, r6, r4
    for (idx = 0U; idx < strlength; idx += 2U)
 800895a:	3402      	adds	r4, #2
      *pdest =  psrc[idx];
 800895c:	789b      	ldrb	r3, [r3, #2]
 800895e:	f805 3b01 	strb.w	r3, [r5], #1
    for (idx = 0U; idx < strlength; idx += 2U)
 8008962:	b2a4      	uxth	r4, r4
 8008964:	e7f2      	b.n	800894c <USBH_Get_StringDesc+0x34>

08008966 <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 8008966:	7883      	ldrb	r3, [r0, #2]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d105      	bne.n	8008978 <USBH_SetAddress+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800896c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8008970:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 8008972:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008974:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008976:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 8008978:	2200      	movs	r2, #0
 800897a:	4611      	mov	r1, r2
 800897c:	f7ff bda6 	b.w	80084cc <USBH_CtlReq>

08008980 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 8008980:	7883      	ldrb	r3, [r0, #2]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d105      	bne.n	8008992 <USBH_SetCfg+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008986:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800898a:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 800898c:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = cfg_idx;
 800898e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008990:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 8008992:	2200      	movs	r2, #0
 8008994:	4611      	mov	r1, r2
 8008996:	f7ff bd99 	b.w	80084cc <USBH_CtlReq>

0800899a <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 800899a:	7883      	ldrb	r3, [r0, #2]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d105      	bne.n	80089ac <USBH_SetFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80089a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80089a4:	8203      	strh	r3, [r0, #16]
    phost->Control.setup.b.wIndex.w = 0U;
 80089a6:	2300      	movs	r3, #0
    phost->Control.setup.b.wValue.w = wValue;
 80089a8:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80089aa:	6143      	str	r3, [r0, #20]
  return USBH_CtlReq(phost, NULL, 0U);
 80089ac:	2200      	movs	r2, #0
 80089ae:	4611      	mov	r1, r2
 80089b0:	f7ff bd8c 	b.w	80084cc <USBH_CtlReq>

080089b4 <USBH_ClrFeature>:
  if (phost->RequestState == CMD_SEND)
 80089b4:	7883      	ldrb	r3, [r0, #2]
 80089b6:	2b01      	cmp	r3, #1
 80089b8:	d105      	bne.n	80089c6 <USBH_ClrFeature+0x12>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80089ba:	f44f 7381 	mov.w	r3, #258	; 0x102
 80089be:	6103      	str	r3, [r0, #16]
    phost->Control.setup.b.wLength.w = 0U;
 80089c0:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 80089c2:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80089c4:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, NULL, 0U);
 80089c6:	2200      	movs	r2, #0
 80089c8:	4611      	mov	r1, r2
 80089ca:	f7ff bd7f 	b.w	80084cc <USBH_CtlReq>

080089ce <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80089ce:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089d0:	2400      	movs	r4, #0
{
 80089d2:	460b      	mov	r3, r1
 80089d4:	4611      	mov	r1, r2
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80089d6:	2208      	movs	r2, #8
 80089d8:	e9cd 2402 	strd	r2, r4, [sp, #8]
 80089dc:	e9cd 4300 	strd	r4, r3, [sp]
 80089e0:	4622      	mov	r2, r4
 80089e2:	4623      	mov	r3, r4
 80089e4:	f7fd fbbd 	bl	8006162 <USBH_LL_SubmitURB>
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
}
 80089e8:	4620      	mov	r0, r4
 80089ea:	b004      	add	sp, #16
 80089ec:	bd10      	pop	{r4, pc}

080089ee <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80089ee:	b530      	push	{r4, r5, lr}
 80089f0:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 80089f2:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
 80089f6:	460c      	mov	r4, r1
  {
    do_ping = 0U;
 80089f8:	2d00      	cmp	r5, #0
{
 80089fa:	4619      	mov	r1, r3
 80089fc:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a00:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 8008a02:	bf18      	it	ne
 8008a04:	2300      	movne	r3, #0
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	2300      	movs	r3, #0
 8008a10:	461a      	mov	r2, r3
 8008a12:	f7fd fba6 	bl	8006162 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 8008a16:	2000      	movs	r0, #0
 8008a18:	b005      	add	sp, #20
 8008a1a:	bd30      	pop	{r4, r5, pc}

08008a1c <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008a1c:	b530      	push	{r4, r5, lr}
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a1e:	2400      	movs	r4, #0
{
 8008a20:	b085      	sub	sp, #20
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a22:	e9cd 2402 	strd	r2, r4, [sp, #8]
{
 8008a26:	460d      	mov	r5, r1
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a28:	2201      	movs	r2, #1
{
 8008a2a:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a2c:	9501      	str	r5, [sp, #4]
 8008a2e:	9200      	str	r2, [sp, #0]
 8008a30:	4623      	mov	r3, r4
 8008a32:	f7fd fb96 	bl	8006162 <USBH_LL_SubmitURB>
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;

}
 8008a36:	4620      	mov	r0, r4
 8008a38:	b005      	add	sp, #20
 8008a3a:	bd30      	pop	{r4, r5, pc}

08008a3c <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008a3c:	b530      	push	{r4, r5, lr}
 8008a3e:	b085      	sub	sp, #20
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008a40:	f890 541d 	ldrb.w	r5, [r0, #1053]	; 0x41d
{
 8008a44:	460c      	mov	r4, r1
  {
    do_ping = 0U;
 8008a46:	2d00      	cmp	r5, #0
{
 8008a48:	4619      	mov	r1, r3
 8008a4a:	f89d 3020 	ldrb.w	r3, [sp, #32]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a4e:	9401      	str	r4, [sp, #4]
    do_ping = 0U;
 8008a50:	bf18      	it	ne
 8008a52:	2300      	movne	r3, #0
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a58:	2301      	movs	r3, #1
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2302      	movs	r3, #2
 8008a60:	f7fd fb7f 	bl	8006162 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
}
 8008a64:	2000      	movs	r0, #0
 8008a66:	b005      	add	sp, #20
 8008a68:	bd30      	pop	{r4, r5, pc}

08008a6a <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008a6a:	b530      	push	{r4, r5, lr}
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a6c:	2400      	movs	r4, #0
{
 8008a6e:	b085      	sub	sp, #20
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a70:	e9cd 2402 	strd	r2, r4, [sp, #8]
{
 8008a74:	460d      	mov	r5, r1
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a76:	2201      	movs	r2, #1
{
 8008a78:	4619      	mov	r1, r3
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a7a:	9501      	str	r5, [sp, #4]
 8008a7c:	9200      	str	r2, [sp, #0]
 8008a7e:	2302      	movs	r3, #2
 8008a80:	f7fd fb6f 	bl	8006162 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
}
 8008a84:	4620      	mov	r0, r4
 8008a86:	b005      	add	sp, #20
 8008a88:	bd30      	pop	{r4, r5, pc}

08008a8a <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008a8a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008a8c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8008a90:	9402      	str	r4, [sp, #8]
 8008a92:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8008a96:	9401      	str	r4, [sp, #4]
 8008a98:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8008a9c:	9400      	str	r4, [sp, #0]
 8008a9e:	f7fd fb48 	bl	8006132 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 8008aa2:	2000      	movs	r0, #0
 8008aa4:	b004      	add	sp, #16
 8008aa6:	bd10      	pop	{r4, pc}

08008aa8 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008aa8:	b508      	push	{r3, lr}
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008aaa:	f7fd fb53 	bl	8006154 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 8008aae:	2000      	movs	r0, #0
 8008ab0:	bd08      	pop	{r3, pc}

08008ab2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008ab2:	b530      	push	{r4, r5, lr}
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f200 4484 	addw	r4, r0, #1156	; 0x484
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008aba:	f854 5b04 	ldr.w	r5, [r4], #4
 8008abe:	042d      	lsls	r5, r5, #16
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	d408      	bmi.n	8008ad6 <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008ac4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008ac8:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
 8008acc:	b292      	uxth	r2, r2
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008ace:	f8c0 1484 	str.w	r1, [r0, #1156]	; 0x484
}
 8008ad2:	b2d0      	uxtb	r0, r2
 8008ad4:	bd30      	pop	{r4, r5, pc}
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	2b10      	cmp	r3, #16
 8008ada:	d1ee      	bne.n	8008aba <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
 8008adc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ae0:	e7f7      	b.n	8008ad2 <USBH_AllocPipe+0x20>

08008ae2 <USBH_FreePipe>:
  if (idx < USBH_MAX_PIPES_NBR)
 8008ae2:	290f      	cmp	r1, #15
    phost->Pipes[idx] &= 0x7FFFU;
 8008ae4:	bf98      	it	ls
 8008ae6:	eb00 0181 	addls.w	r1, r0, r1, lsl #2
}
 8008aea:	f04f 0000 	mov.w	r0, #0
    phost->Pipes[idx] &= 0x7FFFU;
 8008aee:	bf9e      	ittt	ls
 8008af0:	f8d1 3484 	ldrls.w	r3, [r1, #1156]	; 0x484
 8008af4:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 8008af8:	f8c1 3484 	strls.w	r3, [r1, #1156]	; 0x484
}
 8008afc:	4770      	bx	lr
	...

08008b00 <__libc_init_array>:
 8008b00:	b570      	push	{r4, r5, r6, lr}
 8008b02:	4d0d      	ldr	r5, [pc, #52]	; (8008b38 <__libc_init_array+0x38>)
 8008b04:	4c0d      	ldr	r4, [pc, #52]	; (8008b3c <__libc_init_array+0x3c>)
 8008b06:	1b64      	subs	r4, r4, r5
 8008b08:	10a4      	asrs	r4, r4, #2
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	42a6      	cmp	r6, r4
 8008b0e:	d109      	bne.n	8008b24 <__libc_init_array+0x24>
 8008b10:	4d0b      	ldr	r5, [pc, #44]	; (8008b40 <__libc_init_array+0x40>)
 8008b12:	4c0c      	ldr	r4, [pc, #48]	; (8008b44 <__libc_init_array+0x44>)
 8008b14:	f000 f94a 	bl	8008dac <_init>
 8008b18:	1b64      	subs	r4, r4, r5
 8008b1a:	10a4      	asrs	r4, r4, #2
 8008b1c:	2600      	movs	r6, #0
 8008b1e:	42a6      	cmp	r6, r4
 8008b20:	d105      	bne.n	8008b2e <__libc_init_array+0x2e>
 8008b22:	bd70      	pop	{r4, r5, r6, pc}
 8008b24:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b28:	4798      	blx	r3
 8008b2a:	3601      	adds	r6, #1
 8008b2c:	e7ee      	b.n	8008b0c <__libc_init_array+0xc>
 8008b2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b32:	4798      	blx	r3
 8008b34:	3601      	adds	r6, #1
 8008b36:	e7f2      	b.n	8008b1e <__libc_init_array+0x1e>
 8008b38:	08014aec 	.word	0x08014aec
 8008b3c:	08014aec 	.word	0x08014aec
 8008b40:	08014aec 	.word	0x08014aec
 8008b44:	08014af0 	.word	0x08014af0

08008b48 <malloc>:
 8008b48:	4b02      	ldr	r3, [pc, #8]	; (8008b54 <malloc+0xc>)
 8008b4a:	4601      	mov	r1, r0
 8008b4c:	6818      	ldr	r0, [r3, #0]
 8008b4e:	f000 b88d 	b.w	8008c6c <_malloc_r>
 8008b52:	bf00      	nop
 8008b54:	200000fc 	.word	0x200000fc

08008b58 <free>:
 8008b58:	4b02      	ldr	r3, [pc, #8]	; (8008b64 <free+0xc>)
 8008b5a:	4601      	mov	r1, r0
 8008b5c:	6818      	ldr	r0, [r3, #0]
 8008b5e:	f000 b819 	b.w	8008b94 <_free_r>
 8008b62:	bf00      	nop
 8008b64:	200000fc 	.word	0x200000fc

08008b68 <memcpy>:
 8008b68:	440a      	add	r2, r1
 8008b6a:	4291      	cmp	r1, r2
 8008b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b70:	d100      	bne.n	8008b74 <memcpy+0xc>
 8008b72:	4770      	bx	lr
 8008b74:	b510      	push	{r4, lr}
 8008b76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b7e:	4291      	cmp	r1, r2
 8008b80:	d1f9      	bne.n	8008b76 <memcpy+0xe>
 8008b82:	bd10      	pop	{r4, pc}

08008b84 <memset>:
 8008b84:	4402      	add	r2, r0
 8008b86:	4603      	mov	r3, r0
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d100      	bne.n	8008b8e <memset+0xa>
 8008b8c:	4770      	bx	lr
 8008b8e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b92:	e7f9      	b.n	8008b88 <memset+0x4>

08008b94 <_free_r>:
 8008b94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b96:	2900      	cmp	r1, #0
 8008b98:	d044      	beq.n	8008c24 <_free_r+0x90>
 8008b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b9e:	9001      	str	r0, [sp, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f1a1 0404 	sub.w	r4, r1, #4
 8008ba6:	bfb8      	it	lt
 8008ba8:	18e4      	addlt	r4, r4, r3
 8008baa:	f000 f8e3 	bl	8008d74 <__malloc_lock>
 8008bae:	4a1e      	ldr	r2, [pc, #120]	; (8008c28 <_free_r+0x94>)
 8008bb0:	9801      	ldr	r0, [sp, #4]
 8008bb2:	6813      	ldr	r3, [r2, #0]
 8008bb4:	b933      	cbnz	r3, 8008bc4 <_free_r+0x30>
 8008bb6:	6063      	str	r3, [r4, #4]
 8008bb8:	6014      	str	r4, [r2, #0]
 8008bba:	b003      	add	sp, #12
 8008bbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bc0:	f000 b8de 	b.w	8008d80 <__malloc_unlock>
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	d908      	bls.n	8008bda <_free_r+0x46>
 8008bc8:	6825      	ldr	r5, [r4, #0]
 8008bca:	1961      	adds	r1, r4, r5
 8008bcc:	428b      	cmp	r3, r1
 8008bce:	bf01      	itttt	eq
 8008bd0:	6819      	ldreq	r1, [r3, #0]
 8008bd2:	685b      	ldreq	r3, [r3, #4]
 8008bd4:	1949      	addeq	r1, r1, r5
 8008bd6:	6021      	streq	r1, [r4, #0]
 8008bd8:	e7ed      	b.n	8008bb6 <_free_r+0x22>
 8008bda:	461a      	mov	r2, r3
 8008bdc:	685b      	ldr	r3, [r3, #4]
 8008bde:	b10b      	cbz	r3, 8008be4 <_free_r+0x50>
 8008be0:	42a3      	cmp	r3, r4
 8008be2:	d9fa      	bls.n	8008bda <_free_r+0x46>
 8008be4:	6811      	ldr	r1, [r2, #0]
 8008be6:	1855      	adds	r5, r2, r1
 8008be8:	42a5      	cmp	r5, r4
 8008bea:	d10b      	bne.n	8008c04 <_free_r+0x70>
 8008bec:	6824      	ldr	r4, [r4, #0]
 8008bee:	4421      	add	r1, r4
 8008bf0:	1854      	adds	r4, r2, r1
 8008bf2:	42a3      	cmp	r3, r4
 8008bf4:	6011      	str	r1, [r2, #0]
 8008bf6:	d1e0      	bne.n	8008bba <_free_r+0x26>
 8008bf8:	681c      	ldr	r4, [r3, #0]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	6053      	str	r3, [r2, #4]
 8008bfe:	4421      	add	r1, r4
 8008c00:	6011      	str	r1, [r2, #0]
 8008c02:	e7da      	b.n	8008bba <_free_r+0x26>
 8008c04:	d902      	bls.n	8008c0c <_free_r+0x78>
 8008c06:	230c      	movs	r3, #12
 8008c08:	6003      	str	r3, [r0, #0]
 8008c0a:	e7d6      	b.n	8008bba <_free_r+0x26>
 8008c0c:	6825      	ldr	r5, [r4, #0]
 8008c0e:	1961      	adds	r1, r4, r5
 8008c10:	428b      	cmp	r3, r1
 8008c12:	bf04      	itt	eq
 8008c14:	6819      	ldreq	r1, [r3, #0]
 8008c16:	685b      	ldreq	r3, [r3, #4]
 8008c18:	6063      	str	r3, [r4, #4]
 8008c1a:	bf04      	itt	eq
 8008c1c:	1949      	addeq	r1, r1, r5
 8008c1e:	6021      	streq	r1, [r4, #0]
 8008c20:	6054      	str	r4, [r2, #4]
 8008c22:	e7ca      	b.n	8008bba <_free_r+0x26>
 8008c24:	b003      	add	sp, #12
 8008c26:	bd30      	pop	{r4, r5, pc}
 8008c28:	2000139c 	.word	0x2000139c

08008c2c <sbrk_aligned>:
 8008c2c:	b570      	push	{r4, r5, r6, lr}
 8008c2e:	4e0e      	ldr	r6, [pc, #56]	; (8008c68 <sbrk_aligned+0x3c>)
 8008c30:	460c      	mov	r4, r1
 8008c32:	6831      	ldr	r1, [r6, #0]
 8008c34:	4605      	mov	r5, r0
 8008c36:	b911      	cbnz	r1, 8008c3e <sbrk_aligned+0x12>
 8008c38:	f000 f88c 	bl	8008d54 <_sbrk_r>
 8008c3c:	6030      	str	r0, [r6, #0]
 8008c3e:	4621      	mov	r1, r4
 8008c40:	4628      	mov	r0, r5
 8008c42:	f000 f887 	bl	8008d54 <_sbrk_r>
 8008c46:	1c43      	adds	r3, r0, #1
 8008c48:	d00a      	beq.n	8008c60 <sbrk_aligned+0x34>
 8008c4a:	1cc4      	adds	r4, r0, #3
 8008c4c:	f024 0403 	bic.w	r4, r4, #3
 8008c50:	42a0      	cmp	r0, r4
 8008c52:	d007      	beq.n	8008c64 <sbrk_aligned+0x38>
 8008c54:	1a21      	subs	r1, r4, r0
 8008c56:	4628      	mov	r0, r5
 8008c58:	f000 f87c 	bl	8008d54 <_sbrk_r>
 8008c5c:	3001      	adds	r0, #1
 8008c5e:	d101      	bne.n	8008c64 <sbrk_aligned+0x38>
 8008c60:	f04f 34ff 	mov.w	r4, #4294967295
 8008c64:	4620      	mov	r0, r4
 8008c66:	bd70      	pop	{r4, r5, r6, pc}
 8008c68:	200013a0 	.word	0x200013a0

08008c6c <_malloc_r>:
 8008c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c70:	1ccd      	adds	r5, r1, #3
 8008c72:	f025 0503 	bic.w	r5, r5, #3
 8008c76:	3508      	adds	r5, #8
 8008c78:	2d0c      	cmp	r5, #12
 8008c7a:	bf38      	it	cc
 8008c7c:	250c      	movcc	r5, #12
 8008c7e:	2d00      	cmp	r5, #0
 8008c80:	4607      	mov	r7, r0
 8008c82:	db01      	blt.n	8008c88 <_malloc_r+0x1c>
 8008c84:	42a9      	cmp	r1, r5
 8008c86:	d905      	bls.n	8008c94 <_malloc_r+0x28>
 8008c88:	230c      	movs	r3, #12
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	2600      	movs	r6, #0
 8008c8e:	4630      	mov	r0, r6
 8008c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c94:	4e2e      	ldr	r6, [pc, #184]	; (8008d50 <_malloc_r+0xe4>)
 8008c96:	f000 f86d 	bl	8008d74 <__malloc_lock>
 8008c9a:	6833      	ldr	r3, [r6, #0]
 8008c9c:	461c      	mov	r4, r3
 8008c9e:	bb34      	cbnz	r4, 8008cee <_malloc_r+0x82>
 8008ca0:	4629      	mov	r1, r5
 8008ca2:	4638      	mov	r0, r7
 8008ca4:	f7ff ffc2 	bl	8008c2c <sbrk_aligned>
 8008ca8:	1c43      	adds	r3, r0, #1
 8008caa:	4604      	mov	r4, r0
 8008cac:	d14d      	bne.n	8008d4a <_malloc_r+0xde>
 8008cae:	6834      	ldr	r4, [r6, #0]
 8008cb0:	4626      	mov	r6, r4
 8008cb2:	2e00      	cmp	r6, #0
 8008cb4:	d140      	bne.n	8008d38 <_malloc_r+0xcc>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	4631      	mov	r1, r6
 8008cba:	4638      	mov	r0, r7
 8008cbc:	eb04 0803 	add.w	r8, r4, r3
 8008cc0:	f000 f848 	bl	8008d54 <_sbrk_r>
 8008cc4:	4580      	cmp	r8, r0
 8008cc6:	d13a      	bne.n	8008d3e <_malloc_r+0xd2>
 8008cc8:	6821      	ldr	r1, [r4, #0]
 8008cca:	3503      	adds	r5, #3
 8008ccc:	1a6d      	subs	r5, r5, r1
 8008cce:	f025 0503 	bic.w	r5, r5, #3
 8008cd2:	3508      	adds	r5, #8
 8008cd4:	2d0c      	cmp	r5, #12
 8008cd6:	bf38      	it	cc
 8008cd8:	250c      	movcc	r5, #12
 8008cda:	4629      	mov	r1, r5
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f7ff ffa5 	bl	8008c2c <sbrk_aligned>
 8008ce2:	3001      	adds	r0, #1
 8008ce4:	d02b      	beq.n	8008d3e <_malloc_r+0xd2>
 8008ce6:	6823      	ldr	r3, [r4, #0]
 8008ce8:	442b      	add	r3, r5
 8008cea:	6023      	str	r3, [r4, #0]
 8008cec:	e00e      	b.n	8008d0c <_malloc_r+0xa0>
 8008cee:	6822      	ldr	r2, [r4, #0]
 8008cf0:	1b52      	subs	r2, r2, r5
 8008cf2:	d41e      	bmi.n	8008d32 <_malloc_r+0xc6>
 8008cf4:	2a0b      	cmp	r2, #11
 8008cf6:	d916      	bls.n	8008d26 <_malloc_r+0xba>
 8008cf8:	1961      	adds	r1, r4, r5
 8008cfa:	42a3      	cmp	r3, r4
 8008cfc:	6025      	str	r5, [r4, #0]
 8008cfe:	bf18      	it	ne
 8008d00:	6059      	strne	r1, [r3, #4]
 8008d02:	6863      	ldr	r3, [r4, #4]
 8008d04:	bf08      	it	eq
 8008d06:	6031      	streq	r1, [r6, #0]
 8008d08:	5162      	str	r2, [r4, r5]
 8008d0a:	604b      	str	r3, [r1, #4]
 8008d0c:	4638      	mov	r0, r7
 8008d0e:	f104 060b 	add.w	r6, r4, #11
 8008d12:	f000 f835 	bl	8008d80 <__malloc_unlock>
 8008d16:	f026 0607 	bic.w	r6, r6, #7
 8008d1a:	1d23      	adds	r3, r4, #4
 8008d1c:	1af2      	subs	r2, r6, r3
 8008d1e:	d0b6      	beq.n	8008c8e <_malloc_r+0x22>
 8008d20:	1b9b      	subs	r3, r3, r6
 8008d22:	50a3      	str	r3, [r4, r2]
 8008d24:	e7b3      	b.n	8008c8e <_malloc_r+0x22>
 8008d26:	6862      	ldr	r2, [r4, #4]
 8008d28:	42a3      	cmp	r3, r4
 8008d2a:	bf0c      	ite	eq
 8008d2c:	6032      	streq	r2, [r6, #0]
 8008d2e:	605a      	strne	r2, [r3, #4]
 8008d30:	e7ec      	b.n	8008d0c <_malloc_r+0xa0>
 8008d32:	4623      	mov	r3, r4
 8008d34:	6864      	ldr	r4, [r4, #4]
 8008d36:	e7b2      	b.n	8008c9e <_malloc_r+0x32>
 8008d38:	4634      	mov	r4, r6
 8008d3a:	6876      	ldr	r6, [r6, #4]
 8008d3c:	e7b9      	b.n	8008cb2 <_malloc_r+0x46>
 8008d3e:	230c      	movs	r3, #12
 8008d40:	603b      	str	r3, [r7, #0]
 8008d42:	4638      	mov	r0, r7
 8008d44:	f000 f81c 	bl	8008d80 <__malloc_unlock>
 8008d48:	e7a1      	b.n	8008c8e <_malloc_r+0x22>
 8008d4a:	6025      	str	r5, [r4, #0]
 8008d4c:	e7de      	b.n	8008d0c <_malloc_r+0xa0>
 8008d4e:	bf00      	nop
 8008d50:	2000139c 	.word	0x2000139c

08008d54 <_sbrk_r>:
 8008d54:	b538      	push	{r3, r4, r5, lr}
 8008d56:	4d06      	ldr	r5, [pc, #24]	; (8008d70 <_sbrk_r+0x1c>)
 8008d58:	2300      	movs	r3, #0
 8008d5a:	4604      	mov	r4, r0
 8008d5c:	4608      	mov	r0, r1
 8008d5e:	602b      	str	r3, [r5, #0]
 8008d60:	f000 f816 	bl	8008d90 <_sbrk>
 8008d64:	1c43      	adds	r3, r0, #1
 8008d66:	d102      	bne.n	8008d6e <_sbrk_r+0x1a>
 8008d68:	682b      	ldr	r3, [r5, #0]
 8008d6a:	b103      	cbz	r3, 8008d6e <_sbrk_r+0x1a>
 8008d6c:	6023      	str	r3, [r4, #0]
 8008d6e:	bd38      	pop	{r3, r4, r5, pc}
 8008d70:	200013a4 	.word	0x200013a4

08008d74 <__malloc_lock>:
 8008d74:	4801      	ldr	r0, [pc, #4]	; (8008d7c <__malloc_lock+0x8>)
 8008d76:	f000 b809 	b.w	8008d8c <__retarget_lock_acquire_recursive>
 8008d7a:	bf00      	nop
 8008d7c:	200013a8 	.word	0x200013a8

08008d80 <__malloc_unlock>:
 8008d80:	4801      	ldr	r0, [pc, #4]	; (8008d88 <__malloc_unlock+0x8>)
 8008d82:	f000 b804 	b.w	8008d8e <__retarget_lock_release_recursive>
 8008d86:	bf00      	nop
 8008d88:	200013a8 	.word	0x200013a8

08008d8c <__retarget_lock_acquire_recursive>:
 8008d8c:	4770      	bx	lr

08008d8e <__retarget_lock_release_recursive>:
 8008d8e:	4770      	bx	lr

08008d90 <_sbrk>:
 8008d90:	4a04      	ldr	r2, [pc, #16]	; (8008da4 <_sbrk+0x14>)
 8008d92:	6811      	ldr	r1, [r2, #0]
 8008d94:	4603      	mov	r3, r0
 8008d96:	b909      	cbnz	r1, 8008d9c <_sbrk+0xc>
 8008d98:	4903      	ldr	r1, [pc, #12]	; (8008da8 <_sbrk+0x18>)
 8008d9a:	6011      	str	r1, [r2, #0]
 8008d9c:	6810      	ldr	r0, [r2, #0]
 8008d9e:	4403      	add	r3, r0
 8008da0:	6013      	str	r3, [r2, #0]
 8008da2:	4770      	bx	lr
 8008da4:	200013ac 	.word	0x200013ac
 8008da8:	200013b0 	.word	0x200013b0

08008dac <_init>:
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	bf00      	nop
 8008db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008db2:	bc08      	pop	{r3}
 8008db4:	469e      	mov	lr, r3
 8008db6:	4770      	bx	lr

08008db8 <_fini>:
 8008db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dba:	bf00      	nop
 8008dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dbe:	bc08      	pop	{r3}
 8008dc0:	469e      	mov	lr, r3
 8008dc2:	4770      	bx	lr
